
ProyectoFreeRTOS/out/ProyectoFreeRTOS.elf:     file format elf32-littlearm
ProyectoFreeRTOS/out/ProyectoFreeRTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0044d5

Program Header:
0x70000001 off    0x000150c0 vaddr 0x1a0050c0 paddr 0x1a0050c0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002d0c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000050c8 memsz 0x000050c8 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0050c8 align 2**16
         filesz 0x000000cc memsz 0x000000cc flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050c0  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  10000000  1a0050c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
  6 .bss          00002c3c  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0050c0  1a0050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000200cc  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
 17 .noinit       00000000  10002d0c  10002d0c  000200cc  2**2
                  CONTENTS
 18 .debug_info   00027f6a  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000057c1  00000000  00000000  00048036  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000b6ca  00000000  00000000  0004d7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000fd8  00000000  00000000  00058ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000010d8  00000000  00000000  00059e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000e845  00000000  00000000  0005af71  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00013bd8  00000000  00000000  000697b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00027b78  00000000  00000000  0007d38e  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000a4f06  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000a4f85  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002a68  00000000  00000000  000a4fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0050c0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002d0c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002fc4 l     F .text	000000bc uartProcessIRQ
10002c94 l     O .bss	00000004 rxIsrCallbackUART0
10002c98 l     O .bss	00000004 rxIsrCallbackUART2
10002c9c l     O .bss	00000004 rxIsrCallbackUART3
10002ca0 l     O .bss	00000004 txIsrCallbackUART0
10002ca4 l     O .bss	00000004 txIsrCallbackUART2
10002ca8 l     O .bss	00000004 txIsrCallbackUART3
1a004ed4 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_blinky.c
00000000 l    df *ABS*	00000000 adaptacion_mpu9250.c
1a0006c8 l     F .text	00000080 Ampu9250InitializeControlStructure
1a000748 l     F .text	00000034 Ampu9250ReadRegisters
1a00077c l     F .text	00000020 Ampu9250WhoAmI
1a00079c l     F .text	00000048 Ampu9250WriteRegister
1a0007e4 l     F .text	00000058 Ampu9250ReadAK8963Registers
1a00083c l     F .text	00000020 Ampu9250WhoAmIAK8963
1a00085c l     F .text	00000078 Ampu9250WriteAK8963Register
1a0008d4 l     F .text	00000094 Ampu9250SetGyroRange
1a000968 l     F .text	000000f8 Ampu9250SetDlpfBandwidth
1a000a60 l     F .text	000000ac Ampu9250SetSrd
1a000ddc l     F .text	00000158 Ampu9250CalibrateGyro
100000d8 l     O .bss	00000158 Acontrol
00000000 l    df *ABS*	00000000 heap_1.c
10000234 l     O .bss	00002000 ucHeap
10000230 l     O .bss	00000004 pucAlignedHeap.11323
10002234 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a001266 l     F .text	0000001e prvIsQueueFull
1a001284 l     F .text	0000001a prvIsQueueEmpty
1a00129e l     F .text	00000076 prvCopyDataToQueue
1a001314 l     F .text	00000024 prvCopyDataFromQueue
1a001338 l     F .text	0000006e prvUnlockQueue
1a00142c l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002238 l     O .bss	00000168 uxIdleTaskStack.10613
100023a0 l     O .bss	000005a0 uxTimerTaskStack.10620
10002940 l     O .bss	00000060 xIdleTaskTCB.10612
100029a0 l     O .bss	00000060 xTimerTaskTCB.10619
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0019c0 l     F .text	0000002c prvResetNextTaskUnblockTime
1a0019ec l     F .text	00000092 prvInitialiseNewTask
1a001a80 l     F .text	00000068 prvInitialiseTaskLists
1a001ae8 l     F .text	000000ac prvAddNewTaskToReadyList
1a001b94 l     F .text	00000038 prvDeleteTCB
1a001bcc l     F .text	0000004c prvCheckTasksWaitingTermination
1a001c18 l     F .text	00000028 prvIdleTask
1a001c40 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002a04 l     O .bss	00000004 pxDelayedTaskList
10002a08 l     O .bss	00000004 pxOverflowDelayedTaskList
10002a0c l     O .bss	0000008c pxReadyTasksLists
10002a98 l     O .bss	00000004 uxCurrentNumberOfTasks
10002a9c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002aa0 l     O .bss	00000004 uxPendedTicks
10002aa4 l     O .bss	00000004 uxSchedulerSuspended
10002aa8 l     O .bss	00000004 uxTaskNumber
10002aac l     O .bss	00000004 uxTopReadyPriority
10002ab0 l     O .bss	00000014 xDelayedTaskList1
10002ac4 l     O .bss	00000014 xDelayedTaskList2
10002ad8 l     O .bss	00000004 xNextTaskUnblockTime
10002adc l     O .bss	00000004 xNumOfOverflows
10002ae0 l     O .bss	00000014 xPendingReadyList
10002af4 l     O .bss	00000004 xSchedulerRunning
10002af8 l     O .bss	00000014 xSuspendedTaskList
10002b0c l     O .bss	00000014 xTasksWaitingTermination
10002b20 l     O .bss	00000004 xTickCount
10002b24 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0023e8 l     F .text	00000020 prvGetNextExpireTime
1a002408 l     F .text	00000048 prvInsertTimerInActiveList
1a002450 l     F .text	00000070 prvCheckForValidListAndQueue
1a0024c0 l     F .text	00000040 prvInitialiseNewTimer
1a002890 l     F .text	00000016 prvTimerTask
1a00261c l     F .text	00000078 prvSwitchTimerLists
1a002694 l     F .text	0000002c prvSampleTimeNow
1a0026c0 l     F .text	00000060 prvProcessExpiredTimer
1a002720 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002794 l     F .text	000000fc prvProcessReceivedCommands
10002b28 l     O .bss	00000004 pxCurrentTimerList
10002b2c l     O .bss	00000004 pxOverflowTimerList
10002b30 l     O .bss	000000a0 ucStaticTimerQueueStorage.11713
10002bd0 l     O .bss	00000014 xActiveTimerList1
10002be4 l     O .bss	00000014 xActiveTimerList2
10002bf8 l     O .bss	00000004 xLastTime.11662
10002bfc l     O .bss	00000050 xStaticTimerQueue.11712
10002c4c l     O .bss	00000004 xTimerQueue
10002c50 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a0028a8 l     F .text	00000040 prvTaskExitError
1a0028e8 l     F .text	00000022 prvPortStartFirstTask
1a002910 l     F .text	0000000e vPortEnableVFP
1a002970 l       .text	00000000 pxCurrentTCBConst2
1a002a50 l       .text	00000000 pxCurrentTCBConst
10002c54 l     O .bss	00000001 ucMaxSysCallPriority
10002c58 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002c40 l     F .text	00000010 clearInterrupt
1a002c50 l     F .text	0000005c serveInterrupt
1000000c l     O .data	00000048 ultrasonicSensors
1a004d8c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002ccc l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10002c64 l     O .bss	00000030 tickerObject.11711
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a003170 l     F .text	00000030 i2cHardwareInit
1a0031a0 l     F .text	0000003c i2cHardwareRead
1a0031dc l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a003266 l     F .text	00000002 errorOcurred
1a003268 l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a003468 l     F .text	00000044 Board_LED_Init
1a0034ac l     F .text	00000040 Board_TEC_Init
1a0034ec l     F .text	00000040 Board_GPIO_Init
1a00352c l     F .text	00000038 Board_SPI_Init
1a003564 l     F .text	00000024 Board_I2C_Init
1a003588 l     F .text	00000030 Board_ADC_Init
1a004f20 l     O .text	00000008 GpioButtons
1a004f28 l     O .text	0000000c GpioLeds
1a004f34 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004f4c l     O .text	0000000c InitClkStates
1a004f58 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0036e4 l     F .text	0000002c Chip_UART_GetIndex
1a004ff0 l     O .text	00000008 UART_BClock
1a004ff8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00388c l     F .text	00000014 Chip_ADC_GetClockIndex
1a0038a0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003968 l     F .text	000000a4 pll_calc_divs
1a003a0c l     F .text	0000010c pll_get_frac
1a003b18 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003d8c l     F .text	00000022 Chip_Clock_GetDivRate
10002cac l     O .bss	00000008 audio_usb_pll_freq
1a00500c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005078 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a004420 l     F .text	00000014 Chip_SSP_GetClockIndex
1a004434 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a0050c0 l       .bss_RAM5	00000000 __init_array_end
1a0050c0 l       .bss_RAM5	00000000 __preinit_array_end
1a0050c0 l       .bss_RAM5	00000000 __init_array_start
1a0050c0 l       .bss_RAM5	00000000 __preinit_array_start
1a003bb0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a004148 g     F .text	0000000e Chip_I2CM_Xfer
1a0032ec g     F .text	00000044 TIMER2_IRQHandler
1a003218 g     F .text	0000000e i2cInit
1a00018e  w    F .text	00000002 DebugMon_Handler
1a000194  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000194  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000194  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0029b8 g     F .text	0000002c vPortExitCritical
1a004878 g     F .text	0000005a .hidden __floatdidf
1a000194  w    F .text	00000002 I2C0_IRQHandler
10002c5c g     O .bss	00000004 callBackFuncParams
1a000b0c g     F .text	00000288 Ampu9250Read
1a000184  w    F .text	00000002 HardFault_Handler
1a0018a8 g     F .text	00000052 vQueueWaitForMessageRestricted
1a0041f4 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a003946 g     F .text	0000000c Chip_ADC_SetResolution
1a000f34 g     F .text	000002ac Ampu9250Init
1a002a54 g     F .text	0000002c SysTick_Handler
1a003764 g     F .text	00000040 Chip_UART_SetBaud
1a000194  w    F .text	00000002 SDIO_IRQHandler
1a000194  w    F .text	00000002 ATIMER_IRQHandler
1a0029f0 g     F .text	00000064 PendSV_Handler
1a00165c g     F .text	000000cc xQueueGenericSendFromISR
1a000182  w    F .text	00000002 NMI_Handler
1a0050c8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000194  w    F .text	00000002 I2C1_IRQHandler
1a000194  w    F .text	00000002 UART1_IRQHandler
1a000194  w    F .text	00000002 GPIO5_IRQHandler
1a000194  w    F .text	00000002 CAN1_IRQHandler
1a003226 g     F .text	00000028 i2cRead
10002a00 g     O .bss	00000004 pxCurrentTCB
100000d0 g     O .bss	00000004 alfa
53ff3388 g       *ABS*	00000000 __valid_user_code_checksum
1a0050c8 g       .ARM.exidx	00000000 _etext
1a000194  w    F .text	00000002 USB1_IRQHandler
1a000194  w    F .text	00000002 I2S0_IRQHandler
1a002274 g     F .text	00000018 vTaskInternalSetTimeOutState
1a003330 g     F .text	00000044 TIMER3_IRQHandler
1a003e2e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001b4 g     F .text	00000012 bss_init
1a002ab8 g     F .text	00000110 xPortStartScheduler
1a004cbc g     F .text	00000016 memcpy
1a002180 g     F .text	00000030 vTaskPlaceOnEventList
1a000194  w    F .text	00000002 SGPIO_IRQHandler
1a000d94 g     F .text	0000000c Ampu9250GetAccelX_mss
1a004800 g     F .text	00000022 .hidden __floatsidf
1a002a80  w    F .text	00000038 vPortSetupTimerInterrupt
1a0043a0 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a004974 g     F .text	00000000 .hidden __aeabi_uldivmod
10002d0c g       .noinit	00000000 _noinit
1a001250 g     F .text	00000016 vPortFree
1a003142 g     F .text	00000018 uartWriteString
10002d08 g     O .bss	00000004 SystemCoreClock
1a003710 g     F .text	00000054 Chip_UART_Init
1a000194  w    F .text	00000002 ADC0_IRQHandler
1a002f40 g     F .text	00000038 tickerCallback
1a002bc8 g     F .text	0000005c vPortValidateInterruptPriority
1a00018a  w    F .text	00000002 UsageFault_Handler
1a003eac g     F .text	0000004c Chip_Clock_GetRate
1a001916 g     F .text	00000018 vListInsertEnd
1a000194  w    F .text	00000002 GPIO6_IRQHandler
10002cf8 g     O .bss	00000008 tickCounter
1a00366c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0047e0 g     F .text	0000001e .hidden __aeabi_ui2d
1a004370 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a0049a4 g     F .text	000002cc .hidden __udivmoddi4
1a00455c g     F .text	00000000 .hidden __aeabi_drsub
1a004f1c g     O .text	00000004 ExtRateIn
1a000194  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001910 g     F .text	00000006 vListInitialiseItem
1a000300 g     F .text	00000040 myTask
1a002cb6 g     F .text	0000000a GPIO1_IRQHandler
1a001728 g     F .text	00000158 xQueueReceive
10002cb4 g     O .bss	00000040 xQueueRegistry
1a004824 g     F .text	00000042 .hidden __extendsfdf2
1a0019a4 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a000194  w    F .text	00000002 SSP0_IRQHandler
1a004568 g     F .text	00000276 .hidden __adddf3
1a0050c0 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a004c74 g     F .text	00000048 __libc_init_array
1a0047e0 g     F .text	0000001e .hidden __floatunsidf
1a000194  w    F .text	00000002 ADC1_IRQHandler
1a0011e0 g     F .text	00000070 pvPortMalloc
1a0035dc g     F .text	0000003c Board_Init
1a004558 g     F .text	00000002 _init
1a0018fa g     F .text	00000016 vListInitialise
1a000dd0 g     F .text	0000000c Ampu9250GetGyroZ_rads
1a000114 g       .text	00000000 __data_section_table
1a0048d4 g     F .text	0000009e .hidden __aeabi_d2f
1a001e54 g     F .text	0000000c xTaskGetTickCount
1a0014e0 g     F .text	0000017c xQueueGenericSend
1a000194  w    F .text	00000002 RTC_IRQHandler
10002d0c g       .bss	00000000 _ebss
1a00326c g     F .text	00000040 TIMER0_IRQHandler
1a002f78 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000194  w    F .text	00000002 SPI_IRQHandler
1a004156 g     F .text	00000024 Chip_I2CM_XferBlocking
1a004338 g     F .text	00000038 Chip_I2C_SetClockRate
1a002338 g     F .text	000000b0 xTaskPriorityDisinherit
1a000194  w    F .text	00000002 LCD_IRQHandler
1a003b64 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0021e8 g     F .text	0000008c xTaskRemoveFromEventList
1a0019be g     F .text	00000002 vApplicationMallocFailedHook
1a004568 g     F .text	00000276 .hidden __aeabi_dadd
1a000196 g     F .text	0000001e data_init
1a0003f8 g     F .text	00000264 tareaA
1a000dc4 g     F .text	0000000c Ampu9250GetGyroY_rads
1a004868 g     F .text	0000006a .hidden __aeabi_ul2d
1a0032ac g     F .text	00000040 TIMER1_IRQHandler
1a004314 g     F .text	00000024 Chip_I2C_Init
1a00315a g     F .text	0000000a UART2_IRQHandler
1a003d20 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004d90 g     O .text	00000136 gpioPinsInit
1a003128 g     F .text	0000001a uartWriteByte
1a00444c g     F .text	00000012 Chip_SSP_SetClockRate
1a002cc0 g     F .text	0000000a GPIO2_IRQHandler
1a00228c g     F .text	00000080 xTaskCheckForTimeOut
1a003e08 g     F .text	00000026 Chip_Clock_GetBaseClock
1a000db8 g     F .text	0000000c Ampu9250GetGyroX_rads
100000d0 g       .bss	00000000 _bss
1a003914 g     F .text	00000032 Chip_ADC_SetSampleRate
1a004564 g     F .text	0000027a .hidden __aeabi_dsub
1a001e44 g     F .text	00000010 vTaskSuspendAll
1a004868 g     F .text	0000006a .hidden __floatundidf
1a000194  w    F .text	00000002 I2S1_IRQHandler
1a00445e g     F .text	0000003e Chip_SSP_SetBitRate
1a001962 g     F .text	00000028 uxListRemove
1a000da0 g     F .text	0000000c Ampu9250GetAccelY_mss
1a0041d0 g     F .text	00000002 Chip_GPIO_Init
1a004f48 g     O .text	00000004 OscRateIn
1a0030ac g     F .text	0000007c uartInit
1a001cd8 g     F .text	00000072 xTaskCreateStatic
10002d0c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0020b8 g     F .text	000000c8 vTaskSwitchContext
1a000194  w    F .text	00000002 SSP1_IRQHandler
1a00144e g     F .text	00000090 xQueueGenericCreateStatic
1a0021b0 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a004800 g     F .text	00000022 .hidden __aeabi_i2d
1a002d00 g     F .text	00000194 gpioInit
1a00198c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0025b0 g     F .text	0000006c xTimerGenericCommand
1a0019bc g     F .text	00000002 vApplicationStackOverflowHook
1a004c70  w    F .text	00000002 .hidden __aeabi_ldiv0
1a000194  w    F .text	00000002 USB0_IRQHandler
1a000194  w    F .text	00000002 GPIO3_IRQHandler
1a0043d0 g     F .text	00000018 Chip_I2C_IsStateChanged
1a000194  w    F .text	00000002 SCT_IRQHandler
1a003bcc g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004cd2 g     F .text	00000010 memset
1a000186  w    F .text	00000002 MemManage_Handler
1a00065c g     F .text	0000006c main
1a000194  w    F .text	00000002 WDT_IRQHandler
1a00192e g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002950 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a002500 g     F .text	00000064 xTimerCreateTimerTask
1a0048d4 g     F .text	0000009e .hidden __truncdfsf2
1a004878 g     F .text	0000005a .hidden __aeabi_l2d
1a003080 g     F .text	00000018 uartTxReady
1a000194  w    F .text	00000002 GPIO7_IRQHandler
1a003e3c g     F .text	0000003c Chip_Clock_EnableOpts
1a003be8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00417c g     F .text	00000054 fpuInit
1a003ca0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003618 g     F .text	0000001c SystemInit
1a000194  w    F .text	00000002 SPIFI_IRQHandler
1a000194  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002e94 g     F .text	00000056 gpioWrite
1a001f78 g     F .text	000000f4 xTaskResumeAll
1a001db0 g     F .text	00000094 vTaskStartScheduler
1a0038d4 g     F .text	00000040 Chip_ADC_Init
1a003634 g     F .text	00000038 Board_SetupMuxing
1a0037a4 g     F .text	000000e8 Chip_UART_SetBaudFDR
10002d00 g     O .bss	00000008 tickRateMS
1a000194  w    F .text	00000002 ETH_IRQHandler
10002c60 g     O .bss	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
100000d4 g     O .bss	00000001 beta
1a003098 g     F .text	00000014 uartTxWrite
1a000194  w    F .text	00000002 CAN0_IRQHandler
1a00404c g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a00230c g     F .text	0000000c vTaskMissedYield
10002d0c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00449c g     F .text	00000038 Chip_SSP_Init
1a0043e8 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a001880 g     F .text	00000028 vQueueAddToRegistry
1a000194  w    F .text	00000002 GINT0_IRQHandler
1a001e60 g     F .text	00000118 xTaskIncrementTick
1a000194  w    F .text	00000002 DAC_IRQHandler
1a00324e g     F .text	00000018 i2cWrite
1a0035b8 g     F .text	00000024 Board_Debug_Init
1a0013a8 g     F .text	00000084 xQueueGenericReset
100000cc g       .data	00000000 _edata
1a0041d4 g     F .text	00000020 Chip_I2C_EventHandler
1a000194  w    F .text	00000002 M0SUB_IRQHandler
1a001d4a g     F .text	00000066 xTaskCreate
1a003ef8 g     F .text	00000154 Chip_SetupCoreClock
1a002cac g     F .text	0000000a GPIO0_IRQHandler
1a000340 g     F .text	000000b8 myTask2
1a000000 g     O .text	00000114 g_pfnVectors
1a0044d4 g     F .text	00000084 ResetISR
1a003954 g     F .text	00000014 SystemCoreClockUpdate
1a000194  w    F .text	00000002 DMA_IRQHandler
1a00206c g     F .text	0000004c vTaskDelay
1a000194  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002318 g     F .text	00000020 xTaskGetSchedulerState
1a004c70  w    F .text	00000002 .hidden __aeabi_idiv0
1a000188  w    F .text	00000002 BusFault_Handler
1a002924 g     F .text	0000002c pxPortInitialiseStack
1a003e78 g     F .text	00000034 Chip_Clock_Enable
1a003164 g     F .text	0000000a UART3_IRQHandler
1a000194  w    F .text	00000002 MCPWM_IRQHandler
1a002564 g     F .text	0000004c xTimerCreateStatic
1a000194  w    F .text	00000002 M0APP_IRQHandler
1a002eea g     F .text	00000054 gpioRead
1a004824 g     F .text	00000042 .hidden __aeabi_f2d
1a003374 g     F .text	000000f4 boardInit
1a002974 g     F .text	00000044 vPortEnterCritical
1a004564 g     F .text	0000027a .hidden __subdf3
1a000194  w    F .text	00000002 GINT1_IRQHandler
1a000dac g     F .text	0000000c Ampu9250GetAccelZ_mss
1a003db0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a002c24 g     F .text	0000001c cyclesCounterInit
1a000194  w    F .text	00000002 GPIO4_IRQHandler
1a0036d8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 d5 44 00 1a 83 01 00 1a 85 01 00 1a     .....D..........
1a000010:	87 01 00 1a 89 01 00 1a 8b 01 00 1a 88 33 ff 53     .............3.S
	...
1a00002c:	51 29 00 1a 8f 01 00 1a 00 00 00 00 f1 29 00 1a     Q)...........)..
1a00003c:	55 2a 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     U*..............
1a00004c:	00 00 00 00 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00005c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00006c:	95 01 00 1a 6d 32 00 1a ad 32 00 1a ed 32 00 1a     ....m2...2...2..
1a00007c:	31 33 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     13..............
1a00008c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00009c:	95 01 00 1a 79 01 00 1a 95 01 00 1a 5b 31 00 1a     ....y.......[1..
1a0000ac:	65 31 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     e1..............
1a0000bc:	95 01 00 1a ad 2c 00 1a b7 2c 00 1a c1 2c 00 1a     .....,...,...,..
1a0000cc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000dc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000ec:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a0000fc:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a00010c:	95 01 00 1a 95 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a0050c8 	.word	0x1a0050c8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000cc 	.word	0x000000cc
1a000120:	1a0050c8 	.word	0x1a0050c8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0050c8 	.word	0x1a0050c8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0050c8 	.word	0x1a0050c8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0050c8 	.word	0x1a0050c8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	00002c3c 	.word	0x00002c3c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f002 ff22 	bl	1a002fc4 <uartProcessIRQ>
}
1a000180:	bd08      	pop	{r3, pc}

1a000182 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <NMI_Handler>

1a000184 <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <HardFault_Handler>

1a000186 <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <MemManage_Handler>

1a000188 <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <BusFault_Handler>

1a00018a <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a00018a:	e7fe      	b.n	1a00018a <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a00018c:	e7fe      	b.n	1a00018c <UsageFault_Handler+0x2>

1a00018e <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a00018e:	e7fe      	b.n	1a00018e <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000190:	e7fe      	b.n	1a000190 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000192:	e7fe      	b.n	1a000192 <DebugMon_Handler+0x4>

1a000194 <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a000194:	e7fe      	b.n	1a000194 <ADC0_IRQHandler>

1a000196 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	2300      	movs	r3, #0
1a000198:	4293      	cmp	r3, r2
1a00019a:	d20a      	bcs.n	1a0001b2 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00019c:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a00019e:	6804      	ldr	r4, [r0, #0]
1a0001a0:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001a4:	3004      	adds	r0, #4
1a0001a6:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	4293      	cmp	r3, r2
1a0001aa:	d3f8      	bcc.n	1a00019e <data_init+0x8>
}
1a0001ac:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b0:	4770      	bx	lr
1a0001b2:	4770      	bx	lr

1a0001b4 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	2300      	movs	r3, #0
1a0001b6:	e003      	b.n	1a0001c0 <bss_init+0xc>
        *pulDest++ = 0;
1a0001b8:	2200      	movs	r2, #0
1a0001ba:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001be:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c0:	428b      	cmp	r3, r1
1a0001c2:	d3f9      	bcc.n	1a0001b8 <bss_init+0x4>
}
1a0001c4:	4770      	bx	lr
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <myTask>:

/*==================[definiciones de funciones externas]=====================*/

// Implementacion de funcion de la tarea
void myTask( void* taskParmPtr )
{
1a000300:	b508      	push	{r3, lr}
1a000302:	e009      	b.n	1a000318 <myTask+0x18>
if (beta){
	   if(alfa>0){
		   alfa--;
		   gpioWrite( LED1, 1 );
	   }
	   else {		   gpioWrite( LED1, 0 );
1a000304:	2100      	movs	r1, #0
1a000306:	202b      	movs	r0, #43	; 0x2b
1a000308:	f002 fdc4 	bl	1a002e94 <gpioWrite>
	   	   	   	   	   beta=0;
1a00030c:	4b0a      	ldr	r3, [pc, #40]	; (1a000338 <myTask+0x38>)
1a00030e:	2200      	movs	r2, #0
1a000310:	701a      	strb	r2, [r3, #0]
	   }
}
     // debugPrintlnString( "Blink!" );
      // Envia la tarea al estado bloqueado durante 500ms
      vTaskDelay( 80 / portTICK_RATE_MS );
1a000312:	2050      	movs	r0, #80	; 0x50
1a000314:	f001 feaa 	bl	1a00206c <vTaskDelay>
if (beta){
1a000318:	4b07      	ldr	r3, [pc, #28]	; (1a000338 <myTask+0x38>)
1a00031a:	781b      	ldrb	r3, [r3, #0]
1a00031c:	2b00      	cmp	r3, #0
1a00031e:	d0f8      	beq.n	1a000312 <myTask+0x12>
	   if(alfa>0){
1a000320:	4b06      	ldr	r3, [pc, #24]	; (1a00033c <myTask+0x3c>)
1a000322:	681b      	ldr	r3, [r3, #0]
1a000324:	2b00      	cmp	r3, #0
1a000326:	d0ed      	beq.n	1a000304 <myTask+0x4>
		   alfa--;
1a000328:	3b01      	subs	r3, #1
1a00032a:	4a04      	ldr	r2, [pc, #16]	; (1a00033c <myTask+0x3c>)
1a00032c:	6013      	str	r3, [r2, #0]
		   gpioWrite( LED1, 1 );
1a00032e:	2101      	movs	r1, #1
1a000330:	202b      	movs	r0, #43	; 0x2b
1a000332:	f002 fdaf 	bl	1a002e94 <gpioWrite>
1a000336:	e7ec      	b.n	1a000312 <myTask+0x12>
1a000338:	100000d4 	.word	0x100000d4
1a00033c:	100000d0 	.word	0x100000d0

1a000340 <myTask2>:
   }
}
//
void myTask2( void* taskParmPtr )
{
1a000340:	b510      	push	{r4, lr}
   // ---------- CONFIGURACIONES ------------------------------
	int Actual=3;
1a000342:	2403      	movs	r4, #3
1a000344:	e017      	b.n	1a000376 <myTask2+0x36>
      // Intercambia el estado del LEDB

	   ///aswitcj
	         switch(Actual){
      case Boton_presionado:
    	  gpioWrite(LEDR,1);
1a000346:	2101      	movs	r1, #1
1a000348:	2028      	movs	r0, #40	; 0x28
1a00034a:	f002 fda3 	bl	1a002e94 <gpioWrite>
    	  gpioWrite(LEDG,1);
1a00034e:	2101      	movs	r1, #1
1a000350:	2029      	movs	r0, #41	; 0x29
1a000352:	f002 fd9f 	bl	1a002e94 <gpioWrite>
    	  gpioWrite(LEDB,1);
1a000356:	2101      	movs	r1, #1
1a000358:	202a      	movs	r0, #42	; 0x2a
1a00035a:	f002 fd9b 	bl	1a002e94 <gpioWrite>
    	  //cuenta
    	  alfa++;
1a00035e:	4a24      	ldr	r2, [pc, #144]	; (1a0003f0 <myTask2+0xb0>)
1a000360:	6813      	ldr	r3, [r2, #0]
1a000362:	3301      	adds	r3, #1
1a000364:	6013      	str	r3, [r2, #0]
    	  //
    	  if( gpioRead(tecla) ){
1a000366:	2024      	movs	r0, #36	; 0x24
1a000368:	f002 fdbf 	bl	1a002eea <gpioRead>
1a00036c:	2800      	cmp	r0, #0
1a00036e:	d138      	bne.n	1a0003e2 <myTask2+0xa2>
      }
	   ///aswitcj
     // gpioToggle( LED1 );
     // debugPrintlnString( "Blink!" );
      // Envia la tarea al estado bloqueado durante 500ms
      vTaskDelay( 40 / portTICK_RATE_MS );
1a000370:	2028      	movs	r0, #40	; 0x28
1a000372:	f001 fe7b 	bl	1a00206c <vTaskDelay>
	         switch(Actual){
1a000376:	2c03      	cmp	r4, #3
1a000378:	d8fa      	bhi.n	1a000370 <myTask2+0x30>
1a00037a:	a301      	add	r3, pc, #4	; (adr r3, 1a000380 <myTask2+0x40>)
1a00037c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
1a000380:	1a000347 	.word	0x1a000347
1a000384:	1a000391 	.word	0x1a000391
1a000388:	1a00039d 	.word	0x1a00039d
1a00038c:	1a0003cf 	.word	0x1a0003cf
		  if( !gpioRead(tecla) ){
1a000390:	2024      	movs	r0, #36	; 0x24
1a000392:	f002 fdaa 	bl	1a002eea <gpioRead>
1a000396:	bb30      	cbnz	r0, 1a0003e6 <myTask2+0xa6>
			  Actual=Boton_presionado;}
1a000398:	2400      	movs	r4, #0
1a00039a:	e7e9      	b.n	1a000370 <myTask2+0x30>
      	  gpioWrite(LEDR,1);
1a00039c:	2101      	movs	r1, #1
1a00039e:	2028      	movs	r0, #40	; 0x28
1a0003a0:	f002 fd78 	bl	1a002e94 <gpioWrite>
      	  gpioWrite(LEDG,0);
1a0003a4:	2100      	movs	r1, #0
1a0003a6:	2029      	movs	r0, #41	; 0x29
1a0003a8:	f002 fd74 	bl	1a002e94 <gpioWrite>
      	  gpioWrite(LEDB,0);
1a0003ac:	2100      	movs	r1, #0
1a0003ae:	202a      	movs	r0, #42	; 0x2a
1a0003b0:	f002 fd70 	bl	1a002e94 <gpioWrite>
      	  if(alfa>0){beta=1;}
1a0003b4:	4b0e      	ldr	r3, [pc, #56]	; (1a0003f0 <myTask2+0xb0>)
1a0003b6:	681b      	ldr	r3, [r3, #0]
1a0003b8:	b113      	cbz	r3, 1a0003c0 <myTask2+0x80>
1a0003ba:	4b0e      	ldr	r3, [pc, #56]	; (1a0003f4 <myTask2+0xb4>)
1a0003bc:	2201      	movs	r2, #1
1a0003be:	701a      	strb	r2, [r3, #0]
      	  if( !gpioRead(tecla) ){
1a0003c0:	2024      	movs	r0, #36	; 0x24
1a0003c2:	f002 fd92 	bl	1a002eea <gpioRead>
1a0003c6:	2800      	cmp	r0, #0
1a0003c8:	d1d2      	bne.n	1a000370 <myTask2+0x30>
    		  Actual=Boton_bajando;}
1a0003ca:	2401      	movs	r4, #1
1a0003cc:	e7d0      	b.n	1a000370 <myTask2+0x30>
    	  alfa++;
1a0003ce:	4a08      	ldr	r2, [pc, #32]	; (1a0003f0 <myTask2+0xb0>)
1a0003d0:	6813      	ldr	r3, [r2, #0]
1a0003d2:	3301      	adds	r3, #1
1a0003d4:	6013      	str	r3, [r2, #0]
		  if( gpioRead(tecla) ){
1a0003d6:	2024      	movs	r0, #36	; 0x24
1a0003d8:	f002 fd87 	bl	1a002eea <gpioRead>
1a0003dc:	b128      	cbz	r0, 1a0003ea <myTask2+0xaa>
			  Actual=Boton_nopresionado;}
1a0003de:	2402      	movs	r4, #2
1a0003e0:	e7c6      	b.n	1a000370 <myTask2+0x30>
    		  Actual=Boton_subiendo;}
1a0003e2:	2403      	movs	r4, #3
1a0003e4:	e7c4      	b.n	1a000370 <myTask2+0x30>
			  Actual=Boton_nopresionado;}
1a0003e6:	2402      	movs	r4, #2
1a0003e8:	e7c2      	b.n	1a000370 <myTask2+0x30>
			  Actual=Boton_presionado;}
1a0003ea:	2400      	movs	r4, #0
1a0003ec:	e7c0      	b.n	1a000370 <myTask2+0x30>
1a0003ee:	bf00      	nop
1a0003f0:	100000d0 	.word	0x100000d0
1a0003f4:	100000d4 	.word	0x100000d4

1a0003f8 <tareaA>:
   }
}

//
void tareaA( void* taskParmPtr ){
1a0003f8:	b530      	push	{r4, r5, lr}
1a0003fa:	ed2d 8b04 	vpush	{d8-d9}
1a0003fe:	b083      	sub	sp, #12
	int8_t status=0;
	float x=0,y=1,z=2;

	int i=0, d=6;
	uint8_t erre[d];
	erre[d]=0;
1a000400:	2300      	movs	r3, #0
1a000402:	f88d 3006 	strb.w	r3, [sp, #6]
	//unsigned char * chptr ;
	//chptr = (unsigned char*) malloc(4 * sizeof(char));

	int ipart =000;

	uartWriteString( UART_USB, "Alfa!\r\n" );
1a000406:	4988      	ldr	r1, [pc, #544]	; (1a000628 <tareaA+0x230>)
1a000408:	2003      	movs	r0, #3
1a00040a:	f002 fe9a 	bl	1a003142 <uartWriteString>
	status = Ampu9250Init( addr );
1a00040e:	2068      	movs	r0, #104	; 0x68
1a000410:	f000 fd90 	bl	1a000f34 <Ampu9250Init>
	if(status){uartWriteString( UART_USB, "MPU conectado!\r\n" );
1a000414:	b140      	cbz	r0, 1a000428 <tareaA+0x30>
1a000416:	4985      	ldr	r1, [pc, #532]	; (1a00062c <tareaA+0x234>)
1a000418:	2003      	movs	r0, #3
1a00041a:	f002 fe92 	bl	1a003142 <uartWriteString>
	}else{uartWriteString( UART_USB, "Mpu no detectado!\r\n" );	}
	uartWriteString( UART_USB, "Beta!\r\n" );
1a00041e:	4984      	ldr	r1, [pc, #528]	; (1a000630 <tareaA+0x238>)
1a000420:	2003      	movs	r0, #3
1a000422:	f002 fe8e 	bl	1a003142 <uartWriteString>
1a000426:	e0e5      	b.n	1a0005f4 <tareaA+0x1fc>
	}else{uartWriteString( UART_USB, "Mpu no detectado!\r\n" );	}
1a000428:	4982      	ldr	r1, [pc, #520]	; (1a000634 <tareaA+0x23c>)
1a00042a:	2003      	movs	r0, #3
1a00042c:	f002 fe89 	bl	1a003142 <uartWriteString>
1a000430:	e7f5      	b.n	1a00041e <tareaA+0x26>

    ipart = (int)x;
    i=0;
    while (ipart>0)
      {
    erre[i++] =(ipart%10) + '0';
1a000432:	4881      	ldr	r0, [pc, #516]	; (1a000638 <tareaA+0x240>)
1a000434:	fb80 3001 	smull	r3, r0, r0, r1
1a000438:	17cb      	asrs	r3, r1, #31
1a00043a:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
1a00043e:	461c      	mov	r4, r3
1a000440:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000444:	0058      	lsls	r0, r3, #1
1a000446:	1a0b      	subs	r3, r1, r0
1a000448:	3330      	adds	r3, #48	; 0x30
1a00044a:	a902      	add	r1, sp, #8
1a00044c:	4411      	add	r1, r2
1a00044e:	f801 3c08 	strb.w	r3, [r1, #-8]
   	ipart = ipart/10;
1a000452:	4621      	mov	r1, r4
    erre[i++] =(ipart%10) + '0';
1a000454:	3201      	adds	r2, #1
    while (ipart>0)
1a000456:	2900      	cmp	r1, #0
1a000458:	dceb      	bgt.n	1a000432 <tareaA+0x3a>
1a00045a:	e005      	b.n	1a000468 <tareaA+0x70>
     }

    while (i < d) {
    	erre[i++] = '0';}
1a00045c:	ab02      	add	r3, sp, #8
1a00045e:	4413      	add	r3, r2
1a000460:	2130      	movs	r1, #48	; 0x30
1a000462:	f803 1c08 	strb.w	r1, [r3, #-8]
1a000466:	3201      	adds	r2, #1
    while (i < d) {
1a000468:	2a05      	cmp	r2, #5
1a00046a:	ddf7      	ble.n	1a00045c <tareaA+0x64>

    len=sizeof(erre);
    i=0;
    j=len-1;
1a00046c:	2205      	movs	r2, #5
    i=0;
1a00046e:	2300      	movs	r3, #0
1a000470:	e00c      	b.n	1a00048c <tareaA+0x94>
    temp;
    while (i<j)
    {
    	temp = erre[i];
1a000472:	a902      	add	r1, sp, #8
1a000474:	18c8      	adds	r0, r1, r3
1a000476:	f810 4c08 	ldrb.w	r4, [r0, #-8]
    	erre[i] = erre[j];
1a00047a:	4411      	add	r1, r2
1a00047c:	f811 5c08 	ldrb.w	r5, [r1, #-8]
1a000480:	f800 5c08 	strb.w	r5, [r0, #-8]
    	erre[j] = temp;
1a000484:	f801 4c08 	strb.w	r4, [r1, #-8]
    	i++; j--;
1a000488:	3301      	adds	r3, #1
1a00048a:	3a01      	subs	r2, #1
    while (i<j)
1a00048c:	4293      	cmp	r3, r2
1a00048e:	dbf0      	blt.n	1a000472 <tareaA+0x7a>
    }



    uartWriteString( UART_USB, "yota!\r\n" );
1a000490:	496a      	ldr	r1, [pc, #424]	; (1a00063c <tareaA+0x244>)
1a000492:	2003      	movs	r0, #3
1a000494:	f002 fe55 	bl	1a003142 <uartWriteString>


    uartWriteString( UART_USB, "Giroscopo\r\n");
1a000498:	4969      	ldr	r1, [pc, #420]	; (1a000640 <tareaA+0x248>)
1a00049a:	2003      	movs	r0, #3
1a00049c:	f002 fe51 	bl	1a003142 <uartWriteString>

    uartWriteString( UART_USB, "GX:  ");
1a0004a0:	4968      	ldr	r1, [pc, #416]	; (1a000644 <tareaA+0x24c>)
1a0004a2:	2003      	movs	r0, #3
1a0004a4:	f002 fe4d 	bl	1a003142 <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a0004a8:	4d67      	ldr	r5, [pc, #412]	; (1a000648 <tareaA+0x250>)
1a0004aa:	4629      	mov	r1, r5
1a0004ac:	2003      	movs	r0, #3
1a0004ae:	f002 fe48 	bl	1a003142 <uartWriteString>
	erre[d]=0;
1a0004b2:	2400      	movs	r4, #0
1a0004b4:	f88d 4006 	strb.w	r4, [sp, #6]
	uartWriteString( UART_USB, erre );
1a0004b8:	4669      	mov	r1, sp
1a0004ba:	2003      	movs	r0, #3
1a0004bc:	f002 fe41 	bl	1a003142 <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a0004c0:	4629      	mov	r1, r5
1a0004c2:	2003      	movs	r0, #3
1a0004c4:	f002 fe3d 	bl	1a003142 <uartWriteString>



//
    ipart = (int)y;
1a0004c8:	eefd 7ae8 	vcvt.s32.f32	s15, s17
1a0004cc:	ee17 1a90 	vmov	r1, s15
    i=0;
1a0004d0:	4622      	mov	r2, r4
    while (ipart>0)
1a0004d2:	e011      	b.n	1a0004f8 <tareaA+0x100>
      {
    erre[i++] =(ipart%10) + '0';
1a0004d4:	4858      	ldr	r0, [pc, #352]	; (1a000638 <tareaA+0x240>)
1a0004d6:	fb80 3001 	smull	r3, r0, r0, r1
1a0004da:	17cb      	asrs	r3, r1, #31
1a0004dc:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
1a0004e0:	461c      	mov	r4, r3
1a0004e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0004e6:	0058      	lsls	r0, r3, #1
1a0004e8:	1a0b      	subs	r3, r1, r0
1a0004ea:	3330      	adds	r3, #48	; 0x30
1a0004ec:	a902      	add	r1, sp, #8
1a0004ee:	4411      	add	r1, r2
1a0004f0:	f801 3c08 	strb.w	r3, [r1, #-8]
   	ipart = ipart/10;
1a0004f4:	4621      	mov	r1, r4
    erre[i++] =(ipart%10) + '0';
1a0004f6:	3201      	adds	r2, #1
    while (ipart>0)
1a0004f8:	2900      	cmp	r1, #0
1a0004fa:	dceb      	bgt.n	1a0004d4 <tareaA+0xdc>
1a0004fc:	e005      	b.n	1a00050a <tareaA+0x112>
     }

    while (i < d) {
    	erre[i++] = '0';}
1a0004fe:	ab02      	add	r3, sp, #8
1a000500:	4413      	add	r3, r2
1a000502:	2130      	movs	r1, #48	; 0x30
1a000504:	f803 1c08 	strb.w	r1, [r3, #-8]
1a000508:	3201      	adds	r2, #1
    while (i < d) {
1a00050a:	2a05      	cmp	r2, #5
1a00050c:	ddf7      	ble.n	1a0004fe <tareaA+0x106>

    len=sizeof(erre);
    i=0;
    j=len-1;
1a00050e:	2205      	movs	r2, #5
    i=0;
1a000510:	2300      	movs	r3, #0
1a000512:	e00c      	b.n	1a00052e <tareaA+0x136>
    temp;
    while (i<j)
    {
    	temp = erre[i];
1a000514:	a902      	add	r1, sp, #8
1a000516:	18c8      	adds	r0, r1, r3
1a000518:	f810 4c08 	ldrb.w	r4, [r0, #-8]
    	erre[i] = erre[j];
1a00051c:	4411      	add	r1, r2
1a00051e:	f811 5c08 	ldrb.w	r5, [r1, #-8]
1a000522:	f800 5c08 	strb.w	r5, [r0, #-8]
    	erre[j] = temp;
1a000526:	f801 4c08 	strb.w	r4, [r1, #-8]
    	i++; j--;
1a00052a:	3301      	adds	r3, #1
1a00052c:	3a01      	subs	r2, #1
    while (i<j)
1a00052e:	4293      	cmp	r3, r2
1a000530:	dbf0      	blt.n	1a000514 <tareaA+0x11c>
    }

//


    uartWriteString( UART_USB, "GY:  ");
1a000532:	4946      	ldr	r1, [pc, #280]	; (1a00064c <tareaA+0x254>)
1a000534:	2003      	movs	r0, #3
1a000536:	f002 fe04 	bl	1a003142 <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a00053a:	4d43      	ldr	r5, [pc, #268]	; (1a000648 <tareaA+0x250>)
1a00053c:	4629      	mov	r1, r5
1a00053e:	2003      	movs	r0, #3
1a000540:	f002 fdff 	bl	1a003142 <uartWriteString>
	erre[d]=0;
1a000544:	2400      	movs	r4, #0
1a000546:	f88d 4006 	strb.w	r4, [sp, #6]
	uartWriteString( UART_USB, erre );
1a00054a:	4669      	mov	r1, sp
1a00054c:	2003      	movs	r0, #3
1a00054e:	f002 fdf8 	bl	1a003142 <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a000552:	4629      	mov	r1, r5
1a000554:	2003      	movs	r0, #3
1a000556:	f002 fdf4 	bl	1a003142 <uartWriteString>


//

    ipart = (int)z;
1a00055a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
1a00055e:	ee17 1a90 	vmov	r1, s15
    i=0;
1a000562:	4622      	mov	r2, r4
    while (ipart>0)
1a000564:	e011      	b.n	1a00058a <tareaA+0x192>
      {

    erre[i++] =(ipart%10) + '0';
1a000566:	4834      	ldr	r0, [pc, #208]	; (1a000638 <tareaA+0x240>)
1a000568:	fb80 3001 	smull	r3, r0, r0, r1
1a00056c:	17cb      	asrs	r3, r1, #31
1a00056e:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
1a000572:	461c      	mov	r4, r3
1a000574:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000578:	0058      	lsls	r0, r3, #1
1a00057a:	1a0b      	subs	r3, r1, r0
1a00057c:	3330      	adds	r3, #48	; 0x30
1a00057e:	a902      	add	r1, sp, #8
1a000580:	4411      	add	r1, r2
1a000582:	f801 3c08 	strb.w	r3, [r1, #-8]
   	ipart = ipart/10;
1a000586:	4621      	mov	r1, r4
    erre[i++] =(ipart%10) + '0';
1a000588:	3201      	adds	r2, #1
    while (ipart>0)
1a00058a:	2900      	cmp	r1, #0
1a00058c:	dceb      	bgt.n	1a000566 <tareaA+0x16e>
1a00058e:	e005      	b.n	1a00059c <tareaA+0x1a4>
     }

    while (i < d) {
    	erre[i++] = '0';}
1a000590:	ab02      	add	r3, sp, #8
1a000592:	4413      	add	r3, r2
1a000594:	2130      	movs	r1, #48	; 0x30
1a000596:	f803 1c08 	strb.w	r1, [r3, #-8]
1a00059a:	3201      	adds	r2, #1
    while (i < d) {
1a00059c:	2a05      	cmp	r2, #5
1a00059e:	ddf7      	ble.n	1a000590 <tareaA+0x198>

    len=sizeof(erre);
    i=0;
    j=len-1;
1a0005a0:	2205      	movs	r2, #5
    i=0;
1a0005a2:	2300      	movs	r3, #0
1a0005a4:	e00c      	b.n	1a0005c0 <tareaA+0x1c8>
    temp;
    while (i<j)
    {
    	temp = erre[i];
1a0005a6:	a902      	add	r1, sp, #8
1a0005a8:	18c8      	adds	r0, r1, r3
1a0005aa:	f810 4c08 	ldrb.w	r4, [r0, #-8]
    	erre[i] = erre[j];
1a0005ae:	4411      	add	r1, r2
1a0005b0:	f811 5c08 	ldrb.w	r5, [r1, #-8]
1a0005b4:	f800 5c08 	strb.w	r5, [r0, #-8]
    	erre[j] = temp;
1a0005b8:	f801 4c08 	strb.w	r4, [r1, #-8]
    	i++; j--;
1a0005bc:	3301      	adds	r3, #1
1a0005be:	3a01      	subs	r2, #1
    while (i<j)
1a0005c0:	4293      	cmp	r3, r2
1a0005c2:	dbf0      	blt.n	1a0005a6 <tareaA+0x1ae>



//

    uartWriteString( UART_USB, "GZ:  ");
1a0005c4:	4922      	ldr	r1, [pc, #136]	; (1a000650 <tareaA+0x258>)
1a0005c6:	2003      	movs	r0, #3
1a0005c8:	f002 fdbb 	bl	1a003142 <uartWriteString>
    uartWriteString( UART_USB, "\r\n" );
1a0005cc:	4c1e      	ldr	r4, [pc, #120]	; (1a000648 <tareaA+0x250>)
1a0005ce:	4621      	mov	r1, r4
1a0005d0:	2003      	movs	r0, #3
1a0005d2:	f002 fdb6 	bl	1a003142 <uartWriteString>
	erre[d]=0;
1a0005d6:	2300      	movs	r3, #0
1a0005d8:	f88d 3006 	strb.w	r3, [sp, #6]
  	uartWriteString( UART_USB, erre );
1a0005dc:	4669      	mov	r1, sp
1a0005de:	2003      	movs	r0, #3
1a0005e0:	f002 fdaf 	bl	1a003142 <uartWriteString>
   	uartWriteString( UART_USB, "\r\n" );
1a0005e4:	4621      	mov	r1, r4
1a0005e6:	2003      	movs	r0, #3
1a0005e8:	f002 fdab 	bl	1a003142 <uartWriteString>


	vTaskDelay( 1000 / portTICK_RATE_MS );
1a0005ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0005f0:	f001 fd3c 	bl	1a00206c <vTaskDelay>
	Ampu9250Read();
1a0005f4:	f000 fa8a 	bl	1a000b0c <Ampu9250Read>
	x=Ampu9250GetAccelX_mss()*1000;
1a0005f8:	f000 fbcc 	bl	1a000d94 <Ampu9250GetAccelX_mss>
1a0005fc:	ed9f 8a15 	vldr	s16, [pc, #84]	; 1a000654 <tareaA+0x25c>
1a000600:	ee20 9a08 	vmul.f32	s18, s0, s16
    y=Ampu9250GetAccelY_mss()*1000;
1a000604:	f000 fbcc 	bl	1a000da0 <Ampu9250GetAccelY_mss>
1a000608:	ee60 8a08 	vmul.f32	s17, s0, s16
    z=Ampu9250GetAccelZ_mss()*1000;
1a00060c:	f000 fbce 	bl	1a000dac <Ampu9250GetAccelZ_mss>
1a000610:	ee20 8a08 	vmul.f32	s16, s0, s16
    uartWriteString( UART_USB, "gamma!\r\n" );
1a000614:	4910      	ldr	r1, [pc, #64]	; (1a000658 <tareaA+0x260>)
1a000616:	2003      	movs	r0, #3
1a000618:	f002 fd93 	bl	1a003142 <uartWriteString>
    ipart = (int)x;
1a00061c:	eefd 7ac9 	vcvt.s32.f32	s15, s18
1a000620:	ee17 1a90 	vmov	r1, s15
    i=0;
1a000624:	2200      	movs	r2, #0
    while (ipart>0)
1a000626:	e716      	b.n	1a000456 <tareaA+0x5e>
1a000628:	1a004d00 	.word	0x1a004d00
1a00062c:	1a004d08 	.word	0x1a004d08
1a000630:	1a004d30 	.word	0x1a004d30
1a000634:	1a004d1c 	.word	0x1a004d1c
1a000638:	66666667 	.word	0x66666667
1a00063c:	1a004d44 	.word	0x1a004d44
1a000640:	1a004d4c 	.word	0x1a004d4c
1a000644:	1a004d58 	.word	0x1a004d58
1a000648:	1a004d60 	.word	0x1a004d60
1a00064c:	1a004d64 	.word	0x1a004d64
1a000650:	1a004d6c 	.word	0x1a004d6c
1a000654:	447a0000 	.word	0x447a0000
1a000658:	1a004d38 	.word	0x1a004d38

1a00065c <main>:
{
1a00065c:	b500      	push	{lr}
1a00065e:	b083      	sub	sp, #12
   boardConfig();
1a000660:	f002 fe88 	bl	1a003374 <boardInit>
   uartConfig( UART_USB, 115200 );
1a000664:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000668:	2003      	movs	r0, #3
1a00066a:	f002 fd1f 	bl	1a0030ac <uartInit>
   gpioWrite( LED3, ON );
1a00066e:	2101      	movs	r1, #1
1a000670:	202d      	movs	r0, #45	; 0x2d
1a000672:	f002 fc0f 	bl	1a002e94 <gpioWrite>
   xTaskCreate(
1a000676:	2400      	movs	r4, #0
1a000678:	9401      	str	r4, [sp, #4]
1a00067a:	2501      	movs	r5, #1
1a00067c:	9500      	str	r5, [sp, #0]
1a00067e:	4623      	mov	r3, r4
1a000680:	22b4      	movs	r2, #180	; 0xb4
1a000682:	490b      	ldr	r1, [pc, #44]	; (1a0006b0 <main+0x54>)
1a000684:	480b      	ldr	r0, [pc, #44]	; (1a0006b4 <main+0x58>)
1a000686:	f001 fb60 	bl	1a001d4a <xTaskCreate>
   xTaskCreate(
1a00068a:	9401      	str	r4, [sp, #4]
1a00068c:	9500      	str	r5, [sp, #0]
1a00068e:	4623      	mov	r3, r4
1a000690:	22b4      	movs	r2, #180	; 0xb4
1a000692:	4909      	ldr	r1, [pc, #36]	; (1a0006b8 <main+0x5c>)
1a000694:	4809      	ldr	r0, [pc, #36]	; (1a0006bc <main+0x60>)
1a000696:	f001 fb58 	bl	1a001d4a <xTaskCreate>
   xTaskCreate(
1a00069a:	9401      	str	r4, [sp, #4]
1a00069c:	9400      	str	r4, [sp, #0]
1a00069e:	4623      	mov	r3, r4
1a0006a0:	22b4      	movs	r2, #180	; 0xb4
1a0006a2:	4907      	ldr	r1, [pc, #28]	; (1a0006c0 <main+0x64>)
1a0006a4:	4807      	ldr	r0, [pc, #28]	; (1a0006c4 <main+0x68>)
1a0006a6:	f001 fb50 	bl	1a001d4a <xTaskCreate>
   vTaskStartScheduler();
1a0006aa:	f001 fb81 	bl	1a001db0 <vTaskStartScheduler>
1a0006ae:	e7fe      	b.n	1a0006ae <main+0x52>
1a0006b0:	1a004ce4 	.word	0x1a004ce4
1a0006b4:	1a000301 	.word	0x1a000301
1a0006b8:	1a004cec 	.word	0x1a004cec
1a0006bc:	1a000341 	.word	0x1a000341
1a0006c0:	1a004cf8 	.word	0x1a004cf8
1a0006c4:	1a0003f9 	.word	0x1a0003f9

1a0006c8 <Ampu9250InitializeControlStructure>:

/*==================[internal functions definition]==========================*/

static int8_t Ampu9250InitializeControlStructure( void )
{
	Acontrol._tempScale = 333.87f;
1a0006c8:	4b1b      	ldr	r3, [pc, #108]	; (1a000738 <Ampu9250InitializeControlStructure+0x70>)
1a0006ca:	4a1c      	ldr	r2, [pc, #112]	; (1a00073c <Ampu9250InitializeControlStructure+0x74>)
1a0006cc:	619a      	str	r2, [r3, #24]
	Acontrol._tempOffset = 21.0f;
1a0006ce:	4a1c      	ldr	r2, [pc, #112]	; (1a000740 <Ampu9250InitializeControlStructure+0x78>)
1a0006d0:	61da      	str	r2, [r3, #28]
	Acontrol._numSamples = 100;
1a0006d2:	2264      	movs	r2, #100	; 0x64
1a0006d4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	Acontrol._axs = 1.0f;
1a0006d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a0006dc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Acontrol._ays = 1.0f;
1a0006e0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	Acontrol._azs = 1.0f;
1a0006e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	Acontrol._maxCounts = 1000;
1a0006e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a0006ec:	f8a3 10d8 	strh.w	r1, [r3, #216]	; 0xd8
	Acontrol._deltaThresh = 0.3f;
1a0006f0:	4914      	ldr	r1, [pc, #80]	; (1a000744 <Ampu9250InitializeControlStructure+0x7c>)
1a0006f2:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	Acontrol._coeff = 8;
1a0006f6:	2108      	movs	r1, #8
1a0006f8:	f883 10e0 	strb.w	r1, [r3, #224]	; 0xe0
	Acontrol._hxs = 1.0f;
1a0006fc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	Acontrol._hys = 1.0f;
1a000700:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	Acontrol._hzs = 1.0f;
1a000704:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	Acontrol.tX[0] = 0;
1a000708:	2200      	movs	r2, #0
1a00070a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	Acontrol.tX[1] = 1;
1a00070e:	2101      	movs	r1, #1
1a000710:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
	Acontrol.tX[2] = 0;
1a000714:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	Acontrol.tY[0] = 1;
1a000718:	f8a3 1146 	strh.w	r1, [r3, #326]	; 0x146
	Acontrol.tY[1] = 0;
1a00071c:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
	Acontrol.tY[2] = 0;
1a000720:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	Acontrol.tZ[0] = 0;
1a000724:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	Acontrol.tZ[1] = 0;
1a000728:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	Acontrol.tZ[2] = -1;
1a00072c:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a000730:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
1a000734:	4770      	bx	lr
1a000736:	bf00      	nop
1a000738:	100000d8 	.word	0x100000d8
1a00073c:	43a6ef5c 	.word	0x43a6ef5c
1a000740:	41a80000 	.word	0x41a80000
1a000744:	3e99999a 	.word	0x3e99999a

1a000748 <Ampu9250ReadRegisters>:
      return -1;
	}
}

static int8_t Ampu9250ReadRegisters( uint8_t subAddress, uint8_t count )
{
1a000748:	b510      	push	{r4, lr}
1a00074a:	b086      	sub	sp, #24
1a00074c:	aa06      	add	r2, sp, #24
1a00074e:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if( i2cRead( I2C0,Acontrol.address,&subAddress,1,TRUE,Acontrol._buffer,count,TRUE) ){
1a000752:	4809      	ldr	r0, [pc, #36]	; (1a000778 <Ampu9250ReadRegisters+0x30>)
1a000754:	f810 4b24 	ldrb.w	r4, [r0], #36
1a000758:	2301      	movs	r3, #1
1a00075a:	9303      	str	r3, [sp, #12]
1a00075c:	9102      	str	r1, [sp, #8]
1a00075e:	9001      	str	r0, [sp, #4]
1a000760:	9300      	str	r3, [sp, #0]
1a000762:	4621      	mov	r1, r4
1a000764:	2000      	movs	r0, #0
1a000766:	f002 fd5e 	bl	1a003226 <i2cRead>
1a00076a:	b110      	cbz	r0, 1a000772 <Ampu9250ReadRegisters+0x2a>
		return 1;
1a00076c:	2001      	movs	r0, #1
	} else {
		return -1;
	}
}
1a00076e:	b006      	add	sp, #24
1a000770:	bd10      	pop	{r4, pc}
		return -1;
1a000772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000776:	e7fa      	b.n	1a00076e <Ampu9250ReadRegisters+0x26>
1a000778:	100000d8 	.word	0x100000d8

1a00077c <Ampu9250WhoAmI>:
		return -6;
	}
}

static int8_t Ampu9250WhoAmI( void )
{
1a00077c:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (Ampu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
1a00077e:	2101      	movs	r1, #1
1a000780:	2075      	movs	r0, #117	; 0x75
1a000782:	f7ff ffe1 	bl	1a000748 <Ampu9250ReadRegisters>
1a000786:	2800      	cmp	r0, #0
1a000788:	db03      	blt.n	1a000792 <Ampu9250WhoAmI+0x16>
		return -1;
	}
	// return the register value
	return Acontrol._buffer[0];
1a00078a:	4b03      	ldr	r3, [pc, #12]	; (1a000798 <Ampu9250WhoAmI+0x1c>)
1a00078c:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a000790:	bd08      	pop	{r3, pc}
		return -1;
1a000792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000796:	e7fb      	b.n	1a000790 <Ampu9250WhoAmI+0x14>
1a000798:	100000d8 	.word	0x100000d8

1a00079c <Ampu9250WriteRegister>:
{
1a00079c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00079e:	b085      	sub	sp, #20
1a0007a0:	4606      	mov	r6, r0
1a0007a2:	460c      	mov	r4, r1
	transmitDataBuffer[0] = subAddress;
1a0007a4:	f88d 000c 	strb.w	r0, [sp, #12]
	transmitDataBuffer[1] = data;
1a0007a8:	f88d 100d 	strb.w	r1, [sp, #13]
	i2cWrite(I2C0, Acontrol.address, transmitDataBuffer, 2, TRUE);
1a0007ac:	4d0c      	ldr	r5, [pc, #48]	; (1a0007e0 <Ampu9250WriteRegister+0x44>)
1a0007ae:	7829      	ldrb	r1, [r5, #0]
1a0007b0:	2701      	movs	r7, #1
1a0007b2:	9700      	str	r7, [sp, #0]
1a0007b4:	2302      	movs	r3, #2
1a0007b6:	aa03      	add	r2, sp, #12
1a0007b8:	2000      	movs	r0, #0
1a0007ba:	f002 fd48 	bl	1a00324e <i2cWrite>
	vTaskDelay( 10 / portTICK_RATE_MS );//delay(10);
1a0007be:	200a      	movs	r0, #10
1a0007c0:	f001 fc54 	bl	1a00206c <vTaskDelay>
	Ampu9250ReadRegisters(subAddress,1);
1a0007c4:	4639      	mov	r1, r7
1a0007c6:	4630      	mov	r0, r6
1a0007c8:	f7ff ffbe 	bl	1a000748 <Ampu9250ReadRegisters>
	if(Acontrol._buffer[0] == data) {
1a0007cc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
1a0007d0:	42a3      	cmp	r3, r4
1a0007d2:	d102      	bne.n	1a0007da <Ampu9250WriteRegister+0x3e>
      return 1;
1a0007d4:	4638      	mov	r0, r7
}
1a0007d6:	b005      	add	sp, #20
1a0007d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return -1;
1a0007da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0007de:	e7fa      	b.n	1a0007d6 <Ampu9250WriteRegister+0x3a>
1a0007e0:	100000d8 	.word	0x100000d8

1a0007e4 <Ampu9250ReadAK8963Registers>:
	// return the register value
	return Acontrol._buffer[0];
}

static int8_t Ampu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
1a0007e4:	b538      	push	{r3, r4, r5, lr}
1a0007e6:	4605      	mov	r5, r0
1a0007e8:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for read
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
1a0007ea:	218c      	movs	r1, #140	; 0x8c
1a0007ec:	2025      	movs	r0, #37	; 0x25
1a0007ee:	f7ff ffd5 	bl	1a00079c <Ampu9250WriteRegister>
1a0007f2:	2800      	cmp	r0, #0
1a0007f4:	db17      	blt.n	1a000826 <Ampu9250ReadAK8963Registers+0x42>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a0007f6:	4629      	mov	r1, r5
1a0007f8:	2026      	movs	r0, #38	; 0x26
1a0007fa:	f7ff ffcf 	bl	1a00079c <Ampu9250WriteRegister>
1a0007fe:	2800      	cmp	r0, #0
1a000800:	db14      	blt.n	1a00082c <Ampu9250ReadAK8963Registers+0x48>
		return -2;
	}
	// enable I2C and request the bytes
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
1a000802:	f044 0180 	orr.w	r1, r4, #128	; 0x80
1a000806:	2027      	movs	r0, #39	; 0x27
1a000808:	f7ff ffc8 	bl	1a00079c <Ampu9250WriteRegister>
1a00080c:	2800      	cmp	r0, #0
1a00080e:	db10      	blt.n	1a000832 <Ampu9250ReadAK8963Registers+0x4e>
		return -3;
	}
	vTaskDelay( 1 / portTICK_RATE_MS );//delay(1); // takes some time for these registers to fill
1a000810:	2001      	movs	r0, #1
1a000812:	f001 fc2b 	bl	1a00206c <vTaskDelay>
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	Acontrol._status = Ampu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
1a000816:	4621      	mov	r1, r4
1a000818:	2049      	movs	r0, #73	; 0x49
1a00081a:	f7ff ff95 	bl	1a000748 <Ampu9250ReadRegisters>
1a00081e:	4b06      	ldr	r3, [pc, #24]	; (1a000838 <Ampu9250ReadAK8963Registers+0x54>)
1a000820:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	return Acontrol._status;
}
1a000824:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00082a:	e7fb      	b.n	1a000824 <Ampu9250ReadAK8963Registers+0x40>
		return -2;
1a00082c:	f06f 0001 	mvn.w	r0, #1
1a000830:	e7f8      	b.n	1a000824 <Ampu9250ReadAK8963Registers+0x40>
		return -3;
1a000832:	f06f 0002 	mvn.w	r0, #2
1a000836:	e7f5      	b.n	1a000824 <Ampu9250ReadAK8963Registers+0x40>
1a000838:	100000d8 	.word	0x100000d8

1a00083c <Ampu9250WhoAmIAK8963>:
{
1a00083c:	b508      	push	{r3, lr}
	if (Ampu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
1a00083e:	2101      	movs	r1, #1
1a000840:	2000      	movs	r0, #0
1a000842:	f7ff ffcf 	bl	1a0007e4 <Ampu9250ReadAK8963Registers>
1a000846:	2800      	cmp	r0, #0
1a000848:	db03      	blt.n	1a000852 <Ampu9250WhoAmIAK8963+0x16>
	return Acontrol._buffer[0];
1a00084a:	4b03      	ldr	r3, [pc, #12]	; (1a000858 <Ampu9250WhoAmIAK8963+0x1c>)
1a00084c:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a000850:	bd08      	pop	{r3, pc}
		return -1;
1a000852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000856:	e7fb      	b.n	1a000850 <Ampu9250WhoAmIAK8963+0x14>
1a000858:	100000d8 	.word	0x100000d8

1a00085c <Ampu9250WriteAK8963Register>:
{
1a00085c:	b538      	push	{r3, r4, r5, lr}
1a00085e:	4604      	mov	r4, r0
1a000860:	460d      	mov	r5, r1
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
1a000862:	210c      	movs	r1, #12
1a000864:	2025      	movs	r0, #37	; 0x25
1a000866:	f7ff ff99 	bl	1a00079c <Ampu9250WriteRegister>
1a00086a:	2800      	cmp	r0, #0
1a00086c:	db1e      	blt.n	1a0008ac <Ampu9250WriteAK8963Register+0x50>
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a00086e:	4621      	mov	r1, r4
1a000870:	2026      	movs	r0, #38	; 0x26
1a000872:	f7ff ff93 	bl	1a00079c <Ampu9250WriteRegister>
1a000876:	2800      	cmp	r0, #0
1a000878:	db1b      	blt.n	1a0008b2 <Ampu9250WriteAK8963Register+0x56>
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
1a00087a:	4629      	mov	r1, r5
1a00087c:	2063      	movs	r0, #99	; 0x63
1a00087e:	f7ff ff8d 	bl	1a00079c <Ampu9250WriteRegister>
1a000882:	2800      	cmp	r0, #0
1a000884:	db18      	blt.n	1a0008b8 <Ampu9250WriteAK8963Register+0x5c>
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
1a000886:	2181      	movs	r1, #129	; 0x81
1a000888:	2027      	movs	r0, #39	; 0x27
1a00088a:	f7ff ff87 	bl	1a00079c <Ampu9250WriteRegister>
1a00088e:	2800      	cmp	r0, #0
1a000890:	db15      	blt.n	1a0008be <Ampu9250WriteAK8963Register+0x62>
	if (Ampu9250ReadAK8963Registers(subAddress,1) < 0) {
1a000892:	2101      	movs	r1, #1
1a000894:	4620      	mov	r0, r4
1a000896:	f7ff ffa5 	bl	1a0007e4 <Ampu9250ReadAK8963Registers>
1a00089a:	2800      	cmp	r0, #0
1a00089c:	db12      	blt.n	1a0008c4 <Ampu9250WriteAK8963Register+0x68>
	if(Acontrol._buffer[0] == data) {
1a00089e:	4b0c      	ldr	r3, [pc, #48]	; (1a0008d0 <Ampu9250WriteAK8963Register+0x74>)
1a0008a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a0008a4:	42ab      	cmp	r3, r5
1a0008a6:	d110      	bne.n	1a0008ca <Ampu9250WriteAK8963Register+0x6e>
		return 1;
1a0008a8:	2001      	movs	r0, #1
}
1a0008aa:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0008ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0008b0:	e7fb      	b.n	1a0008aa <Ampu9250WriteAK8963Register+0x4e>
		return -2;
1a0008b2:	f06f 0001 	mvn.w	r0, #1
1a0008b6:	e7f8      	b.n	1a0008aa <Ampu9250WriteAK8963Register+0x4e>
		return -3;
1a0008b8:	f06f 0002 	mvn.w	r0, #2
1a0008bc:	e7f5      	b.n	1a0008aa <Ampu9250WriteAK8963Register+0x4e>
		return -4;
1a0008be:	f06f 0003 	mvn.w	r0, #3
1a0008c2:	e7f2      	b.n	1a0008aa <Ampu9250WriteAK8963Register+0x4e>
		return -5;
1a0008c4:	f06f 0004 	mvn.w	r0, #4
1a0008c8:	e7ef      	b.n	1a0008aa <Ampu9250WriteAK8963Register+0x4e>
		return -6;
1a0008ca:	f06f 0005 	mvn.w	r0, #5
1a0008ce:	e7ec      	b.n	1a0008aa <Ampu9250WriteAK8963Register+0x4e>
1a0008d0:	100000d8 	.word	0x100000d8

1a0008d4 <Ampu9250SetGyroRange>:
	}
	return 1;
}

static int8_t Ampu9250SetGyroRange( MPU9250_GyroRange_t range )
{
1a0008d4:	b510      	push	{r4, lr}
1a0008d6:	4604      	mov	r4, r0
	switch(range) {
1a0008d8:	2803      	cmp	r0, #3
1a0008da:	d80c      	bhi.n	1a0008f6 <Ampu9250SetGyroRange+0x22>
1a0008dc:	e8df f000 	tbb	[pc, r0]
1a0008e0:	241a1002 	.word	0x241a1002
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(Ampu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
1a0008e4:	2100      	movs	r1, #0
1a0008e6:	201b      	movs	r0, #27
1a0008e8:	f7ff ff58 	bl	1a00079c <Ampu9250WriteRegister>
1a0008ec:	2800      	cmp	r0, #0
1a0008ee:	db25      	blt.n	1a00093c <Ampu9250SetGyroRange+0x68>
			return -1;
		  }
        // setting the gyro scale to 250DPS
		  Acontrol._gyroScale = 250.0f/32767.5f * MPU9250_D2R;
1a0008f0:	4b18      	ldr	r3, [pc, #96]	; (1a000954 <Ampu9250SetGyroRange+0x80>)
1a0008f2:	4a19      	ldr	r2, [pc, #100]	; (1a000958 <Ampu9250SetGyroRange+0x84>)
1a0008f4:	609a      	str	r2, [r3, #8]
        // setting the gyro scale to 2000DPS
		  Acontrol._gyroScale = 2000.0f/32767.5f * MPU9250_D2R;
		  break;
		}
	}
	Acontrol._gyroRange = range;
1a0008f6:	4b17      	ldr	r3, [pc, #92]	; (1a000954 <Ampu9250SetGyroRange+0x80>)
1a0008f8:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	return 1;
1a0008fc:	2001      	movs	r0, #1
}
1a0008fe:	bd10      	pop	{r4, pc}
		  if(Ampu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
1a000900:	2108      	movs	r1, #8
1a000902:	201b      	movs	r0, #27
1a000904:	f7ff ff4a 	bl	1a00079c <Ampu9250WriteRegister>
1a000908:	2800      	cmp	r0, #0
1a00090a:	db1a      	blt.n	1a000942 <Ampu9250SetGyroRange+0x6e>
		  Acontrol._gyroScale = 500.0f/32767.5f * MPU9250_D2R;
1a00090c:	4b11      	ldr	r3, [pc, #68]	; (1a000954 <Ampu9250SetGyroRange+0x80>)
1a00090e:	4a13      	ldr	r2, [pc, #76]	; (1a00095c <Ampu9250SetGyroRange+0x88>)
1a000910:	609a      	str	r2, [r3, #8]
		  break;
1a000912:	e7f0      	b.n	1a0008f6 <Ampu9250SetGyroRange+0x22>
		  if(Ampu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
1a000914:	2110      	movs	r1, #16
1a000916:	201b      	movs	r0, #27
1a000918:	f7ff ff40 	bl	1a00079c <Ampu9250WriteRegister>
1a00091c:	2800      	cmp	r0, #0
1a00091e:	db13      	blt.n	1a000948 <Ampu9250SetGyroRange+0x74>
		  Acontrol._gyroScale = 1000.0f/32767.5f * MPU9250_D2R;
1a000920:	4b0c      	ldr	r3, [pc, #48]	; (1a000954 <Ampu9250SetGyroRange+0x80>)
1a000922:	4a0f      	ldr	r2, [pc, #60]	; (1a000960 <Ampu9250SetGyroRange+0x8c>)
1a000924:	609a      	str	r2, [r3, #8]
		  break;
1a000926:	e7e6      	b.n	1a0008f6 <Ampu9250SetGyroRange+0x22>
		  if(Ampu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
1a000928:	2118      	movs	r1, #24
1a00092a:	201b      	movs	r0, #27
1a00092c:	f7ff ff36 	bl	1a00079c <Ampu9250WriteRegister>
1a000930:	2800      	cmp	r0, #0
1a000932:	db0c      	blt.n	1a00094e <Ampu9250SetGyroRange+0x7a>
		  Acontrol._gyroScale = 2000.0f/32767.5f * MPU9250_D2R;
1a000934:	4b07      	ldr	r3, [pc, #28]	; (1a000954 <Ampu9250SetGyroRange+0x80>)
1a000936:	4a0b      	ldr	r2, [pc, #44]	; (1a000964 <Ampu9250SetGyroRange+0x90>)
1a000938:	609a      	str	r2, [r3, #8]
		  break;
1a00093a:	e7dc      	b.n	1a0008f6 <Ampu9250SetGyroRange+0x22>
			return -1;
1a00093c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000940:	e7dd      	b.n	1a0008fe <Ampu9250SetGyroRange+0x2a>
			return -1;
1a000942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000946:	e7da      	b.n	1a0008fe <Ampu9250SetGyroRange+0x2a>
			return -1;
1a000948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00094c:	e7d7      	b.n	1a0008fe <Ampu9250SetGyroRange+0x2a>
			return -1;
1a00094e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000952:	e7d4      	b.n	1a0008fe <Ampu9250SetGyroRange+0x2a>
1a000954:	100000d8 	.word	0x100000d8
1a000958:	390ba0e4 	.word	0x390ba0e4
1a00095c:	398ba0e4 	.word	0x398ba0e4
1a000960:	3a0ba0e4 	.word	0x3a0ba0e4
1a000964:	3a8ba0e4 	.word	0x3a8ba0e4

1a000968 <Ampu9250SetDlpfBandwidth>:

static int8_t Ampu9250SetDlpfBandwidth( MPU9250_DlpfBandwidth_t bandwidth )
{
1a000968:	b510      	push	{r4, lr}
1a00096a:	4604      	mov	r4, r0
	switch (bandwidth) {
1a00096c:	2805      	cmp	r0, #5
1a00096e:	d810      	bhi.n	1a000992 <Ampu9250SetDlpfBandwidth+0x2a>
1a000970:	e8df f000 	tbb	[pc, r0]
1a000974:	32231403 	.word	0x32231403
1a000978:	5041      	.short	0x5041
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a00097a:	2101      	movs	r1, #1
1a00097c:	201d      	movs	r0, #29
1a00097e:	f7ff ff0d 	bl	1a00079c <Ampu9250WriteRegister>
1a000982:	2800      	cmp	r0, #0
1a000984:	db55      	blt.n	1a000a32 <Ampu9250SetDlpfBandwidth+0xca>
				return -1;
			}
         // setting gyro bandwidth to 184Hz
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) {
1a000986:	2101      	movs	r1, #1
1a000988:	201a      	movs	r0, #26
1a00098a:	f7ff ff07 	bl	1a00079c <Ampu9250WriteRegister>
1a00098e:	2800      	cmp	r0, #0
1a000990:	db52      	blt.n	1a000a38 <Ampu9250SetDlpfBandwidth+0xd0>
				return -2;
			}
			break;
		}
	}
	Acontrol._bandwidth = bandwidth;
1a000992:	4b32      	ldr	r3, [pc, #200]	; (1a000a5c <Ampu9250SetDlpfBandwidth+0xf4>)
1a000994:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	return 1;
1a000998:	2001      	movs	r0, #1
}
1a00099a:	bd10      	pop	{r4, pc}
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) {
1a00099c:	2102      	movs	r1, #2
1a00099e:	201d      	movs	r0, #29
1a0009a0:	f7ff fefc 	bl	1a00079c <Ampu9250WriteRegister>
1a0009a4:	2800      	cmp	r0, #0
1a0009a6:	db4a      	blt.n	1a000a3e <Ampu9250SetDlpfBandwidth+0xd6>
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) {
1a0009a8:	2102      	movs	r1, #2
1a0009aa:	201a      	movs	r0, #26
1a0009ac:	f7ff fef6 	bl	1a00079c <Ampu9250WriteRegister>
1a0009b0:	2800      	cmp	r0, #0
1a0009b2:	daee      	bge.n	1a000992 <Ampu9250SetDlpfBandwidth+0x2a>
				return -2;
1a0009b4:	f06f 0001 	mvn.w	r0, #1
1a0009b8:	e7ef      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) {
1a0009ba:	2103      	movs	r1, #3
1a0009bc:	201d      	movs	r0, #29
1a0009be:	f7ff feed 	bl	1a00079c <Ampu9250WriteRegister>
1a0009c2:	2800      	cmp	r0, #0
1a0009c4:	db3e      	blt.n	1a000a44 <Ampu9250SetDlpfBandwidth+0xdc>
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) {
1a0009c6:	2103      	movs	r1, #3
1a0009c8:	201a      	movs	r0, #26
1a0009ca:	f7ff fee7 	bl	1a00079c <Ampu9250WriteRegister>
1a0009ce:	2800      	cmp	r0, #0
1a0009d0:	dadf      	bge.n	1a000992 <Ampu9250SetDlpfBandwidth+0x2a>
				return -2;
1a0009d2:	f06f 0001 	mvn.w	r0, #1
1a0009d6:	e7e0      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) {
1a0009d8:	2104      	movs	r1, #4
1a0009da:	201d      	movs	r0, #29
1a0009dc:	f7ff fede 	bl	1a00079c <Ampu9250WriteRegister>
1a0009e0:	2800      	cmp	r0, #0
1a0009e2:	db32      	blt.n	1a000a4a <Ampu9250SetDlpfBandwidth+0xe2>
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) {
1a0009e4:	2104      	movs	r1, #4
1a0009e6:	201a      	movs	r0, #26
1a0009e8:	f7ff fed8 	bl	1a00079c <Ampu9250WriteRegister>
1a0009ec:	2800      	cmp	r0, #0
1a0009ee:	dad0      	bge.n	1a000992 <Ampu9250SetDlpfBandwidth+0x2a>
				return -2;
1a0009f0:	f06f 0001 	mvn.w	r0, #1
1a0009f4:	e7d1      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) {
1a0009f6:	2105      	movs	r1, #5
1a0009f8:	201d      	movs	r0, #29
1a0009fa:	f7ff fecf 	bl	1a00079c <Ampu9250WriteRegister>
1a0009fe:	2800      	cmp	r0, #0
1a000a00:	db26      	blt.n	1a000a50 <Ampu9250SetDlpfBandwidth+0xe8>
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) {
1a000a02:	2105      	movs	r1, #5
1a000a04:	201a      	movs	r0, #26
1a000a06:	f7ff fec9 	bl	1a00079c <Ampu9250WriteRegister>
1a000a0a:	2800      	cmp	r0, #0
1a000a0c:	dac1      	bge.n	1a000992 <Ampu9250SetDlpfBandwidth+0x2a>
				return -2;
1a000a0e:	f06f 0001 	mvn.w	r0, #1
1a000a12:	e7c2      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) {
1a000a14:	2106      	movs	r1, #6
1a000a16:	201d      	movs	r0, #29
1a000a18:	f7ff fec0 	bl	1a00079c <Ampu9250WriteRegister>
1a000a1c:	2800      	cmp	r0, #0
1a000a1e:	db1a      	blt.n	1a000a56 <Ampu9250SetDlpfBandwidth+0xee>
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) {
1a000a20:	2106      	movs	r1, #6
1a000a22:	201a      	movs	r0, #26
1a000a24:	f7ff feba 	bl	1a00079c <Ampu9250WriteRegister>
1a000a28:	2800      	cmp	r0, #0
1a000a2a:	dab2      	bge.n	1a000992 <Ampu9250SetDlpfBandwidth+0x2a>
				return -2;
1a000a2c:	f06f 0001 	mvn.w	r0, #1
1a000a30:	e7b3      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000a36:	e7b0      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
				return -2;
1a000a38:	f06f 0001 	mvn.w	r0, #1
1a000a3c:	e7ad      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000a42:	e7aa      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000a48:	e7a7      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000a4e:	e7a4      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000a54:	e7a1      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000a5a:	e79e      	b.n	1a00099a <Ampu9250SetDlpfBandwidth+0x32>
1a000a5c:	100000d8 	.word	0x100000d8

1a000a60 <Ampu9250SetSrd>:

static int8_t Ampu9250SetSrd( uint8_t srd )
{
1a000a60:	b510      	push	{r4, lr}
1a000a62:	4604      	mov	r4, r0
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (Ampu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
1a000a64:	2113      	movs	r1, #19
1a000a66:	2019      	movs	r0, #25
1a000a68:	f7ff fe98 	bl	1a00079c <Ampu9250WriteRegister>
1a000a6c:	2800      	cmp	r0, #0
1a000a6e:	db39      	blt.n	1a000ae4 <Ampu9250SetSrd+0x84>
		return -1;
	}
	if (srd > 9) {
1a000a70:	2c09      	cmp	r4, #9
1a000a72:	d920      	bls.n	1a000ab6 <Ampu9250SetSrd+0x56>
		// set AK8963 to Power Down
		if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a000a74:	2100      	movs	r1, #0
1a000a76:	200a      	movs	r0, #10
1a000a78:	f7ff fef0 	bl	1a00085c <Ampu9250WriteAK8963Register>
1a000a7c:	2800      	cmp	r0, #0
1a000a7e:	db34      	blt.n	1a000aea <Ampu9250SetSrd+0x8a>
			return -2;
		}
		vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a000a80:	2064      	movs	r0, #100	; 0x64
1a000a82:	f001 faf3 	bl	1a00206c <vTaskDelay>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
1a000a86:	2112      	movs	r1, #18
1a000a88:	200a      	movs	r0, #10
1a000a8a:	f7ff fee7 	bl	1a00085c <Ampu9250WriteAK8963Register>
1a000a8e:	2800      	cmp	r0, #0
1a000a90:	db2e      	blt.n	1a000af0 <Ampu9250SetSrd+0x90>
			return -3;
		}
		vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a000a92:	2064      	movs	r0, #100	; 0x64
1a000a94:	f001 faea 	bl	1a00206c <vTaskDelay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		Ampu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a000a98:	2107      	movs	r1, #7
1a000a9a:	2003      	movs	r0, #3
1a000a9c:	f7ff fea2 	bl	1a0007e4 <Ampu9250ReadAK8963Registers>
		vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		Ampu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	}
	/* setting the sample rate divider */
	if (Ampu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
1a000aa0:	4621      	mov	r1, r4
1a000aa2:	2019      	movs	r0, #25
1a000aa4:	f7ff fe7a 	bl	1a00079c <Ampu9250WriteRegister>
1a000aa8:	2800      	cmp	r0, #0
1a000aaa:	db2a      	blt.n	1a000b02 <Ampu9250SetSrd+0xa2>
		return -4;
	}
	Acontrol._srd = srd;
1a000aac:	4b16      	ldr	r3, [pc, #88]	; (1a000b08 <Ampu9250SetSrd+0xa8>)
1a000aae:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	return 1;
1a000ab2:	2001      	movs	r0, #1
}
1a000ab4:	bd10      	pop	{r4, pc}
		if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a000ab6:	2100      	movs	r1, #0
1a000ab8:	200a      	movs	r0, #10
1a000aba:	f7ff fecf 	bl	1a00085c <Ampu9250WriteAK8963Register>
1a000abe:	2800      	cmp	r0, #0
1a000ac0:	db19      	blt.n	1a000af6 <Ampu9250SetSrd+0x96>
		vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a000ac2:	2064      	movs	r0, #100	; 0x64
1a000ac4:	f001 fad2 	bl	1a00206c <vTaskDelay>
		if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a000ac8:	2116      	movs	r1, #22
1a000aca:	200a      	movs	r0, #10
1a000acc:	f7ff fec6 	bl	1a00085c <Ampu9250WriteAK8963Register>
1a000ad0:	2800      	cmp	r0, #0
1a000ad2:	db13      	blt.n	1a000afc <Ampu9250SetSrd+0x9c>
		vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a000ad4:	2064      	movs	r0, #100	; 0x64
1a000ad6:	f001 fac9 	bl	1a00206c <vTaskDelay>
		Ampu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a000ada:	2107      	movs	r1, #7
1a000adc:	2003      	movs	r0, #3
1a000ade:	f7ff fe81 	bl	1a0007e4 <Ampu9250ReadAK8963Registers>
1a000ae2:	e7dd      	b.n	1a000aa0 <Ampu9250SetSrd+0x40>
		return -1;
1a000ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ae8:	e7e4      	b.n	1a000ab4 <Ampu9250SetSrd+0x54>
			return -2;
1a000aea:	f06f 0001 	mvn.w	r0, #1
1a000aee:	e7e1      	b.n	1a000ab4 <Ampu9250SetSrd+0x54>
			return -3;
1a000af0:	f06f 0002 	mvn.w	r0, #2
1a000af4:	e7de      	b.n	1a000ab4 <Ampu9250SetSrd+0x54>
			return -2;
1a000af6:	f06f 0001 	mvn.w	r0, #1
1a000afa:	e7db      	b.n	1a000ab4 <Ampu9250SetSrd+0x54>
			return -3;
1a000afc:	f06f 0002 	mvn.w	r0, #2
1a000b00:	e7d8      	b.n	1a000ab4 <Ampu9250SetSrd+0x54>
		return -4;
1a000b02:	f06f 0003 	mvn.w	r0, #3
1a000b06:	e7d5      	b.n	1a000ab4 <Ampu9250SetSrd+0x54>
1a000b08:	100000d8 	.word	0x100000d8

1a000b0c <Ampu9250Read>:
	return 1;
}

//Read sensor registers and store data at control structure
bool_t Ampu9250Read(void)
{
1a000b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000b10:	b083      	sub	sp, #12
	// grab the data from the MPU9250
	if( !Ampu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
1a000b12:	2115      	movs	r1, #21
1a000b14:	203b      	movs	r0, #59	; 0x3b
1a000b16:	f7ff fe17 	bl	1a000748 <Ampu9250ReadRegisters>
1a000b1a:	2800      	cmp	r0, #0
1a000b1c:	f000 8136 	beq.w	1a000d8c <Ampu9250Read+0x280>
		return 0;
	}
	// combine into 16 bit values
	Acontrol._axcounts = (((int16_t)Acontrol._buffer[0]) << 8)  | Acontrol._buffer[1];
1a000b20:	4b9b      	ldr	r3, [pc, #620]	; (1a000d90 <Ampu9250Read+0x284>)
1a000b22:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
1a000b26:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
1a000b2a:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
1a000b2e:	fa0f fb81 	sxth.w	fp, r1
1a000b32:	f8a3 b12c 	strh.w	fp, [r3, #300]	; 0x12c
	Acontrol._aycounts = (((int16_t)Acontrol._buffer[2]) << 8)  | Acontrol._buffer[3];
1a000b36:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a000b3a:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
1a000b3e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
1a000b42:	b209      	sxth	r1, r1
1a000b44:	f8a3 112e 	strh.w	r1, [r3, #302]	; 0x12e
	Acontrol._azcounts = (((int16_t)Acontrol._buffer[4]) << 8)  | Acontrol._buffer[5];
1a000b48:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
1a000b4c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
1a000b50:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
1a000b54:	b212      	sxth	r2, r2
1a000b56:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	Acontrol._tcounts  = (((int16_t)Acontrol._buffer[6]) << 8)  | Acontrol._buffer[7];
1a000b5a:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
1a000b5e:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
1a000b62:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a000b66:	b200      	sxth	r0, r0
1a000b68:	ee05 0a90 	vmov	s11, r0
1a000b6c:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
	Acontrol._gxcounts = (((int16_t)Acontrol._buffer[8]) << 8)  | Acontrol._buffer[9];
1a000b70:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
1a000b74:	f893 602d 	ldrb.w	r6, [r3, #45]	; 0x2d
1a000b78:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
1a000b7c:	b236      	sxth	r6, r6
1a000b7e:	f8a3 6132 	strh.w	r6, [r3, #306]	; 0x132
	Acontrol._gycounts = (((int16_t)Acontrol._buffer[10]) << 8) | Acontrol._buffer[11];
1a000b82:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
1a000b86:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
1a000b8a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a000b8e:	b200      	sxth	r0, r0
1a000b90:	f8a3 0134 	strh.w	r0, [r3, #308]	; 0x134
	Acontrol._gzcounts = (((int16_t)Acontrol._buffer[12]) << 8) | Acontrol._buffer[13];
1a000b94:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
1a000b98:	f893 5031 	ldrb.w	r5, [r3, #49]	; 0x31
1a000b9c:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
1a000ba0:	b22d      	sxth	r5, r5
1a000ba2:	f8a3 5136 	strh.w	r5, [r3, #310]	; 0x136
	Acontrol._hxcounts = (((int16_t)Acontrol._buffer[15]) << 8) | Acontrol._buffer[14];
1a000ba6:	f893 7033 	ldrb.w	r7, [r3, #51]	; 0x33
1a000baa:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
1a000bae:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a000bb2:	b224      	sxth	r4, r4
1a000bb4:	ee06 4a90 	vmov	s13, r4
1a000bb8:	f8a3 4138 	strh.w	r4, [r3, #312]	; 0x138
	Acontrol._hycounts = (((int16_t)Acontrol._buffer[17]) << 8) | Acontrol._buffer[16];
1a000bbc:	f893 7035 	ldrb.w	r7, [r3, #53]	; 0x35
1a000bc0:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
1a000bc4:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a000bc8:	b224      	sxth	r4, r4
1a000bca:	ee07 4a10 	vmov	s14, r4
1a000bce:	f8a3 413a 	strh.w	r4, [r3, #314]	; 0x13a
	Acontrol._hzcounts = (((int16_t)Acontrol._buffer[19]) << 8) | Acontrol._buffer[18];
1a000bd2:	f893 7037 	ldrb.w	r7, [r3, #55]	; 0x37
1a000bd6:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
1a000bda:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a000bde:	b224      	sxth	r4, r4
1a000be0:	ee07 4a90 	vmov	s15, r4
1a000be4:	f8a3 413c 	strh.w	r4, [r3, #316]	; 0x13c
	// transform and convert to float values
	Acontrol._ax = (((float)(Acontrol.tX[0]*Acontrol._axcounts + Acontrol.tX[1]*Acontrol._aycounts + Acontrol.tX[2]*Acontrol._azcounts) * Acontrol._accelScale) - Acontrol._axb)*Acontrol._axs;
1a000be8:	f9b3 a140 	ldrsh.w	sl, [r3, #320]	; 0x140
1a000bec:	f9b3 7142 	ldrsh.w	r7, [r3, #322]	; 0x142
1a000bf0:	fb01 f407 	mul.w	r4, r1, r7
1a000bf4:	fb0b 4c0a 	mla	ip, fp, sl, r4
1a000bf8:	f9b3 4144 	ldrsh.w	r4, [r3, #324]	; 0x144
1a000bfc:	9401      	str	r4, [sp, #4]
1a000bfe:	fb02 cc04 	mla	ip, r2, r4, ip
1a000c02:	ee06 ca10 	vmov	s12, ip
1a000c06:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a000c0a:	ed93 5a01 	vldr	s10, [r3, #4]
1a000c0e:	ee26 6a05 	vmul.f32	s12, s12, s10
1a000c12:	edd3 4a30 	vldr	s9, [r3, #192]	; 0xc0
1a000c16:	ee36 6a64 	vsub.f32	s12, s12, s9
1a000c1a:	edd3 4a33 	vldr	s9, [r3, #204]	; 0xcc
1a000c1e:	ee26 6a24 	vmul.f32	s12, s12, s9
1a000c22:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
	Acontrol._ay = (((float)(Acontrol.tY[0]*Acontrol._axcounts + Acontrol.tY[1]*Acontrol._aycounts + Acontrol.tY[2]*Acontrol._azcounts) * Acontrol._accelScale) - Acontrol._ayb)*Acontrol._ays;
1a000c26:	f9b3 e146 	ldrsh.w	lr, [r3, #326]	; 0x146
1a000c2a:	f9b3 8148 	ldrsh.w	r8, [r3, #328]	; 0x148
1a000c2e:	fb08 fc01 	mul.w	ip, r8, r1
1a000c32:	fb0e cc0b 	mla	ip, lr, fp, ip
1a000c36:	f9b3 414a 	ldrsh.w	r4, [r3, #330]	; 0x14a
1a000c3a:	fb04 cc02 	mla	ip, r4, r2, ip
1a000c3e:	ee06 ca10 	vmov	s12, ip
1a000c42:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a000c46:	ee25 6a06 	vmul.f32	s12, s10, s12
1a000c4a:	edd3 4a31 	vldr	s9, [r3, #196]	; 0xc4
1a000c4e:	ee36 6a64 	vsub.f32	s12, s12, s9
1a000c52:	edd3 4a34 	vldr	s9, [r3, #208]	; 0xd0
1a000c56:	ee26 6a24 	vmul.f32	s12, s12, s9
1a000c5a:	ed83 6a10 	vstr	s12, [r3, #64]	; 0x40
	Acontrol._az = (((float)(Acontrol.tZ[0]*Acontrol._axcounts + Acontrol.tZ[1]*Acontrol._aycounts + Acontrol.tZ[2]*Acontrol._azcounts) * Acontrol._accelScale) - Acontrol._azb)*Acontrol._azs;
1a000c5e:	f9b3 c14c 	ldrsh.w	ip, [r3, #332]	; 0x14c
1a000c62:	f9b3 914e 	ldrsh.w	r9, [r3, #334]	; 0x14e
1a000c66:	fb09 f101 	mul.w	r1, r9, r1
1a000c6a:	fb0c 110b 	mla	r1, ip, fp, r1
1a000c6e:	f9b3 b150 	ldrsh.w	fp, [r3, #336]	; 0x150
1a000c72:	fb0b 1102 	mla	r1, fp, r2, r1
1a000c76:	ee06 1a10 	vmov	s12, r1
1a000c7a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a000c7e:	ee25 5a06 	vmul.f32	s10, s10, s12
1a000c82:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
1a000c86:	ee35 5a46 	vsub.f32	s10, s10, s12
1a000c8a:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
1a000c8e:	ee25 5a06 	vmul.f32	s10, s10, s12
1a000c92:	ed83 5a11 	vstr	s10, [r3, #68]	; 0x44
	Acontrol._gx = ((float) (Acontrol.tX[0]*Acontrol._gxcounts + Acontrol.tX[1]*Acontrol._gycounts + Acontrol.tX[2]*Acontrol._gzcounts) * Acontrol._gyroScale) -  Acontrol._gxb;
1a000c96:	fb00 f707 	mul.w	r7, r0, r7
1a000c9a:	fb06 770a 	mla	r7, r6, sl, r7
1a000c9e:	9a01      	ldr	r2, [sp, #4]
1a000ca0:	fb05 7202 	mla	r2, r5, r2, r7
1a000ca4:	ee06 2a10 	vmov	s12, r2
1a000ca8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a000cac:	ed93 5a02 	vldr	s10, [r3, #8]
1a000cb0:	ee26 6a05 	vmul.f32	s12, s12, s10
1a000cb4:	edd3 4a20 	vldr	s9, [r3, #128]	; 0x80
1a000cb8:	ee36 6a64 	vsub.f32	s12, s12, s9
1a000cbc:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	Acontrol._gy = ((float) (Acontrol.tY[0]*Acontrol._gxcounts + Acontrol.tY[1]*Acontrol._gycounts + Acontrol.tY[2]*Acontrol._gzcounts) * Acontrol._gyroScale) -  Acontrol._gyb;
1a000cc0:	fb00 f808 	mul.w	r8, r0, r8
1a000cc4:	fb06 8e0e 	mla	lr, r6, lr, r8
1a000cc8:	fb05 e204 	mla	r2, r5, r4, lr
1a000ccc:	ee06 2a10 	vmov	s12, r2
1a000cd0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a000cd4:	ee25 6a06 	vmul.f32	s12, s10, s12
1a000cd8:	edd3 4a21 	vldr	s9, [r3, #132]	; 0x84
1a000cdc:	ee36 6a64 	vsub.f32	s12, s12, s9
1a000ce0:	ed83 6a13 	vstr	s12, [r3, #76]	; 0x4c
	Acontrol._gz = ((float) (Acontrol.tZ[0]*Acontrol._gxcounts + Acontrol.tZ[1]*Acontrol._gycounts + Acontrol.tZ[2]*Acontrol._gzcounts) * Acontrol._gyroScale) -  Acontrol._gzb;
1a000ce4:	fb00 f009 	mul.w	r0, r0, r9
1a000ce8:	fb06 000c 	mla	r0, r6, ip, r0
1a000cec:	fb05 050b 	mla	r5, r5, fp, r0
1a000cf0:	ee06 5a10 	vmov	s12, r5
1a000cf4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a000cf8:	ee25 5a06 	vmul.f32	s10, s10, s12
1a000cfc:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
1a000d00:	ee35 5a46 	vsub.f32	s10, s10, s12
1a000d04:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
	Acontrol._hx = (((float)(Acontrol._hxcounts) * Acontrol._magScaleX) - Acontrol._hxb)*Acontrol._hxs;
1a000d08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a000d0c:	ed93 6a03 	vldr	s12, [r3, #12]
1a000d10:	ee66 6a86 	vmul.f32	s13, s13, s12
1a000d14:	ed93 6a44 	vldr	s12, [r3, #272]	; 0x110
1a000d18:	ee76 6ac6 	vsub.f32	s13, s13, s12
1a000d1c:	ed93 6a47 	vldr	s12, [r3, #284]	; 0x11c
1a000d20:	ee66 6a86 	vmul.f32	s13, s13, s12
1a000d24:	edc3 6a15 	vstr	s13, [r3, #84]	; 0x54
	Acontrol._hy = (((float)(Acontrol._hycounts) * Acontrol._magScaleY) - Acontrol._hyb)*Acontrol._hys;
1a000d28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a000d2c:	edd3 6a04 	vldr	s13, [r3, #16]
1a000d30:	ee27 7a26 	vmul.f32	s14, s14, s13
1a000d34:	edd3 6a45 	vldr	s13, [r3, #276]	; 0x114
1a000d38:	ee37 7a66 	vsub.f32	s14, s14, s13
1a000d3c:	edd3 6a48 	vldr	s13, [r3, #288]	; 0x120
1a000d40:	ee27 7a26 	vmul.f32	s14, s14, s13
1a000d44:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
	Acontrol._hz = (((float)(Acontrol._hzcounts) * Acontrol._magScaleZ) - Acontrol._hzb)*Acontrol._hzs;
1a000d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000d4c:	ed93 7a05 	vldr	s14, [r3, #20]
1a000d50:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000d54:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
1a000d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a000d5c:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
1a000d60:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000d64:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	Acontrol._t = ((((float) Acontrol._tcounts)  - Acontrol._tempOffset)/ Acontrol._tempScale) + Acontrol._tempOffset;
1a000d68:	eef8 5ae5 	vcvt.f32.s32	s11, s11
1a000d6c:	edd3 7a07 	vldr	s15, [r3, #28]
1a000d70:	ee75 5ae7 	vsub.f32	s11, s11, s15
1a000d74:	edd3 6a06 	vldr	s13, [r3, #24]
1a000d78:	ee85 7aa6 	vdiv.f32	s14, s11, s13
1a000d7c:	ee77 7a87 	vadd.f32	s15, s15, s14
1a000d80:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	return 1;
1a000d84:	2001      	movs	r0, #1
}
1a000d86:	b003      	add	sp, #12
1a000d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
1a000d8c:	2000      	movs	r0, #0
1a000d8e:	e7fa      	b.n	1a000d86 <Ampu9250Read+0x27a>
1a000d90:	100000d8 	.word	0x100000d8

1a000d94 <Ampu9250GetAccelX_mss>:

// Returns the accelerometer measurement in the x direction, m/s/s
float Ampu9250GetAccelX_mss( void )
{
	return Acontrol._ax;
}
1a000d94:	4b01      	ldr	r3, [pc, #4]	; (1a000d9c <Ampu9250GetAccelX_mss+0x8>)
1a000d96:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
1a000d9a:	4770      	bx	lr
1a000d9c:	100000d8 	.word	0x100000d8

1a000da0 <Ampu9250GetAccelY_mss>:

// Returns the accelerometer measurement in the y direction, m/s/s
float Ampu9250GetAccelY_mss( void )
{
	return Acontrol._ay;
}
1a000da0:	4b01      	ldr	r3, [pc, #4]	; (1a000da8 <Ampu9250GetAccelY_mss+0x8>)
1a000da2:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
1a000da6:	4770      	bx	lr
1a000da8:	100000d8 	.word	0x100000d8

1a000dac <Ampu9250GetAccelZ_mss>:

// Returns the accelerometer measurement in the z direction, m/s/s
float Ampu9250GetAccelZ_mss( void )
{
	return Acontrol._az;
}
1a000dac:	4b01      	ldr	r3, [pc, #4]	; (1a000db4 <Ampu9250GetAccelZ_mss+0x8>)
1a000dae:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
1a000db2:	4770      	bx	lr
1a000db4:	100000d8 	.word	0x100000d8

1a000db8 <Ampu9250GetGyroX_rads>:

// Returns the gyroscope measurement in the x direction, rad/s
float Ampu9250GetGyroX_rads( void )
{
	return Acontrol._gx;
}
1a000db8:	4b01      	ldr	r3, [pc, #4]	; (1a000dc0 <Ampu9250GetGyroX_rads+0x8>)
1a000dba:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
1a000dbe:	4770      	bx	lr
1a000dc0:	100000d8 	.word	0x100000d8

1a000dc4 <Ampu9250GetGyroY_rads>:

// Returns the gyroscope measurement in the y direction, rad/s
float Ampu9250GetGyroY_rads( void )
{
	return Acontrol._gy;
}
1a000dc4:	4b01      	ldr	r3, [pc, #4]	; (1a000dcc <Ampu9250GetGyroY_rads+0x8>)
1a000dc6:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
1a000dca:	4770      	bx	lr
1a000dcc:	100000d8 	.word	0x100000d8

1a000dd0 <Ampu9250GetGyroZ_rads>:

// Returns the gyroscope measurement in the z direction, rad/s
float Ampu9250GetGyroZ_rads( void )
{
	return Acontrol._gz;
}
1a000dd0:	4b01      	ldr	r3, [pc, #4]	; (1a000dd8 <Ampu9250GetGyroZ_rads+0x8>)
1a000dd2:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
1a000dd6:	4770      	bx	lr
1a000dd8:	100000d8 	.word	0x100000d8

1a000ddc <Ampu9250CalibrateGyro>:
{
1a000ddc:	b538      	push	{r3, r4, r5, lr}
1a000dde:	ed2d 8b02 	vpush	{d8}
	if (Ampu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
1a000de2:	2000      	movs	r0, #0
1a000de4:	f7ff fd76 	bl	1a0008d4 <Ampu9250SetGyroRange>
1a000de8:	2800      	cmp	r0, #0
1a000dea:	f2c0 8092 	blt.w	1a000f12 <Ampu9250CalibrateGyro+0x136>
	if (Ampu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
1a000dee:	2003      	movs	r0, #3
1a000df0:	f7ff fdba 	bl	1a000968 <Ampu9250SetDlpfBandwidth>
1a000df4:	2800      	cmp	r0, #0
1a000df6:	f2c0 808f 	blt.w	1a000f18 <Ampu9250CalibrateGyro+0x13c>
	if (Ampu9250SetSrd(19) < 0) {
1a000dfa:	2013      	movs	r0, #19
1a000dfc:	f7ff fe30 	bl	1a000a60 <Ampu9250SetSrd>
1a000e00:	2800      	cmp	r0, #0
1a000e02:	f2c0 808c 	blt.w	1a000f1e <Ampu9250CalibrateGyro+0x142>
	Acontrol._gxbD = 0;
1a000e06:	4b4a      	ldr	r3, [pc, #296]	; (1a000f30 <Ampu9250CalibrateGyro+0x154>)
1a000e08:	2000      	movs	r0, #0
1a000e0a:	2100      	movs	r1, #0
1a000e0c:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	Acontrol._gybD = 0;
1a000e10:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
	Acontrol._gzbD = 0;
1a000e14:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
	for (uint8_t i=0; i < Acontrol._numSamples; i++) {
1a000e18:	2500      	movs	r5, #0
1a000e1a:	e049      	b.n	1a000eb0 <Ampu9250CalibrateGyro+0xd4>
		Ampu9250Read();
1a000e1c:	f7ff fe76 	bl	1a000b0c <Ampu9250Read>
		Acontrol._gxbD += ((Ampu9250GetGyroX_rads() + Acontrol._gxb)/Acontrol._numSamples);
1a000e20:	f7ff ffca 	bl	1a000db8 <Ampu9250GetGyroX_rads>
1a000e24:	4c42      	ldr	r4, [pc, #264]	; (1a000f30 <Ampu9250CalibrateGyro+0x154>)
1a000e26:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
1a000e2a:	ee30 0a27 	vadd.f32	s0, s0, s15
1a000e2e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
1a000e32:	ee08 3a10 	vmov	s16, r3
1a000e36:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
1a000e3a:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a000e3e:	ee17 0a90 	vmov	r0, s15
1a000e42:	f003 fcef 	bl	1a004824 <__aeabi_f2d>
1a000e46:	4602      	mov	r2, r0
1a000e48:	460b      	mov	r3, r1
1a000e4a:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a000e4e:	f003 fb8b 	bl	1a004568 <__adddf3>
1a000e52:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
		Acontrol._gybD += ((Ampu9250GetGyroY_rads() + Acontrol._gyb)/Acontrol._numSamples);
1a000e56:	f7ff ffb5 	bl	1a000dc4 <Ampu9250GetGyroY_rads>
1a000e5a:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
1a000e5e:	ee30 0a27 	vadd.f32	s0, s0, s15
1a000e62:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a000e66:	ee17 0a90 	vmov	r0, s15
1a000e6a:	f003 fcdb 	bl	1a004824 <__aeabi_f2d>
1a000e6e:	4602      	mov	r2, r0
1a000e70:	460b      	mov	r3, r1
1a000e72:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a000e76:	f003 fb77 	bl	1a004568 <__adddf3>
1a000e7a:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
		Acontrol._gzbD += ((Ampu9250GetGyroZ_rads() + Acontrol._gzb)/Acontrol._numSamples);
1a000e7e:	f7ff ffa7 	bl	1a000dd0 <Ampu9250GetGyroZ_rads>
1a000e82:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
1a000e86:	ee30 0a27 	vadd.f32	s0, s0, s15
1a000e8a:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a000e8e:	ee17 0a90 	vmov	r0, s15
1a000e92:	f003 fcc7 	bl	1a004824 <__aeabi_f2d>
1a000e96:	4602      	mov	r2, r0
1a000e98:	460b      	mov	r3, r1
1a000e9a:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a000e9e:	f003 fb63 	bl	1a004568 <__adddf3>
1a000ea2:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
		vTaskDelay( 20 / portTICK_RATE_MS );//delay(20);
1a000ea6:	2014      	movs	r0, #20
1a000ea8:	f001 f8e0 	bl	1a00206c <vTaskDelay>
	for (uint8_t i=0; i < Acontrol._numSamples; i++) {
1a000eac:	3501      	adds	r5, #1
1a000eae:	b2ed      	uxtb	r5, r5
1a000eb0:	4b1f      	ldr	r3, [pc, #124]	; (1a000f30 <Ampu9250CalibrateGyro+0x154>)
1a000eb2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a000eb6:	42ab      	cmp	r3, r5
1a000eb8:	d8b0      	bhi.n	1a000e1c <Ampu9250CalibrateGyro+0x40>
	Acontrol._gxb = (float)Acontrol._gxbD;
1a000eba:	4c1d      	ldr	r4, [pc, #116]	; (1a000f30 <Ampu9250CalibrateGyro+0x154>)
1a000ebc:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a000ec0:	f003 fd08 	bl	1a0048d4 <__aeabi_d2f>
1a000ec4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	Acontrol._gyb = (float)Acontrol._gybD;
1a000ec8:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a000ecc:	f003 fd02 	bl	1a0048d4 <__aeabi_d2f>
1a000ed0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	Acontrol._gzb = (float)Acontrol._gzbD;
1a000ed4:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a000ed8:	f003 fcfc 	bl	1a0048d4 <__aeabi_d2f>
1a000edc:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	if (Ampu9250SetGyroRange(Acontrol._gyroRange) < 0) {
1a000ee0:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
1a000ee4:	f7ff fcf6 	bl	1a0008d4 <Ampu9250SetGyroRange>
1a000ee8:	2800      	cmp	r0, #0
1a000eea:	db1b      	blt.n	1a000f24 <Ampu9250CalibrateGyro+0x148>
	if (Ampu9250SetDlpfBandwidth(Acontrol._bandwidth) < 0) {
1a000eec:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
1a000ef0:	f7ff fd3a 	bl	1a000968 <Ampu9250SetDlpfBandwidth>
1a000ef4:	2800      	cmp	r0, #0
1a000ef6:	db18      	blt.n	1a000f2a <Ampu9250CalibrateGyro+0x14e>
	if (Ampu9250SetSrd(Acontrol._srd) < 0) {
1a000ef8:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
1a000efc:	f7ff fdb0 	bl	1a000a60 <Ampu9250SetSrd>
1a000f00:	2800      	cmp	r0, #0
1a000f02:	db03      	blt.n	1a000f0c <Ampu9250CalibrateGyro+0x130>
	return 1;
1a000f04:	2001      	movs	r0, #1
}
1a000f06:	ecbd 8b02 	vpop	{d8}
1a000f0a:	bd38      	pop	{r3, r4, r5, pc}
		return -6;
1a000f0c:	f06f 0005 	mvn.w	r0, #5
1a000f10:	e7f9      	b.n	1a000f06 <Ampu9250CalibrateGyro+0x12a>
		return -1;
1a000f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f16:	e7f6      	b.n	1a000f06 <Ampu9250CalibrateGyro+0x12a>
		return -2;
1a000f18:	f06f 0001 	mvn.w	r0, #1
1a000f1c:	e7f3      	b.n	1a000f06 <Ampu9250CalibrateGyro+0x12a>
		return -3;
1a000f1e:	f06f 0002 	mvn.w	r0, #2
1a000f22:	e7f0      	b.n	1a000f06 <Ampu9250CalibrateGyro+0x12a>
		return -4;
1a000f24:	f06f 0003 	mvn.w	r0, #3
1a000f28:	e7ed      	b.n	1a000f06 <Ampu9250CalibrateGyro+0x12a>
		return -5;
1a000f2a:	f06f 0004 	mvn.w	r0, #4
1a000f2e:	e7ea      	b.n	1a000f06 <Ampu9250CalibrateGyro+0x12a>
1a000f30:	100000d8 	.word	0x100000d8

1a000f34 <Ampu9250Init>:
{
1a000f34:	b510      	push	{r4, lr}
1a000f36:	4604      	mov	r4, r0
	Ampu9250InitializeControlStructure();
1a000f38:	f7ff fbc6 	bl	1a0006c8 <Ampu9250InitializeControlStructure>
	Acontrol.address = address;
1a000f3c:	4ba0      	ldr	r3, [pc, #640]	; (1a0011c0 <Ampu9250Init+0x28c>)
1a000f3e:	701c      	strb	r4, [r3, #0]
	i2cInit(I2C0, MPU9250_I2C_RATE);
1a000f40:	49a0      	ldr	r1, [pc, #640]	; (1a0011c4 <Ampu9250Init+0x290>)
1a000f42:	2000      	movs	r0, #0
1a000f44:	f002 f968 	bl	1a003218 <i2cInit>
	if (Ampu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a000f48:	2101      	movs	r1, #1
1a000f4a:	206b      	movs	r0, #107	; 0x6b
1a000f4c:	f7ff fc26 	bl	1a00079c <Ampu9250WriteRegister>
1a000f50:	2800      	cmp	r0, #0
1a000f52:	f2c0 80fb 	blt.w	1a00114c <Ampu9250Init+0x218>
	if (Ampu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a000f56:	2120      	movs	r1, #32
1a000f58:	206a      	movs	r0, #106	; 0x6a
1a000f5a:	f7ff fc1f 	bl	1a00079c <Ampu9250WriteRegister>
1a000f5e:	2800      	cmp	r0, #0
1a000f60:	f2c0 80f7 	blt.w	1a001152 <Ampu9250Init+0x21e>
	if (Ampu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a000f64:	210d      	movs	r1, #13
1a000f66:	2024      	movs	r0, #36	; 0x24
1a000f68:	f7ff fc18 	bl	1a00079c <Ampu9250WriteRegister>
1a000f6c:	2800      	cmp	r0, #0
1a000f6e:	f2c0 80f3 	blt.w	1a001158 <Ampu9250Init+0x224>
	Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN);
1a000f72:	2100      	movs	r1, #0
1a000f74:	200a      	movs	r0, #10
1a000f76:	f7ff fc71 	bl	1a00085c <Ampu9250WriteAK8963Register>
	Ampu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_PWR_RESET);
1a000f7a:	2180      	movs	r1, #128	; 0x80
1a000f7c:	206b      	movs	r0, #107	; 0x6b
1a000f7e:	f7ff fc0d 	bl	1a00079c <Ampu9250WriteRegister>
	vTaskDelay( 1 / portTICK_RATE_MS );//delay(1);
1a000f82:	2001      	movs	r0, #1
1a000f84:	f001 f872 	bl	1a00206c <vTaskDelay>
	Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
1a000f88:	2101      	movs	r1, #1
1a000f8a:	200b      	movs	r0, #11
1a000f8c:	f7ff fc66 	bl	1a00085c <Ampu9250WriteAK8963Register>
	if (Ampu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a000f90:	2101      	movs	r1, #1
1a000f92:	206b      	movs	r0, #107	; 0x6b
1a000f94:	f7ff fc02 	bl	1a00079c <Ampu9250WriteRegister>
1a000f98:	2800      	cmp	r0, #0
1a000f9a:	f2c0 80e0 	blt.w	1a00115e <Ampu9250Init+0x22a>
	if ((Ampu9250WhoAmI() != 113) && (Ampu9250WhoAmI() != 115)) {
1a000f9e:	f7ff fbed 	bl	1a00077c <Ampu9250WhoAmI>
1a000fa2:	2871      	cmp	r0, #113	; 0x71
1a000fa4:	d004      	beq.n	1a000fb0 <Ampu9250Init+0x7c>
1a000fa6:	f7ff fbe9 	bl	1a00077c <Ampu9250WhoAmI>
1a000faa:	2873      	cmp	r0, #115	; 0x73
1a000fac:	f040 80da 	bne.w	1a001164 <Ampu9250Init+0x230>
	if (Ampu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
1a000fb0:	2100      	movs	r1, #0
1a000fb2:	206c      	movs	r0, #108	; 0x6c
1a000fb4:	f7ff fbf2 	bl	1a00079c <Ampu9250WriteRegister>
1a000fb8:	2800      	cmp	r0, #0
1a000fba:	f2c0 80d6 	blt.w	1a00116a <Ampu9250Init+0x236>
	if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
1a000fbe:	2118      	movs	r1, #24
1a000fc0:	201c      	movs	r0, #28
1a000fc2:	f7ff fbeb 	bl	1a00079c <Ampu9250WriteRegister>
1a000fc6:	2800      	cmp	r0, #0
1a000fc8:	f2c0 80d2 	blt.w	1a001170 <Ampu9250Init+0x23c>
	Acontrol._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
1a000fcc:	4b7c      	ldr	r3, [pc, #496]	; (1a0011c0 <Ampu9250Init+0x28c>)
1a000fce:	4a7e      	ldr	r2, [pc, #504]	; (1a0011c8 <Ampu9250Init+0x294>)
1a000fd0:	605a      	str	r2, [r3, #4]
	Acontrol._accelRange = MPU9250_ACCEL_RANGE_16G;
1a000fd2:	2203      	movs	r2, #3
1a000fd4:	f883 2020 	strb.w	r2, [r3, #32]
	if (Ampu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
1a000fd8:	2118      	movs	r1, #24
1a000fda:	201b      	movs	r0, #27
1a000fdc:	f7ff fbde 	bl	1a00079c <Ampu9250WriteRegister>
1a000fe0:	2800      	cmp	r0, #0
1a000fe2:	f2c0 80c8 	blt.w	1a001176 <Ampu9250Init+0x242>
	Acontrol._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R;
1a000fe6:	4b76      	ldr	r3, [pc, #472]	; (1a0011c0 <Ampu9250Init+0x28c>)
1a000fe8:	4a78      	ldr	r2, [pc, #480]	; (1a0011cc <Ampu9250Init+0x298>)
1a000fea:	609a      	str	r2, [r3, #8]
	Acontrol._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
1a000fec:	2203      	movs	r2, #3
1a000fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a000ff2:	2101      	movs	r1, #1
1a000ff4:	201d      	movs	r0, #29
1a000ff6:	f7ff fbd1 	bl	1a00079c <Ampu9250WriteRegister>
1a000ffa:	2800      	cmp	r0, #0
1a000ffc:	f2c0 80be 	blt.w	1a00117c <Ampu9250Init+0x248>
	if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) {
1a001000:	2101      	movs	r1, #1
1a001002:	201a      	movs	r0, #26
1a001004:	f7ff fbca 	bl	1a00079c <Ampu9250WriteRegister>
1a001008:	2800      	cmp	r0, #0
1a00100a:	f2c0 80ba 	blt.w	1a001182 <Ampu9250Init+0x24e>
	Acontrol._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
1a00100e:	2100      	movs	r1, #0
1a001010:	4b6b      	ldr	r3, [pc, #428]	; (1a0011c0 <Ampu9250Init+0x28c>)
1a001012:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	if (Ampu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
1a001016:	2019      	movs	r0, #25
1a001018:	f7ff fbc0 	bl	1a00079c <Ampu9250WriteRegister>
1a00101c:	2800      	cmp	r0, #0
1a00101e:	f2c0 80b3 	blt.w	1a001188 <Ampu9250Init+0x254>
	Acontrol._srd = 0;
1a001022:	4b67      	ldr	r3, [pc, #412]	; (1a0011c0 <Ampu9250Init+0x28c>)
1a001024:	2200      	movs	r2, #0
1a001026:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	if (Ampu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a00102a:	2120      	movs	r1, #32
1a00102c:	206a      	movs	r0, #106	; 0x6a
1a00102e:	f7ff fbb5 	bl	1a00079c <Ampu9250WriteRegister>
1a001032:	2800      	cmp	r0, #0
1a001034:	f2c0 80ab 	blt.w	1a00118e <Ampu9250Init+0x25a>
	if (Ampu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a001038:	210d      	movs	r1, #13
1a00103a:	2024      	movs	r0, #36	; 0x24
1a00103c:	f7ff fbae 	bl	1a00079c <Ampu9250WriteRegister>
1a001040:	2800      	cmp	r0, #0
1a001042:	f2c0 80a7 	blt.w	1a001194 <Ampu9250Init+0x260>
	if (Ampu9250WhoAmIAK8963() != 72) {
1a001046:	f7ff fbf9 	bl	1a00083c <Ampu9250WhoAmIAK8963>
1a00104a:	2848      	cmp	r0, #72	; 0x48
1a00104c:	f040 80a5 	bne.w	1a00119a <Ampu9250Init+0x266>
	if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a001050:	2100      	movs	r1, #0
1a001052:	200a      	movs	r0, #10
1a001054:	f7ff fc02 	bl	1a00085c <Ampu9250WriteAK8963Register>
1a001058:	2800      	cmp	r0, #0
1a00105a:	f2c0 80a1 	blt.w	1a0011a0 <Ampu9250Init+0x26c>
	vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a00105e:	2064      	movs	r0, #100	; 0x64
1a001060:	f001 f804 	bl	1a00206c <vTaskDelay>
	if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
1a001064:	210f      	movs	r1, #15
1a001066:	200a      	movs	r0, #10
1a001068:	f7ff fbf8 	bl	1a00085c <Ampu9250WriteAK8963Register>
1a00106c:	2800      	cmp	r0, #0
1a00106e:	f2c0 809a 	blt.w	1a0011a6 <Ampu9250Init+0x272>
	vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a001072:	2064      	movs	r0, #100	; 0x64
1a001074:	f000 fffa 	bl	1a00206c <vTaskDelay>
	Ampu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
1a001078:	2103      	movs	r1, #3
1a00107a:	2010      	movs	r0, #16
1a00107c:	f7ff fbb2 	bl	1a0007e4 <Ampu9250ReadAK8963Registers>
	Acontrol._magScaleX = ((((float) Acontrol._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a001080:	4b4f      	ldr	r3, [pc, #316]	; (1a0011c0 <Ampu9250Init+0x28c>)
1a001082:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
1a001086:	ee07 2a10 	vmov	s14, r2
1a00108a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a00108e:	eddf 4a50 	vldr	s9, [pc, #320]	; 1a0011d0 <Ampu9250Init+0x29c>
1a001092:	ee37 7a64 	vsub.f32	s14, s14, s9
1a001096:	ed9f 5a4f 	vldr	s10, [pc, #316]	; 1a0011d4 <Ampu9250Init+0x2a0>
1a00109a:	ee27 7a05 	vmul.f32	s14, s14, s10
1a00109e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
1a0010a2:	ee37 7a25 	vadd.f32	s14, s14, s11
1a0010a6:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 1a0011d8 <Ampu9250Init+0x2a4>
1a0010aa:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a0010ae:	eddf 6a4b 	vldr	s13, [pc, #300]	; 1a0011dc <Ampu9250Init+0x2a8>
1a0010b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	Acontrol._magScaleX = ((((float) Acontrol._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0010b6:	edc3 7a03 	vstr	s15, [r3, #12]
	Acontrol._magScaleY = ((((float) Acontrol._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0010ba:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a0010be:	ee07 2a10 	vmov	s14, r2
1a0010c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a0010c6:	ee37 7a64 	vsub.f32	s14, s14, s9
1a0010ca:	ee27 7a05 	vmul.f32	s14, s14, s10
1a0010ce:	ee37 7a25 	vadd.f32	s14, s14, s11
1a0010d2:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a0010d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
	Acontrol._magScaleY = ((((float) Acontrol._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0010da:	edc3 7a04 	vstr	s15, [r3, #16]
	Acontrol._magScaleZ = ((((float) Acontrol._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0010de:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a0010e2:	ee07 2a90 	vmov	s15, r2
1a0010e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a0010ea:	ee77 7ae4 	vsub.f32	s15, s15, s9
1a0010ee:	ee67 7a85 	vmul.f32	s15, s15, s10
1a0010f2:	ee77 7aa5 	vadd.f32	s15, s15, s11
1a0010f6:	ee67 7a86 	vmul.f32	s15, s15, s12
			/ 32760.0f; // micro Tesla
1a0010fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	Acontrol._magScaleZ = ((((float) Acontrol._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0010fe:	ed83 7a05 	vstr	s14, [r3, #20]
	if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a001102:	2100      	movs	r1, #0
1a001104:	200a      	movs	r0, #10
1a001106:	f7ff fba9 	bl	1a00085c <Ampu9250WriteAK8963Register>
1a00110a:	2800      	cmp	r0, #0
1a00110c:	db4e      	blt.n	1a0011ac <Ampu9250Init+0x278>
	vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a00110e:	2064      	movs	r0, #100	; 0x64
1a001110:	f000 ffac 	bl	1a00206c <vTaskDelay>
	if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a001114:	2116      	movs	r1, #22
1a001116:	200a      	movs	r0, #10
1a001118:	f7ff fba0 	bl	1a00085c <Ampu9250WriteAK8963Register>
1a00111c:	2800      	cmp	r0, #0
1a00111e:	db48      	blt.n	1a0011b2 <Ampu9250Init+0x27e>
	vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a001120:	2064      	movs	r0, #100	; 0x64
1a001122:	f000 ffa3 	bl	1a00206c <vTaskDelay>
	if (Ampu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a001126:	2101      	movs	r1, #1
1a001128:	206b      	movs	r0, #107	; 0x6b
1a00112a:	f7ff fb37 	bl	1a00079c <Ampu9250WriteRegister>
1a00112e:	2800      	cmp	r0, #0
1a001130:	db42      	blt.n	1a0011b8 <Ampu9250Init+0x284>
	Ampu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a001132:	2107      	movs	r1, #7
1a001134:	2003      	movs	r0, #3
1a001136:	f7ff fb55 	bl	1a0007e4 <Ampu9250ReadAK8963Registers>
	if (Ampu9250CalibrateGyro() < 0) {
1a00113a:	f7ff fe4f 	bl	1a000ddc <Ampu9250CalibrateGyro>
1a00113e:	2800      	cmp	r0, #0
1a001140:	db01      	blt.n	1a001146 <Ampu9250Init+0x212>
	return 1;
1a001142:	2001      	movs	r0, #1
}
1a001144:	bd10      	pop	{r4, pc}
		return -20;
1a001146:	f06f 0013 	mvn.w	r0, #19
1a00114a:	e7fb      	b.n	1a001144 <Ampu9250Init+0x210>
		return -1;
1a00114c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001150:	e7f8      	b.n	1a001144 <Ampu9250Init+0x210>
		return -2;
1a001152:	f06f 0001 	mvn.w	r0, #1
1a001156:	e7f5      	b.n	1a001144 <Ampu9250Init+0x210>
		return -3;
1a001158:	f06f 0002 	mvn.w	r0, #2
1a00115c:	e7f2      	b.n	1a001144 <Ampu9250Init+0x210>
		return -4;
1a00115e:	f06f 0003 	mvn.w	r0, #3
1a001162:	e7ef      	b.n	1a001144 <Ampu9250Init+0x210>
		return -5;
1a001164:	f06f 0004 	mvn.w	r0, #4
1a001168:	e7ec      	b.n	1a001144 <Ampu9250Init+0x210>
		return -6;
1a00116a:	f06f 0005 	mvn.w	r0, #5
1a00116e:	e7e9      	b.n	1a001144 <Ampu9250Init+0x210>
		return -7;
1a001170:	f06f 0006 	mvn.w	r0, #6
1a001174:	e7e6      	b.n	1a001144 <Ampu9250Init+0x210>
		return -8;
1a001176:	f06f 0007 	mvn.w	r0, #7
1a00117a:	e7e3      	b.n	1a001144 <Ampu9250Init+0x210>
		return -9;
1a00117c:	f06f 0008 	mvn.w	r0, #8
1a001180:	e7e0      	b.n	1a001144 <Ampu9250Init+0x210>
		return -10;
1a001182:	f06f 0009 	mvn.w	r0, #9
1a001186:	e7dd      	b.n	1a001144 <Ampu9250Init+0x210>
		return -11;
1a001188:	f06f 000a 	mvn.w	r0, #10
1a00118c:	e7da      	b.n	1a001144 <Ampu9250Init+0x210>
		return -12;
1a00118e:	f06f 000b 	mvn.w	r0, #11
1a001192:	e7d7      	b.n	1a001144 <Ampu9250Init+0x210>
		return -13;
1a001194:	f06f 000c 	mvn.w	r0, #12
1a001198:	e7d4      	b.n	1a001144 <Ampu9250Init+0x210>
		return -14;
1a00119a:	f06f 000d 	mvn.w	r0, #13
1a00119e:	e7d1      	b.n	1a001144 <Ampu9250Init+0x210>
		return -15;
1a0011a0:	f06f 000e 	mvn.w	r0, #14
1a0011a4:	e7ce      	b.n	1a001144 <Ampu9250Init+0x210>
		return -16;
1a0011a6:	f06f 000f 	mvn.w	r0, #15
1a0011aa:	e7cb      	b.n	1a001144 <Ampu9250Init+0x210>
		return -17;
1a0011ac:	f06f 0010 	mvn.w	r0, #16
1a0011b0:	e7c8      	b.n	1a001144 <Ampu9250Init+0x210>
		return -18;
1a0011b2:	f06f 0011 	mvn.w	r0, #17
1a0011b6:	e7c5      	b.n	1a001144 <Ampu9250Init+0x210>
		return -19;
1a0011b8:	f06f 0012 	mvn.w	r0, #18
1a0011bc:	e7c2      	b.n	1a001144 <Ampu9250Init+0x210>
1a0011be:	bf00      	nop
1a0011c0:	100000d8 	.word	0x100000d8
1a0011c4:	00061a80 	.word	0x00061a80
1a0011c8:	3b9cea16 	.word	0x3b9cea16
1a0011cc:	3a8ba0e4 	.word	0x3a8ba0e4
1a0011d0:	43000000 	.word	0x43000000
1a0011d4:	3b800000 	.word	0x3b800000
1a0011d8:	45998000 	.word	0x45998000
1a0011dc:	46fff000 	.word	0x46fff000

1a0011e0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a0011e0:	b538      	push	{r3, r4, r5, lr}
1a0011e2:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a0011e4:	f010 0f07 	tst.w	r0, #7
1a0011e8:	d002      	beq.n	1a0011f0 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0011ea:	f020 0407 	bic.w	r4, r0, #7
1a0011ee:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0011f0:	f000 fe28 	bl	1a001e44 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0011f4:	4b13      	ldr	r3, [pc, #76]	; (1a001244 <pvPortMalloc+0x64>)
1a0011f6:	681b      	ldr	r3, [r3, #0]
1a0011f8:	b17b      	cbz	r3, 1a00121a <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0011fa:	4b13      	ldr	r3, [pc, #76]	; (1a001248 <pvPortMalloc+0x68>)
1a0011fc:	681b      	ldr	r3, [r3, #0]
1a0011fe:	441c      	add	r4, r3
1a001200:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a001204:	4294      	cmp	r4, r2
1a001206:	d80e      	bhi.n	1a001226 <pvPortMalloc+0x46>
1a001208:	42a3      	cmp	r3, r4
1a00120a:	d310      	bcc.n	1a00122e <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a00120c:	f000 feb4 	bl	1a001f78 <xTaskResumeAll>
void *pvReturn = NULL;
1a001210:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a001212:	f000 fbd4 	bl	1a0019be <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a001216:	4628      	mov	r0, r5
1a001218:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00121a:	4b0c      	ldr	r3, [pc, #48]	; (1a00124c <pvPortMalloc+0x6c>)
1a00121c:	f023 0307 	bic.w	r3, r3, #7
1a001220:	4a08      	ldr	r2, [pc, #32]	; (1a001244 <pvPortMalloc+0x64>)
1a001222:	6013      	str	r3, [r2, #0]
1a001224:	e7e9      	b.n	1a0011fa <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a001226:	f000 fea7 	bl	1a001f78 <xTaskResumeAll>
void *pvReturn = NULL;
1a00122a:	2500      	movs	r5, #0
1a00122c:	e7f1      	b.n	1a001212 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a00122e:	4a05      	ldr	r2, [pc, #20]	; (1a001244 <pvPortMalloc+0x64>)
1a001230:	6815      	ldr	r5, [r2, #0]
1a001232:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a001234:	4b04      	ldr	r3, [pc, #16]	; (1a001248 <pvPortMalloc+0x68>)
1a001236:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a001238:	f000 fe9e 	bl	1a001f78 <xTaskResumeAll>
		if( pvReturn == NULL )
1a00123c:	2d00      	cmp	r5, #0
1a00123e:	d1ea      	bne.n	1a001216 <pvPortMalloc+0x36>
1a001240:	e7e7      	b.n	1a001212 <pvPortMalloc+0x32>
1a001242:	bf00      	nop
1a001244:	10000230 	.word	0x10000230
1a001248:	10002234 	.word	0x10002234
1a00124c:	1000023c 	.word	0x1000023c

1a001250 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a001250:	b140      	cbz	r0, 1a001264 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001252:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001256:	f383 8811 	msr	BASEPRI, r3
1a00125a:	f3bf 8f6f 	isb	sy
1a00125e:	f3bf 8f4f 	dsb	sy
1a001262:	e7fe      	b.n	1a001262 <vPortFree+0x12>
}
1a001264:	4770      	bx	lr

1a001266 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a001266:	b510      	push	{r4, lr}
1a001268:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a00126a:	f001 fb83 	bl	1a002974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a00126e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001270:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001272:	429a      	cmp	r2, r3
1a001274:	d004      	beq.n	1a001280 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a001276:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a001278:	f001 fb9e 	bl	1a0029b8 <vPortExitCritical>

	return xReturn;
}
1a00127c:	4620      	mov	r0, r4
1a00127e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a001280:	2401      	movs	r4, #1
1a001282:	e7f9      	b.n	1a001278 <prvIsQueueFull+0x12>

1a001284 <prvIsQueueEmpty>:
{
1a001284:	b510      	push	{r4, lr}
1a001286:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001288:	f001 fb74 	bl	1a002974 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00128c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00128e:	b123      	cbz	r3, 1a00129a <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a001290:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001292:	f001 fb91 	bl	1a0029b8 <vPortExitCritical>
}
1a001296:	4620      	mov	r0, r4
1a001298:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00129a:	2401      	movs	r4, #1
1a00129c:	e7f9      	b.n	1a001292 <prvIsQueueEmpty+0xe>

1a00129e <prvCopyDataToQueue>:
{
1a00129e:	b570      	push	{r4, r5, r6, lr}
1a0012a0:	4604      	mov	r4, r0
1a0012a2:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0012a4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0012a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0012a8:	b95a      	cbnz	r2, 1a0012c2 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0012aa:	6803      	ldr	r3, [r0, #0]
1a0012ac:	b11b      	cbz	r3, 1a0012b6 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0012ae:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0012b0:	3501      	adds	r5, #1
1a0012b2:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0012b4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0012b6:	6840      	ldr	r0, [r0, #4]
1a0012b8:	f001 f83e 	bl	1a002338 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0012bc:	2300      	movs	r3, #0
1a0012be:	6063      	str	r3, [r4, #4]
1a0012c0:	e7f6      	b.n	1a0012b0 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0012c2:	b96e      	cbnz	r6, 1a0012e0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0012c4:	6880      	ldr	r0, [r0, #8]
1a0012c6:	f003 fcf9 	bl	1a004cbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0012ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0012cc:	68a3      	ldr	r3, [r4, #8]
1a0012ce:	4413      	add	r3, r2
1a0012d0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0012d2:	6862      	ldr	r2, [r4, #4]
1a0012d4:	4293      	cmp	r3, r2
1a0012d6:	d319      	bcc.n	1a00130c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0012d8:	6823      	ldr	r3, [r4, #0]
1a0012da:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0012dc:	2000      	movs	r0, #0
1a0012de:	e7e7      	b.n	1a0012b0 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0012e0:	68c0      	ldr	r0, [r0, #12]
1a0012e2:	f003 fceb 	bl	1a004cbc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0012e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0012e8:	4252      	negs	r2, r2
1a0012ea:	68e3      	ldr	r3, [r4, #12]
1a0012ec:	4413      	add	r3, r2
1a0012ee:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0012f0:	6821      	ldr	r1, [r4, #0]
1a0012f2:	428b      	cmp	r3, r1
1a0012f4:	d202      	bcs.n	1a0012fc <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0012f6:	6863      	ldr	r3, [r4, #4]
1a0012f8:	441a      	add	r2, r3
1a0012fa:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0012fc:	2e02      	cmp	r6, #2
1a0012fe:	d001      	beq.n	1a001304 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a001300:	2000      	movs	r0, #0
1a001302:	e7d5      	b.n	1a0012b0 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001304:	b125      	cbz	r5, 1a001310 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001306:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001308:	2000      	movs	r0, #0
1a00130a:	e7d1      	b.n	1a0012b0 <prvCopyDataToQueue+0x12>
1a00130c:	2000      	movs	r0, #0
1a00130e:	e7cf      	b.n	1a0012b0 <prvCopyDataToQueue+0x12>
1a001310:	2000      	movs	r0, #0
1a001312:	e7cd      	b.n	1a0012b0 <prvCopyDataToQueue+0x12>

1a001314 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a001314:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001316:	b172      	cbz	r2, 1a001336 <prvCopyDataFromQueue+0x22>
{
1a001318:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00131a:	68c3      	ldr	r3, [r0, #12]
1a00131c:	4413      	add	r3, r2
1a00131e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a001320:	6844      	ldr	r4, [r0, #4]
1a001322:	42a3      	cmp	r3, r4
1a001324:	d301      	bcc.n	1a00132a <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001326:	6803      	ldr	r3, [r0, #0]
1a001328:	60c3      	str	r3, [r0, #12]
1a00132a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00132c:	68c1      	ldr	r1, [r0, #12]
1a00132e:	4620      	mov	r0, r4
1a001330:	f003 fcc4 	bl	1a004cbc <memcpy>
}
1a001334:	bd10      	pop	{r4, pc}
1a001336:	4770      	bx	lr

1a001338 <prvUnlockQueue>:
{
1a001338:	b538      	push	{r3, r4, r5, lr}
1a00133a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00133c:	f001 fb1a 	bl	1a002974 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a001340:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a001344:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001346:	e003      	b.n	1a001350 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a001348:	f000 ffe0 	bl	1a00230c <vTaskMissedYield>
			--cTxLock;
1a00134c:	3c01      	subs	r4, #1
1a00134e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001350:	2c00      	cmp	r4, #0
1a001352:	dd08      	ble.n	1a001366 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001354:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001356:	b133      	cbz	r3, 1a001366 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001358:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00135c:	f000 ff44 	bl	1a0021e8 <xTaskRemoveFromEventList>
1a001360:	2800      	cmp	r0, #0
1a001362:	d0f3      	beq.n	1a00134c <prvUnlockQueue+0x14>
1a001364:	e7f0      	b.n	1a001348 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001366:	23ff      	movs	r3, #255	; 0xff
1a001368:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00136c:	f001 fb24 	bl	1a0029b8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a001370:	f001 fb00 	bl	1a002974 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a001374:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a001378:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00137a:	e003      	b.n	1a001384 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00137c:	f000 ffc6 	bl	1a00230c <vTaskMissedYield>
				--cRxLock;
1a001380:	3c01      	subs	r4, #1
1a001382:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001384:	2c00      	cmp	r4, #0
1a001386:	dd08      	ble.n	1a00139a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001388:	692b      	ldr	r3, [r5, #16]
1a00138a:	b133      	cbz	r3, 1a00139a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00138c:	f105 0010 	add.w	r0, r5, #16
1a001390:	f000 ff2a 	bl	1a0021e8 <xTaskRemoveFromEventList>
1a001394:	2800      	cmp	r0, #0
1a001396:	d0f3      	beq.n	1a001380 <prvUnlockQueue+0x48>
1a001398:	e7f0      	b.n	1a00137c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a00139a:	23ff      	movs	r3, #255	; 0xff
1a00139c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0013a0:	f001 fb0a 	bl	1a0029b8 <vPortExitCritical>
}
1a0013a4:	bd38      	pop	{r3, r4, r5, pc}
1a0013a6:	Address 0x000000001a0013a6 is out of bounds.


1a0013a8 <xQueueGenericReset>:
{
1a0013a8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0013aa:	b940      	cbnz	r0, 1a0013be <xQueueGenericReset+0x16>
1a0013ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013b0:	f383 8811 	msr	BASEPRI, r3
1a0013b4:	f3bf 8f6f 	isb	sy
1a0013b8:	f3bf 8f4f 	dsb	sy
1a0013bc:	e7fe      	b.n	1a0013bc <xQueueGenericReset+0x14>
1a0013be:	4604      	mov	r4, r0
1a0013c0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0013c2:	f001 fad7 	bl	1a002974 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0013c6:	6821      	ldr	r1, [r4, #0]
1a0013c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0013ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0013cc:	fb03 1002 	mla	r0, r3, r2, r1
1a0013d0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0013d2:	2000      	movs	r0, #0
1a0013d4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0013d6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0013d8:	3a01      	subs	r2, #1
1a0013da:	fb02 1303 	mla	r3, r2, r3, r1
1a0013de:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0013e0:	23ff      	movs	r3, #255	; 0xff
1a0013e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0013e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0013ea:	b9a5      	cbnz	r5, 1a001416 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0013ec:	6923      	ldr	r3, [r4, #16]
1a0013ee:	b91b      	cbnz	r3, 1a0013f8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0013f0:	f001 fae2 	bl	1a0029b8 <vPortExitCritical>
}
1a0013f4:	2001      	movs	r0, #1
1a0013f6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0013f8:	f104 0010 	add.w	r0, r4, #16
1a0013fc:	f000 fef4 	bl	1a0021e8 <xTaskRemoveFromEventList>
1a001400:	2800      	cmp	r0, #0
1a001402:	d0f5      	beq.n	1a0013f0 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a001404:	4b08      	ldr	r3, [pc, #32]	; (1a001428 <xQueueGenericReset+0x80>)
1a001406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00140a:	601a      	str	r2, [r3, #0]
1a00140c:	f3bf 8f4f 	dsb	sy
1a001410:	f3bf 8f6f 	isb	sy
1a001414:	e7ec      	b.n	1a0013f0 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001416:	f104 0010 	add.w	r0, r4, #16
1a00141a:	f000 fa6e 	bl	1a0018fa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00141e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001422:	f000 fa6a 	bl	1a0018fa <vListInitialise>
1a001426:	e7e3      	b.n	1a0013f0 <xQueueGenericReset+0x48>
1a001428:	e000ed04 	.word	0xe000ed04

1a00142c <prvInitialiseNewQueue>:
{
1a00142c:	b538      	push	{r3, r4, r5, lr}
1a00142e:	461d      	mov	r5, r3
1a001430:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a001432:	460b      	mov	r3, r1
1a001434:	b149      	cbz	r1, 1a00144a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a001436:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001438:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a00143a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a00143c:	2101      	movs	r1, #1
1a00143e:	4620      	mov	r0, r4
1a001440:	f7ff ffb2 	bl	1a0013a8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a001444:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001448:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a00144a:	6024      	str	r4, [r4, #0]
1a00144c:	e7f4      	b.n	1a001438 <prvInitialiseNewQueue+0xc>

1a00144e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00144e:	b940      	cbnz	r0, 1a001462 <xQueueGenericCreateStatic+0x14>
1a001450:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001454:	f383 8811 	msr	BASEPRI, r3
1a001458:	f3bf 8f6f 	isb	sy
1a00145c:	f3bf 8f4f 	dsb	sy
1a001460:	e7fe      	b.n	1a001460 <xQueueGenericCreateStatic+0x12>
	{
1a001462:	b510      	push	{r4, lr}
1a001464:	b084      	sub	sp, #16
1a001466:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001468:	b153      	cbz	r3, 1a001480 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a00146a:	b192      	cbz	r2, 1a001492 <xQueueGenericCreateStatic+0x44>
1a00146c:	b989      	cbnz	r1, 1a001492 <xQueueGenericCreateStatic+0x44>
1a00146e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001472:	f383 8811 	msr	BASEPRI, r3
1a001476:	f3bf 8f6f 	isb	sy
1a00147a:	f3bf 8f4f 	dsb	sy
1a00147e:	e7fe      	b.n	1a00147e <xQueueGenericCreateStatic+0x30>
1a001480:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001484:	f383 8811 	msr	BASEPRI, r3
1a001488:	f3bf 8f6f 	isb	sy
1a00148c:	f3bf 8f4f 	dsb	sy
1a001490:	e7fe      	b.n	1a001490 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a001492:	b94a      	cbnz	r2, 1a0014a8 <xQueueGenericCreateStatic+0x5a>
1a001494:	b141      	cbz	r1, 1a0014a8 <xQueueGenericCreateStatic+0x5a>
1a001496:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00149a:	f383 8811 	msr	BASEPRI, r3
1a00149e:	f3bf 8f6f 	isb	sy
1a0014a2:	f3bf 8f4f 	dsb	sy
1a0014a6:	e7fe      	b.n	1a0014a6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0014a8:	2050      	movs	r0, #80	; 0x50
1a0014aa:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0014ac:	9803      	ldr	r0, [sp, #12]
1a0014ae:	2850      	cmp	r0, #80	; 0x50
1a0014b0:	d008      	beq.n	1a0014c4 <xQueueGenericCreateStatic+0x76>
1a0014b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014b6:	f383 8811 	msr	BASEPRI, r3
1a0014ba:	f3bf 8f6f 	isb	sy
1a0014be:	f3bf 8f4f 	dsb	sy
1a0014c2:	e7fe      	b.n	1a0014c2 <xQueueGenericCreateStatic+0x74>
1a0014c4:	4620      	mov	r0, r4
1a0014c6:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0014c8:	2301      	movs	r3, #1
1a0014ca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0014ce:	9400      	str	r4, [sp, #0]
1a0014d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0014d4:	f7ff ffaa 	bl	1a00142c <prvInitialiseNewQueue>
	}
1a0014d8:	4620      	mov	r0, r4
1a0014da:	b004      	add	sp, #16
1a0014dc:	bd10      	pop	{r4, pc}
1a0014de:	Address 0x000000001a0014de is out of bounds.


1a0014e0 <xQueueGenericSend>:
{
1a0014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0014e2:	b085      	sub	sp, #20
1a0014e4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0014e6:	b160      	cbz	r0, 1a001502 <xQueueGenericSend+0x22>
1a0014e8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0014ea:	b999      	cbnz	r1, 1a001514 <xQueueGenericSend+0x34>
1a0014ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0014ee:	b18a      	cbz	r2, 1a001514 <xQueueGenericSend+0x34>
1a0014f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014f4:	f383 8811 	msr	BASEPRI, r3
1a0014f8:	f3bf 8f6f 	isb	sy
1a0014fc:	f3bf 8f4f 	dsb	sy
1a001500:	e7fe      	b.n	1a001500 <xQueueGenericSend+0x20>
1a001502:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001506:	f383 8811 	msr	BASEPRI, r3
1a00150a:	f3bf 8f6f 	isb	sy
1a00150e:	f3bf 8f4f 	dsb	sy
1a001512:	e7fe      	b.n	1a001512 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001514:	2b02      	cmp	r3, #2
1a001516:	d10b      	bne.n	1a001530 <xQueueGenericSend+0x50>
1a001518:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00151a:	2a01      	cmp	r2, #1
1a00151c:	d008      	beq.n	1a001530 <xQueueGenericSend+0x50>
1a00151e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001522:	f383 8811 	msr	BASEPRI, r3
1a001526:	f3bf 8f6f 	isb	sy
1a00152a:	f3bf 8f4f 	dsb	sy
1a00152e:	e7fe      	b.n	1a00152e <xQueueGenericSend+0x4e>
1a001530:	461e      	mov	r6, r3
1a001532:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001534:	f000 fef0 	bl	1a002318 <xTaskGetSchedulerState>
1a001538:	b950      	cbnz	r0, 1a001550 <xQueueGenericSend+0x70>
1a00153a:	9b01      	ldr	r3, [sp, #4]
1a00153c:	b153      	cbz	r3, 1a001554 <xQueueGenericSend+0x74>
1a00153e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001542:	f383 8811 	msr	BASEPRI, r3
1a001546:	f3bf 8f6f 	isb	sy
1a00154a:	f3bf 8f4f 	dsb	sy
1a00154e:	e7fe      	b.n	1a00154e <xQueueGenericSend+0x6e>
1a001550:	2500      	movs	r5, #0
1a001552:	e03a      	b.n	1a0015ca <xQueueGenericSend+0xea>
1a001554:	2500      	movs	r5, #0
1a001556:	e038      	b.n	1a0015ca <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001558:	4632      	mov	r2, r6
1a00155a:	4639      	mov	r1, r7
1a00155c:	4620      	mov	r0, r4
1a00155e:	f7ff fe9e 	bl	1a00129e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001562:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001564:	b94b      	cbnz	r3, 1a00157a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a001566:	b1a8      	cbz	r0, 1a001594 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a001568:	4b3b      	ldr	r3, [pc, #236]	; (1a001658 <xQueueGenericSend+0x178>)
1a00156a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00156e:	601a      	str	r2, [r3, #0]
1a001570:	f3bf 8f4f 	dsb	sy
1a001574:	f3bf 8f6f 	isb	sy
1a001578:	e00c      	b.n	1a001594 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00157a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00157e:	f000 fe33 	bl	1a0021e8 <xTaskRemoveFromEventList>
1a001582:	b138      	cbz	r0, 1a001594 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a001584:	4b34      	ldr	r3, [pc, #208]	; (1a001658 <xQueueGenericSend+0x178>)
1a001586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00158a:	601a      	str	r2, [r3, #0]
1a00158c:	f3bf 8f4f 	dsb	sy
1a001590:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001594:	f001 fa10 	bl	1a0029b8 <vPortExitCritical>
				return pdPASS;
1a001598:	2001      	movs	r0, #1
}
1a00159a:	b005      	add	sp, #20
1a00159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a00159e:	f001 fa0b 	bl	1a0029b8 <vPortExitCritical>
					return errQUEUE_FULL;
1a0015a2:	2000      	movs	r0, #0
1a0015a4:	e7f9      	b.n	1a00159a <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0015a6:	a802      	add	r0, sp, #8
1a0015a8:	f000 fe64 	bl	1a002274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0015ac:	2501      	movs	r5, #1
1a0015ae:	e019      	b.n	1a0015e4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a0015b0:	2300      	movs	r3, #0
1a0015b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0015b6:	e021      	b.n	1a0015fc <xQueueGenericSend+0x11c>
1a0015b8:	2300      	movs	r3, #0
1a0015ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0015be:	e023      	b.n	1a001608 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a0015c0:	4620      	mov	r0, r4
1a0015c2:	f7ff feb9 	bl	1a001338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0015c6:	f000 fcd7 	bl	1a001f78 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a0015ca:	f001 f9d3 	bl	1a002974 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0015ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0015d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0015d2:	429a      	cmp	r2, r3
1a0015d4:	d3c0      	bcc.n	1a001558 <xQueueGenericSend+0x78>
1a0015d6:	2e02      	cmp	r6, #2
1a0015d8:	d0be      	beq.n	1a001558 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0015da:	9b01      	ldr	r3, [sp, #4]
1a0015dc:	2b00      	cmp	r3, #0
1a0015de:	d0de      	beq.n	1a00159e <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a0015e0:	2d00      	cmp	r5, #0
1a0015e2:	d0e0      	beq.n	1a0015a6 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a0015e4:	f001 f9e8 	bl	1a0029b8 <vPortExitCritical>
		vTaskSuspendAll();
1a0015e8:	f000 fc2c 	bl	1a001e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0015ec:	f001 f9c2 	bl	1a002974 <vPortEnterCritical>
1a0015f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0015f4:	b25b      	sxtb	r3, r3
1a0015f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0015fa:	d0d9      	beq.n	1a0015b0 <xQueueGenericSend+0xd0>
1a0015fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001600:	b25b      	sxtb	r3, r3
1a001602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001606:	d0d7      	beq.n	1a0015b8 <xQueueGenericSend+0xd8>
1a001608:	f001 f9d6 	bl	1a0029b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00160c:	a901      	add	r1, sp, #4
1a00160e:	a802      	add	r0, sp, #8
1a001610:	f000 fe3c 	bl	1a00228c <xTaskCheckForTimeOut>
1a001614:	b9c8      	cbnz	r0, 1a00164a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001616:	4620      	mov	r0, r4
1a001618:	f7ff fe25 	bl	1a001266 <prvIsQueueFull>
1a00161c:	2800      	cmp	r0, #0
1a00161e:	d0cf      	beq.n	1a0015c0 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001620:	9901      	ldr	r1, [sp, #4]
1a001622:	f104 0010 	add.w	r0, r4, #16
1a001626:	f000 fdab 	bl	1a002180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00162a:	4620      	mov	r0, r4
1a00162c:	f7ff fe84 	bl	1a001338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001630:	f000 fca2 	bl	1a001f78 <xTaskResumeAll>
1a001634:	2800      	cmp	r0, #0
1a001636:	d1c8      	bne.n	1a0015ca <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001638:	4b07      	ldr	r3, [pc, #28]	; (1a001658 <xQueueGenericSend+0x178>)
1a00163a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00163e:	601a      	str	r2, [r3, #0]
1a001640:	f3bf 8f4f 	dsb	sy
1a001644:	f3bf 8f6f 	isb	sy
1a001648:	e7bf      	b.n	1a0015ca <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a00164a:	4620      	mov	r0, r4
1a00164c:	f7ff fe74 	bl	1a001338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001650:	f000 fc92 	bl	1a001f78 <xTaskResumeAll>
			return errQUEUE_FULL;
1a001654:	2000      	movs	r0, #0
1a001656:	e7a0      	b.n	1a00159a <xQueueGenericSend+0xba>
1a001658:	e000ed04 	.word	0xe000ed04

1a00165c <xQueueGenericSendFromISR>:
{
1a00165c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001660:	b160      	cbz	r0, 1a00167c <xQueueGenericSendFromISR+0x20>
1a001662:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001664:	b999      	cbnz	r1, 1a00168e <xQueueGenericSendFromISR+0x32>
1a001666:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001668:	b188      	cbz	r0, 1a00168e <xQueueGenericSendFromISR+0x32>
1a00166a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00166e:	f383 8811 	msr	BASEPRI, r3
1a001672:	f3bf 8f6f 	isb	sy
1a001676:	f3bf 8f4f 	dsb	sy
1a00167a:	e7fe      	b.n	1a00167a <xQueueGenericSendFromISR+0x1e>
1a00167c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001680:	f383 8811 	msr	BASEPRI, r3
1a001684:	f3bf 8f6f 	isb	sy
1a001688:	f3bf 8f4f 	dsb	sy
1a00168c:	e7fe      	b.n	1a00168c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00168e:	2b02      	cmp	r3, #2
1a001690:	d10b      	bne.n	1a0016aa <xQueueGenericSendFromISR+0x4e>
1a001692:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001694:	2801      	cmp	r0, #1
1a001696:	d008      	beq.n	1a0016aa <xQueueGenericSendFromISR+0x4e>
1a001698:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00169c:	f383 8811 	msr	BASEPRI, r3
1a0016a0:	f3bf 8f6f 	isb	sy
1a0016a4:	f3bf 8f4f 	dsb	sy
1a0016a8:	e7fe      	b.n	1a0016a8 <xQueueGenericSendFromISR+0x4c>
1a0016aa:	461f      	mov	r7, r3
1a0016ac:	4690      	mov	r8, r2
1a0016ae:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0016b0:	f001 fa8a 	bl	1a002bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0016b4:	f3ef 8611 	mrs	r6, BASEPRI
1a0016b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016bc:	f383 8811 	msr	BASEPRI, r3
1a0016c0:	f3bf 8f6f 	isb	sy
1a0016c4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0016c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0016ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0016cc:	429a      	cmp	r2, r3
1a0016ce:	d303      	bcc.n	1a0016d8 <xQueueGenericSendFromISR+0x7c>
1a0016d0:	2f02      	cmp	r7, #2
1a0016d2:	d001      	beq.n	1a0016d8 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a0016d4:	2000      	movs	r0, #0
1a0016d6:	e00f      	b.n	1a0016f8 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a0016d8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a0016dc:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0016de:	463a      	mov	r2, r7
1a0016e0:	4649      	mov	r1, r9
1a0016e2:	4620      	mov	r0, r4
1a0016e4:	f7ff fddb 	bl	1a00129e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a0016e8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0016ec:	d008      	beq.n	1a001700 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0016ee:	1c6b      	adds	r3, r5, #1
1a0016f0:	b25b      	sxtb	r3, r3
1a0016f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0016f6:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0016f8:	f386 8811 	msr	BASEPRI, r6
}
1a0016fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001700:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001702:	b15b      	cbz	r3, 1a00171c <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001704:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001708:	f000 fd6e 	bl	1a0021e8 <xTaskRemoveFromEventList>
1a00170c:	b140      	cbz	r0, 1a001720 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a00170e:	f1b8 0f00 	cmp.w	r8, #0
1a001712:	d007      	beq.n	1a001724 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001714:	2001      	movs	r0, #1
1a001716:	f8c8 0000 	str.w	r0, [r8]
1a00171a:	e7ed      	b.n	1a0016f8 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a00171c:	2001      	movs	r0, #1
1a00171e:	e7eb      	b.n	1a0016f8 <xQueueGenericSendFromISR+0x9c>
1a001720:	2001      	movs	r0, #1
1a001722:	e7e9      	b.n	1a0016f8 <xQueueGenericSendFromISR+0x9c>
1a001724:	2001      	movs	r0, #1
1a001726:	e7e7      	b.n	1a0016f8 <xQueueGenericSendFromISR+0x9c>

1a001728 <xQueueReceive>:
{
1a001728:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00172a:	b085      	sub	sp, #20
1a00172c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00172e:	b160      	cbz	r0, 1a00174a <xQueueReceive+0x22>
1a001730:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001732:	b999      	cbnz	r1, 1a00175c <xQueueReceive+0x34>
1a001734:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001736:	b18b      	cbz	r3, 1a00175c <xQueueReceive+0x34>
	__asm volatile
1a001738:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00173c:	f383 8811 	msr	BASEPRI, r3
1a001740:	f3bf 8f6f 	isb	sy
1a001744:	f3bf 8f4f 	dsb	sy
1a001748:	e7fe      	b.n	1a001748 <xQueueReceive+0x20>
1a00174a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00174e:	f383 8811 	msr	BASEPRI, r3
1a001752:	f3bf 8f6f 	isb	sy
1a001756:	f3bf 8f4f 	dsb	sy
1a00175a:	e7fe      	b.n	1a00175a <xQueueReceive+0x32>
1a00175c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00175e:	f000 fddb 	bl	1a002318 <xTaskGetSchedulerState>
1a001762:	b950      	cbnz	r0, 1a00177a <xQueueReceive+0x52>
1a001764:	9b01      	ldr	r3, [sp, #4]
1a001766:	b153      	cbz	r3, 1a00177e <xQueueReceive+0x56>
1a001768:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00176c:	f383 8811 	msr	BASEPRI, r3
1a001770:	f3bf 8f6f 	isb	sy
1a001774:	f3bf 8f4f 	dsb	sy
1a001778:	e7fe      	b.n	1a001778 <xQueueReceive+0x50>
1a00177a:	2600      	movs	r6, #0
1a00177c:	e03e      	b.n	1a0017fc <xQueueReceive+0xd4>
1a00177e:	2600      	movs	r6, #0
1a001780:	e03c      	b.n	1a0017fc <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001782:	4639      	mov	r1, r7
1a001784:	4620      	mov	r0, r4
1a001786:	f7ff fdc5 	bl	1a001314 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00178a:	3d01      	subs	r5, #1
1a00178c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00178e:	6923      	ldr	r3, [r4, #16]
1a001790:	b923      	cbnz	r3, 1a00179c <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a001792:	f001 f911 	bl	1a0029b8 <vPortExitCritical>
				return pdPASS;
1a001796:	2001      	movs	r0, #1
}
1a001798:	b005      	add	sp, #20
1a00179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00179c:	f104 0010 	add.w	r0, r4, #16
1a0017a0:	f000 fd22 	bl	1a0021e8 <xTaskRemoveFromEventList>
1a0017a4:	2800      	cmp	r0, #0
1a0017a6:	d0f4      	beq.n	1a001792 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a0017a8:	4b34      	ldr	r3, [pc, #208]	; (1a00187c <xQueueReceive+0x154>)
1a0017aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017ae:	601a      	str	r2, [r3, #0]
1a0017b0:	f3bf 8f4f 	dsb	sy
1a0017b4:	f3bf 8f6f 	isb	sy
1a0017b8:	e7eb      	b.n	1a001792 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a0017ba:	f001 f8fd 	bl	1a0029b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0017be:	2000      	movs	r0, #0
1a0017c0:	e7ea      	b.n	1a001798 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0017c2:	a802      	add	r0, sp, #8
1a0017c4:	f000 fd56 	bl	1a002274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0017c8:	2601      	movs	r6, #1
1a0017ca:	e021      	b.n	1a001810 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a0017cc:	2300      	movs	r3, #0
1a0017ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0017d2:	e029      	b.n	1a001828 <xQueueReceive+0x100>
1a0017d4:	2300      	movs	r3, #0
1a0017d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0017da:	e02b      	b.n	1a001834 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a0017dc:	4620      	mov	r0, r4
1a0017de:	f7ff fdab 	bl	1a001338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0017e2:	f000 fbc9 	bl	1a001f78 <xTaskResumeAll>
1a0017e6:	e009      	b.n	1a0017fc <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a0017e8:	4620      	mov	r0, r4
1a0017ea:	f7ff fda5 	bl	1a001338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0017ee:	f000 fbc3 	bl	1a001f78 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0017f2:	4620      	mov	r0, r4
1a0017f4:	f7ff fd46 	bl	1a001284 <prvIsQueueEmpty>
1a0017f8:	2800      	cmp	r0, #0
1a0017fa:	d13d      	bne.n	1a001878 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a0017fc:	f001 f8ba 	bl	1a002974 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001800:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001802:	2d00      	cmp	r5, #0
1a001804:	d1bd      	bne.n	1a001782 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001806:	9b01      	ldr	r3, [sp, #4]
1a001808:	2b00      	cmp	r3, #0
1a00180a:	d0d6      	beq.n	1a0017ba <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a00180c:	2e00      	cmp	r6, #0
1a00180e:	d0d8      	beq.n	1a0017c2 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a001810:	f001 f8d2 	bl	1a0029b8 <vPortExitCritical>
		vTaskSuspendAll();
1a001814:	f000 fb16 	bl	1a001e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001818:	f001 f8ac 	bl	1a002974 <vPortEnterCritical>
1a00181c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001820:	b25b      	sxtb	r3, r3
1a001822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001826:	d0d1      	beq.n	1a0017cc <xQueueReceive+0xa4>
1a001828:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00182c:	b25b      	sxtb	r3, r3
1a00182e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001832:	d0cf      	beq.n	1a0017d4 <xQueueReceive+0xac>
1a001834:	f001 f8c0 	bl	1a0029b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001838:	a901      	add	r1, sp, #4
1a00183a:	a802      	add	r0, sp, #8
1a00183c:	f000 fd26 	bl	1a00228c <xTaskCheckForTimeOut>
1a001840:	2800      	cmp	r0, #0
1a001842:	d1d1      	bne.n	1a0017e8 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001844:	4620      	mov	r0, r4
1a001846:	f7ff fd1d 	bl	1a001284 <prvIsQueueEmpty>
1a00184a:	2800      	cmp	r0, #0
1a00184c:	d0c6      	beq.n	1a0017dc <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00184e:	9901      	ldr	r1, [sp, #4]
1a001850:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001854:	f000 fc94 	bl	1a002180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001858:	4620      	mov	r0, r4
1a00185a:	f7ff fd6d 	bl	1a001338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00185e:	f000 fb8b 	bl	1a001f78 <xTaskResumeAll>
1a001862:	2800      	cmp	r0, #0
1a001864:	d1ca      	bne.n	1a0017fc <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a001866:	4b05      	ldr	r3, [pc, #20]	; (1a00187c <xQueueReceive+0x154>)
1a001868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00186c:	601a      	str	r2, [r3, #0]
1a00186e:	f3bf 8f4f 	dsb	sy
1a001872:	f3bf 8f6f 	isb	sy
1a001876:	e7c1      	b.n	1a0017fc <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001878:	2000      	movs	r0, #0
1a00187a:	e78d      	b.n	1a001798 <xQueueReceive+0x70>
1a00187c:	e000ed04 	.word	0xe000ed04

1a001880 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001880:	2300      	movs	r3, #0
1a001882:	2b07      	cmp	r3, #7
1a001884:	d80c      	bhi.n	1a0018a0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001886:	4a07      	ldr	r2, [pc, #28]	; (1a0018a4 <vQueueAddToRegistry+0x24>)
1a001888:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00188c:	b10a      	cbz	r2, 1a001892 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00188e:	3301      	adds	r3, #1
1a001890:	e7f7      	b.n	1a001882 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001892:	4a04      	ldr	r2, [pc, #16]	; (1a0018a4 <vQueueAddToRegistry+0x24>)
1a001894:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001898:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a00189c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00189e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0018a0:	4770      	bx	lr
1a0018a2:	bf00      	nop
1a0018a4:	10002cb4 	.word	0x10002cb4

1a0018a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0018a8:	b570      	push	{r4, r5, r6, lr}
1a0018aa:	4604      	mov	r4, r0
1a0018ac:	460d      	mov	r5, r1
1a0018ae:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0018b0:	f001 f860 	bl	1a002974 <vPortEnterCritical>
1a0018b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0018b8:	b25b      	sxtb	r3, r3
1a0018ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0018be:	d00d      	beq.n	1a0018dc <vQueueWaitForMessageRestricted+0x34>
1a0018c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0018c4:	b25b      	sxtb	r3, r3
1a0018c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0018ca:	d00b      	beq.n	1a0018e4 <vQueueWaitForMessageRestricted+0x3c>
1a0018cc:	f001 f874 	bl	1a0029b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a0018d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0018d2:	b15b      	cbz	r3, 1a0018ec <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a0018d4:	4620      	mov	r0, r4
1a0018d6:	f7ff fd2f 	bl	1a001338 <prvUnlockQueue>
	}
1a0018da:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a0018dc:	2300      	movs	r3, #0
1a0018de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0018e2:	e7ed      	b.n	1a0018c0 <vQueueWaitForMessageRestricted+0x18>
1a0018e4:	2300      	movs	r3, #0
1a0018e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0018ea:	e7ef      	b.n	1a0018cc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0018ec:	4632      	mov	r2, r6
1a0018ee:	4629      	mov	r1, r5
1a0018f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0018f4:	f000 fc5c 	bl	1a0021b0 <vTaskPlaceOnEventListRestricted>
1a0018f8:	e7ec      	b.n	1a0018d4 <vQueueWaitForMessageRestricted+0x2c>

1a0018fa <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0018fa:	f100 0308 	add.w	r3, r0, #8
1a0018fe:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001904:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001906:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001908:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a00190a:	2300      	movs	r3, #0
1a00190c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00190e:	4770      	bx	lr

1a001910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001910:	2300      	movs	r3, #0
1a001912:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001914:	4770      	bx	lr

1a001916 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001916:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001918:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00191a:	689a      	ldr	r2, [r3, #8]
1a00191c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00191e:	689a      	ldr	r2, [r3, #8]
1a001920:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001922:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001924:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001926:	6803      	ldr	r3, [r0, #0]
1a001928:	3301      	adds	r3, #1
1a00192a:	6003      	str	r3, [r0, #0]
}
1a00192c:	4770      	bx	lr

1a00192e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00192e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001930:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001932:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001936:	d002      	beq.n	1a00193e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001938:	f100 0208 	add.w	r2, r0, #8
1a00193c:	e002      	b.n	1a001944 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00193e:	6902      	ldr	r2, [r0, #16]
1a001940:	e004      	b.n	1a00194c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001942:	461a      	mov	r2, r3
1a001944:	6853      	ldr	r3, [r2, #4]
1a001946:	681c      	ldr	r4, [r3, #0]
1a001948:	42ac      	cmp	r4, r5
1a00194a:	d9fa      	bls.n	1a001942 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00194c:	6853      	ldr	r3, [r2, #4]
1a00194e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001950:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001952:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001954:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001956:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001958:	6803      	ldr	r3, [r0, #0]
1a00195a:	3301      	adds	r3, #1
1a00195c:	6003      	str	r3, [r0, #0]
}
1a00195e:	bc30      	pop	{r4, r5}
1a001960:	4770      	bx	lr

1a001962 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001962:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001964:	6842      	ldr	r2, [r0, #4]
1a001966:	6881      	ldr	r1, [r0, #8]
1a001968:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00196a:	6882      	ldr	r2, [r0, #8]
1a00196c:	6841      	ldr	r1, [r0, #4]
1a00196e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001970:	685a      	ldr	r2, [r3, #4]
1a001972:	4282      	cmp	r2, r0
1a001974:	d006      	beq.n	1a001984 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001976:	2200      	movs	r2, #0
1a001978:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00197a:	681a      	ldr	r2, [r3, #0]
1a00197c:	3a01      	subs	r2, #1
1a00197e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001980:	6818      	ldr	r0, [r3, #0]
}
1a001982:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001984:	6882      	ldr	r2, [r0, #8]
1a001986:	605a      	str	r2, [r3, #4]
1a001988:	e7f5      	b.n	1a001976 <uxListRemove+0x14>
1a00198a:	Address 0x000000001a00198a is out of bounds.


1a00198c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a00198c:	4b03      	ldr	r3, [pc, #12]	; (1a00199c <vApplicationGetIdleTaskMemory+0x10>)
1a00198e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001990:	4b03      	ldr	r3, [pc, #12]	; (1a0019a0 <vApplicationGetIdleTaskMemory+0x14>)
1a001992:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001994:	235a      	movs	r3, #90	; 0x5a
1a001996:	6013      	str	r3, [r2, #0]
}
1a001998:	4770      	bx	lr
1a00199a:	bf00      	nop
1a00199c:	10002940 	.word	0x10002940
1a0019a0:	10002238 	.word	0x10002238

1a0019a4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0019a4:	4b03      	ldr	r3, [pc, #12]	; (1a0019b4 <vApplicationGetTimerTaskMemory+0x10>)
1a0019a6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0019a8:	4b03      	ldr	r3, [pc, #12]	; (1a0019b8 <vApplicationGetTimerTaskMemory+0x14>)
1a0019aa:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0019ac:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0019b0:	6013      	str	r3, [r2, #0]
1a0019b2:	4770      	bx	lr
1a0019b4:	100029a0 	.word	0x100029a0
1a0019b8:	100023a0 	.word	0x100023a0

1a0019bc <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a0019bc:	e7fe      	b.n	1a0019bc <vApplicationStackOverflowHook>

1a0019be <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a0019be:	e7fe      	b.n	1a0019be <vApplicationMallocFailedHook>

1a0019c0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0019c0:	4b08      	ldr	r3, [pc, #32]	; (1a0019e4 <prvResetNextTaskUnblockTime+0x24>)
1a0019c2:	681b      	ldr	r3, [r3, #0]
1a0019c4:	681b      	ldr	r3, [r3, #0]
1a0019c6:	b13b      	cbz	r3, 1a0019d8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0019c8:	4b06      	ldr	r3, [pc, #24]	; (1a0019e4 <prvResetNextTaskUnblockTime+0x24>)
1a0019ca:	681b      	ldr	r3, [r3, #0]
1a0019cc:	68db      	ldr	r3, [r3, #12]
1a0019ce:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0019d0:	685a      	ldr	r2, [r3, #4]
1a0019d2:	4b05      	ldr	r3, [pc, #20]	; (1a0019e8 <prvResetNextTaskUnblockTime+0x28>)
1a0019d4:	601a      	str	r2, [r3, #0]
	}
}
1a0019d6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a0019d8:	4b03      	ldr	r3, [pc, #12]	; (1a0019e8 <prvResetNextTaskUnblockTime+0x28>)
1a0019da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0019de:	601a      	str	r2, [r3, #0]
1a0019e0:	4770      	bx	lr
1a0019e2:	bf00      	nop
1a0019e4:	10002a04 	.word	0x10002a04
1a0019e8:	10002ad8 	.word	0x10002ad8

1a0019ec <prvInitialiseNewTask>:
{
1a0019ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0019f0:	4681      	mov	r9, r0
1a0019f2:	460d      	mov	r5, r1
1a0019f4:	4617      	mov	r7, r2
1a0019f6:	469a      	mov	sl, r3
1a0019f8:	9e08      	ldr	r6, [sp, #32]
1a0019fa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0019fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001a00:	0092      	lsls	r2, r2, #2
1a001a02:	21a5      	movs	r1, #165	; 0xa5
1a001a04:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001a06:	f003 f964 	bl	1a004cd2 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001a0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001a0c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001a10:	3a01      	subs	r2, #1
1a001a12:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001a16:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001a1a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001a1c:	2300      	movs	r3, #0
1a001a1e:	2b0f      	cmp	r3, #15
1a001a20:	d807      	bhi.n	1a001a32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001a22:	5ce9      	ldrb	r1, [r5, r3]
1a001a24:	18e2      	adds	r2, r4, r3
1a001a26:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001a2a:	5cea      	ldrb	r2, [r5, r3]
1a001a2c:	b10a      	cbz	r2, 1a001a32 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001a2e:	3301      	adds	r3, #1
1a001a30:	e7f5      	b.n	1a001a1e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001a32:	2300      	movs	r3, #0
1a001a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001a38:	2e06      	cmp	r6, #6
1a001a3a:	d900      	bls.n	1a001a3e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001a3c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001a3e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001a40:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001a42:	2500      	movs	r5, #0
1a001a44:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001a46:	1d20      	adds	r0, r4, #4
1a001a48:	f7ff ff62 	bl	1a001910 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001a4c:	f104 0018 	add.w	r0, r4, #24
1a001a50:	f7ff ff5e 	bl	1a001910 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001a54:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a56:	f1c6 0607 	rsb	r6, r6, #7
1a001a5a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001a5c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001a5e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001a60:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001a64:	4652      	mov	r2, sl
1a001a66:	4649      	mov	r1, r9
1a001a68:	4638      	mov	r0, r7
1a001a6a:	f000 ff5b 	bl	1a002924 <pxPortInitialiseStack>
1a001a6e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001a70:	f1b8 0f00 	cmp.w	r8, #0
1a001a74:	d001      	beq.n	1a001a7a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001a76:	f8c8 4000 	str.w	r4, [r8]
}
1a001a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001a7e:	Address 0x000000001a001a7e is out of bounds.


1a001a80 <prvInitialiseTaskLists>:
{
1a001a80:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001a82:	2400      	movs	r4, #0
1a001a84:	e007      	b.n	1a001a96 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001a86:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001a8a:	0093      	lsls	r3, r2, #2
1a001a8c:	480e      	ldr	r0, [pc, #56]	; (1a001ac8 <prvInitialiseTaskLists+0x48>)
1a001a8e:	4418      	add	r0, r3
1a001a90:	f7ff ff33 	bl	1a0018fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001a94:	3401      	adds	r4, #1
1a001a96:	2c06      	cmp	r4, #6
1a001a98:	d9f5      	bls.n	1a001a86 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001a9a:	4d0c      	ldr	r5, [pc, #48]	; (1a001acc <prvInitialiseTaskLists+0x4c>)
1a001a9c:	4628      	mov	r0, r5
1a001a9e:	f7ff ff2c 	bl	1a0018fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001aa2:	4c0b      	ldr	r4, [pc, #44]	; (1a001ad0 <prvInitialiseTaskLists+0x50>)
1a001aa4:	4620      	mov	r0, r4
1a001aa6:	f7ff ff28 	bl	1a0018fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001aaa:	480a      	ldr	r0, [pc, #40]	; (1a001ad4 <prvInitialiseTaskLists+0x54>)
1a001aac:	f7ff ff25 	bl	1a0018fa <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001ab0:	4809      	ldr	r0, [pc, #36]	; (1a001ad8 <prvInitialiseTaskLists+0x58>)
1a001ab2:	f7ff ff22 	bl	1a0018fa <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001ab6:	4809      	ldr	r0, [pc, #36]	; (1a001adc <prvInitialiseTaskLists+0x5c>)
1a001ab8:	f7ff ff1f 	bl	1a0018fa <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001abc:	4b08      	ldr	r3, [pc, #32]	; (1a001ae0 <prvInitialiseTaskLists+0x60>)
1a001abe:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001ac0:	4b08      	ldr	r3, [pc, #32]	; (1a001ae4 <prvInitialiseTaskLists+0x64>)
1a001ac2:	601c      	str	r4, [r3, #0]
}
1a001ac4:	bd38      	pop	{r3, r4, r5, pc}
1a001ac6:	bf00      	nop
1a001ac8:	10002a0c 	.word	0x10002a0c
1a001acc:	10002ab0 	.word	0x10002ab0
1a001ad0:	10002ac4 	.word	0x10002ac4
1a001ad4:	10002ae0 	.word	0x10002ae0
1a001ad8:	10002b0c 	.word	0x10002b0c
1a001adc:	10002af8 	.word	0x10002af8
1a001ae0:	10002a04 	.word	0x10002a04
1a001ae4:	10002a08 	.word	0x10002a08

1a001ae8 <prvAddNewTaskToReadyList>:
{
1a001ae8:	b510      	push	{r4, lr}
1a001aea:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001aec:	f000 ff42 	bl	1a002974 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001af0:	4a21      	ldr	r2, [pc, #132]	; (1a001b78 <prvAddNewTaskToReadyList+0x90>)
1a001af2:	6813      	ldr	r3, [r2, #0]
1a001af4:	3301      	adds	r3, #1
1a001af6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001af8:	4b20      	ldr	r3, [pc, #128]	; (1a001b7c <prvAddNewTaskToReadyList+0x94>)
1a001afa:	681b      	ldr	r3, [r3, #0]
1a001afc:	b15b      	cbz	r3, 1a001b16 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001afe:	4b20      	ldr	r3, [pc, #128]	; (1a001b80 <prvAddNewTaskToReadyList+0x98>)
1a001b00:	681b      	ldr	r3, [r3, #0]
1a001b02:	b96b      	cbnz	r3, 1a001b20 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001b04:	4b1d      	ldr	r3, [pc, #116]	; (1a001b7c <prvAddNewTaskToReadyList+0x94>)
1a001b06:	681b      	ldr	r3, [r3, #0]
1a001b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001b0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b0c:	429a      	cmp	r2, r3
1a001b0e:	d807      	bhi.n	1a001b20 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001b10:	4b1a      	ldr	r3, [pc, #104]	; (1a001b7c <prvAddNewTaskToReadyList+0x94>)
1a001b12:	601c      	str	r4, [r3, #0]
1a001b14:	e004      	b.n	1a001b20 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001b16:	4b19      	ldr	r3, [pc, #100]	; (1a001b7c <prvAddNewTaskToReadyList+0x94>)
1a001b18:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001b1a:	6813      	ldr	r3, [r2, #0]
1a001b1c:	2b01      	cmp	r3, #1
1a001b1e:	d027      	beq.n	1a001b70 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001b20:	4a18      	ldr	r2, [pc, #96]	; (1a001b84 <prvAddNewTaskToReadyList+0x9c>)
1a001b22:	6813      	ldr	r3, [r2, #0]
1a001b24:	3301      	adds	r3, #1
1a001b26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001b28:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001b2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b2c:	2201      	movs	r2, #1
1a001b2e:	409a      	lsls	r2, r3
1a001b30:	4915      	ldr	r1, [pc, #84]	; (1a001b88 <prvAddNewTaskToReadyList+0xa0>)
1a001b32:	6808      	ldr	r0, [r1, #0]
1a001b34:	4302      	orrs	r2, r0
1a001b36:	600a      	str	r2, [r1, #0]
1a001b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b3c:	009a      	lsls	r2, r3, #2
1a001b3e:	1d21      	adds	r1, r4, #4
1a001b40:	4812      	ldr	r0, [pc, #72]	; (1a001b8c <prvAddNewTaskToReadyList+0xa4>)
1a001b42:	4410      	add	r0, r2
1a001b44:	f7ff fee7 	bl	1a001916 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001b48:	f000 ff36 	bl	1a0029b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001b4c:	4b0c      	ldr	r3, [pc, #48]	; (1a001b80 <prvAddNewTaskToReadyList+0x98>)
1a001b4e:	681b      	ldr	r3, [r3, #0]
1a001b50:	b16b      	cbz	r3, 1a001b6e <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001b52:	4b0a      	ldr	r3, [pc, #40]	; (1a001b7c <prvAddNewTaskToReadyList+0x94>)
1a001b54:	681b      	ldr	r3, [r3, #0]
1a001b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b5a:	429a      	cmp	r2, r3
1a001b5c:	d207      	bcs.n	1a001b6e <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001b5e:	4b0c      	ldr	r3, [pc, #48]	; (1a001b90 <prvAddNewTaskToReadyList+0xa8>)
1a001b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b64:	601a      	str	r2, [r3, #0]
1a001b66:	f3bf 8f4f 	dsb	sy
1a001b6a:	f3bf 8f6f 	isb	sy
}
1a001b6e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001b70:	f7ff ff86 	bl	1a001a80 <prvInitialiseTaskLists>
1a001b74:	e7d4      	b.n	1a001b20 <prvAddNewTaskToReadyList+0x38>
1a001b76:	bf00      	nop
1a001b78:	10002a98 	.word	0x10002a98
1a001b7c:	10002a00 	.word	0x10002a00
1a001b80:	10002af4 	.word	0x10002af4
1a001b84:	10002aa8 	.word	0x10002aa8
1a001b88:	10002aac 	.word	0x10002aac
1a001b8c:	10002a0c 	.word	0x10002a0c
1a001b90:	e000ed04 	.word	0xe000ed04

1a001b94 <prvDeleteTCB>:
	{
1a001b94:	b510      	push	{r4, lr}
1a001b96:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001b98:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001b9c:	b933      	cbnz	r3, 1a001bac <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001b9e:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001ba0:	f7ff fb56 	bl	1a001250 <vPortFree>
				vPortFree( pxTCB );
1a001ba4:	4620      	mov	r0, r4
1a001ba6:	f7ff fb53 	bl	1a001250 <vPortFree>
	}
1a001baa:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001bac:	2b01      	cmp	r3, #1
1a001bae:	d00a      	beq.n	1a001bc6 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001bb0:	2b02      	cmp	r3, #2
1a001bb2:	d0fa      	beq.n	1a001baa <prvDeleteTCB+0x16>
1a001bb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bb8:	f383 8811 	msr	BASEPRI, r3
1a001bbc:	f3bf 8f6f 	isb	sy
1a001bc0:	f3bf 8f4f 	dsb	sy
1a001bc4:	e7fe      	b.n	1a001bc4 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001bc6:	f7ff fb43 	bl	1a001250 <vPortFree>
1a001bca:	e7ee      	b.n	1a001baa <prvDeleteTCB+0x16>

1a001bcc <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001bcc:	4b0f      	ldr	r3, [pc, #60]	; (1a001c0c <prvCheckTasksWaitingTermination+0x40>)
1a001bce:	681b      	ldr	r3, [r3, #0]
1a001bd0:	b1d3      	cbz	r3, 1a001c08 <prvCheckTasksWaitingTermination+0x3c>
{
1a001bd2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001bd4:	f000 fece 	bl	1a002974 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001bd8:	4b0d      	ldr	r3, [pc, #52]	; (1a001c10 <prvCheckTasksWaitingTermination+0x44>)
1a001bda:	68db      	ldr	r3, [r3, #12]
1a001bdc:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001bde:	1d20      	adds	r0, r4, #4
1a001be0:	f7ff febf 	bl	1a001962 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001be4:	4a0b      	ldr	r2, [pc, #44]	; (1a001c14 <prvCheckTasksWaitingTermination+0x48>)
1a001be6:	6813      	ldr	r3, [r2, #0]
1a001be8:	3b01      	subs	r3, #1
1a001bea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001bec:	4a07      	ldr	r2, [pc, #28]	; (1a001c0c <prvCheckTasksWaitingTermination+0x40>)
1a001bee:	6813      	ldr	r3, [r2, #0]
1a001bf0:	3b01      	subs	r3, #1
1a001bf2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001bf4:	f000 fee0 	bl	1a0029b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001bf8:	4620      	mov	r0, r4
1a001bfa:	f7ff ffcb 	bl	1a001b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001bfe:	4b03      	ldr	r3, [pc, #12]	; (1a001c0c <prvCheckTasksWaitingTermination+0x40>)
1a001c00:	681b      	ldr	r3, [r3, #0]
1a001c02:	2b00      	cmp	r3, #0
1a001c04:	d1e6      	bne.n	1a001bd4 <prvCheckTasksWaitingTermination+0x8>
}
1a001c06:	bd10      	pop	{r4, pc}
1a001c08:	4770      	bx	lr
1a001c0a:	bf00      	nop
1a001c0c:	10002a9c 	.word	0x10002a9c
1a001c10:	10002b0c 	.word	0x10002b0c
1a001c14:	10002a98 	.word	0x10002a98

1a001c18 <prvIdleTask>:
{
1a001c18:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001c1a:	f7ff ffd7 	bl	1a001bcc <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001c1e:	4b06      	ldr	r3, [pc, #24]	; (1a001c38 <prvIdleTask+0x20>)
1a001c20:	681b      	ldr	r3, [r3, #0]
1a001c22:	2b01      	cmp	r3, #1
1a001c24:	d9f9      	bls.n	1a001c1a <prvIdleTask+0x2>
				taskYIELD();
1a001c26:	4b05      	ldr	r3, [pc, #20]	; (1a001c3c <prvIdleTask+0x24>)
1a001c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c2c:	601a      	str	r2, [r3, #0]
1a001c2e:	f3bf 8f4f 	dsb	sy
1a001c32:	f3bf 8f6f 	isb	sy
1a001c36:	e7f0      	b.n	1a001c1a <prvIdleTask+0x2>
1a001c38:	10002a0c 	.word	0x10002a0c
1a001c3c:	e000ed04 	.word	0xe000ed04

1a001c40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001c40:	b570      	push	{r4, r5, r6, lr}
1a001c42:	4604      	mov	r4, r0
1a001c44:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001c46:	4b1d      	ldr	r3, [pc, #116]	; (1a001cbc <prvAddCurrentTaskToDelayedList+0x7c>)
1a001c48:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001c4a:	4b1d      	ldr	r3, [pc, #116]	; (1a001cc0 <prvAddCurrentTaskToDelayedList+0x80>)
1a001c4c:	6818      	ldr	r0, [r3, #0]
1a001c4e:	3004      	adds	r0, #4
1a001c50:	f7ff fe87 	bl	1a001962 <uxListRemove>
1a001c54:	b950      	cbnz	r0, 1a001c6c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001c56:	4b1a      	ldr	r3, [pc, #104]	; (1a001cc0 <prvAddCurrentTaskToDelayedList+0x80>)
1a001c58:	681b      	ldr	r3, [r3, #0]
1a001c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001c5c:	2301      	movs	r3, #1
1a001c5e:	fa03 f202 	lsl.w	r2, r3, r2
1a001c62:	4918      	ldr	r1, [pc, #96]	; (1a001cc4 <prvAddCurrentTaskToDelayedList+0x84>)
1a001c64:	680b      	ldr	r3, [r1, #0]
1a001c66:	ea23 0302 	bic.w	r3, r3, r2
1a001c6a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001c6c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001c70:	d013      	beq.n	1a001c9a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001c72:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001c74:	4b12      	ldr	r3, [pc, #72]	; (1a001cc0 <prvAddCurrentTaskToDelayedList+0x80>)
1a001c76:	681b      	ldr	r3, [r3, #0]
1a001c78:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001c7a:	42a5      	cmp	r5, r4
1a001c7c:	d816      	bhi.n	1a001cac <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001c7e:	4b12      	ldr	r3, [pc, #72]	; (1a001cc8 <prvAddCurrentTaskToDelayedList+0x88>)
1a001c80:	6818      	ldr	r0, [r3, #0]
1a001c82:	4b0f      	ldr	r3, [pc, #60]	; (1a001cc0 <prvAddCurrentTaskToDelayedList+0x80>)
1a001c84:	6819      	ldr	r1, [r3, #0]
1a001c86:	3104      	adds	r1, #4
1a001c88:	f7ff fe51 	bl	1a00192e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001c8c:	4b0f      	ldr	r3, [pc, #60]	; (1a001ccc <prvAddCurrentTaskToDelayedList+0x8c>)
1a001c8e:	681b      	ldr	r3, [r3, #0]
1a001c90:	42a3      	cmp	r3, r4
1a001c92:	d912      	bls.n	1a001cba <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001c94:	4b0d      	ldr	r3, [pc, #52]	; (1a001ccc <prvAddCurrentTaskToDelayedList+0x8c>)
1a001c96:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001c98:	e00f      	b.n	1a001cba <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001c9a:	2e00      	cmp	r6, #0
1a001c9c:	d0e9      	beq.n	1a001c72 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001c9e:	4b08      	ldr	r3, [pc, #32]	; (1a001cc0 <prvAddCurrentTaskToDelayedList+0x80>)
1a001ca0:	6819      	ldr	r1, [r3, #0]
1a001ca2:	3104      	adds	r1, #4
1a001ca4:	480a      	ldr	r0, [pc, #40]	; (1a001cd0 <prvAddCurrentTaskToDelayedList+0x90>)
1a001ca6:	f7ff fe36 	bl	1a001916 <vListInsertEnd>
1a001caa:	e006      	b.n	1a001cba <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001cac:	4b09      	ldr	r3, [pc, #36]	; (1a001cd4 <prvAddCurrentTaskToDelayedList+0x94>)
1a001cae:	6818      	ldr	r0, [r3, #0]
1a001cb0:	4b03      	ldr	r3, [pc, #12]	; (1a001cc0 <prvAddCurrentTaskToDelayedList+0x80>)
1a001cb2:	6819      	ldr	r1, [r3, #0]
1a001cb4:	3104      	adds	r1, #4
1a001cb6:	f7ff fe3a 	bl	1a00192e <vListInsert>
}
1a001cba:	bd70      	pop	{r4, r5, r6, pc}
1a001cbc:	10002b20 	.word	0x10002b20
1a001cc0:	10002a00 	.word	0x10002a00
1a001cc4:	10002aac 	.word	0x10002aac
1a001cc8:	10002a04 	.word	0x10002a04
1a001ccc:	10002ad8 	.word	0x10002ad8
1a001cd0:	10002af8 	.word	0x10002af8
1a001cd4:	10002a08 	.word	0x10002a08

1a001cd8 <xTaskCreateStatic>:
	{
1a001cd8:	b570      	push	{r4, r5, r6, lr}
1a001cda:	b086      	sub	sp, #24
1a001cdc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001cde:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001ce0:	b945      	cbnz	r5, 1a001cf4 <xTaskCreateStatic+0x1c>
1a001ce2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ce6:	f383 8811 	msr	BASEPRI, r3
1a001cea:	f3bf 8f6f 	isb	sy
1a001cee:	f3bf 8f4f 	dsb	sy
1a001cf2:	e7fe      	b.n	1a001cf2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001cf4:	b944      	cbnz	r4, 1a001d08 <xTaskCreateStatic+0x30>
1a001cf6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cfa:	f383 8811 	msr	BASEPRI, r3
1a001cfe:	f3bf 8f6f 	isb	sy
1a001d02:	f3bf 8f4f 	dsb	sy
1a001d06:	e7fe      	b.n	1a001d06 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001d08:	2660      	movs	r6, #96	; 0x60
1a001d0a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001d0c:	9e04      	ldr	r6, [sp, #16]
1a001d0e:	2e60      	cmp	r6, #96	; 0x60
1a001d10:	d008      	beq.n	1a001d24 <xTaskCreateStatic+0x4c>
1a001d12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d16:	f383 8811 	msr	BASEPRI, r3
1a001d1a:	f3bf 8f6f 	isb	sy
1a001d1e:	f3bf 8f4f 	dsb	sy
1a001d22:	e7fe      	b.n	1a001d22 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001d24:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001d26:	2502      	movs	r5, #2
1a001d28:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001d2c:	2500      	movs	r5, #0
1a001d2e:	9503      	str	r5, [sp, #12]
1a001d30:	9402      	str	r4, [sp, #8]
1a001d32:	ad05      	add	r5, sp, #20
1a001d34:	9501      	str	r5, [sp, #4]
1a001d36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001d38:	9500      	str	r5, [sp, #0]
1a001d3a:	f7ff fe57 	bl	1a0019ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001d3e:	4620      	mov	r0, r4
1a001d40:	f7ff fed2 	bl	1a001ae8 <prvAddNewTaskToReadyList>
	}
1a001d44:	9805      	ldr	r0, [sp, #20]
1a001d46:	b006      	add	sp, #24
1a001d48:	bd70      	pop	{r4, r5, r6, pc}

1a001d4a <xTaskCreate>:
	{
1a001d4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001d4e:	b085      	sub	sp, #20
1a001d50:	4607      	mov	r7, r0
1a001d52:	4688      	mov	r8, r1
1a001d54:	4615      	mov	r5, r2
1a001d56:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d58:	0090      	lsls	r0, r2, #2
1a001d5a:	f7ff fa41 	bl	1a0011e0 <pvPortMalloc>
			if( pxStack != NULL )
1a001d5e:	b308      	cbz	r0, 1a001da4 <xTaskCreate+0x5a>
1a001d60:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001d62:	2060      	movs	r0, #96	; 0x60
1a001d64:	f7ff fa3c 	bl	1a0011e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001d68:	4604      	mov	r4, r0
1a001d6a:	b1b8      	cbz	r0, 1a001d9c <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001d6c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001d6e:	b1e4      	cbz	r4, 1a001daa <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001d70:	2300      	movs	r3, #0
1a001d72:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001d76:	9303      	str	r3, [sp, #12]
1a001d78:	9402      	str	r4, [sp, #8]
1a001d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001d7c:	9301      	str	r3, [sp, #4]
1a001d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001d80:	9300      	str	r3, [sp, #0]
1a001d82:	464b      	mov	r3, r9
1a001d84:	462a      	mov	r2, r5
1a001d86:	4641      	mov	r1, r8
1a001d88:	4638      	mov	r0, r7
1a001d8a:	f7ff fe2f 	bl	1a0019ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001d8e:	4620      	mov	r0, r4
1a001d90:	f7ff feaa 	bl	1a001ae8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001d94:	2001      	movs	r0, #1
	}
1a001d96:	b005      	add	sp, #20
1a001d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001d9c:	4630      	mov	r0, r6
1a001d9e:	f7ff fa57 	bl	1a001250 <vPortFree>
1a001da2:	e7e4      	b.n	1a001d6e <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001da8:	e7f5      	b.n	1a001d96 <xTaskCreate+0x4c>
1a001daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001dae:	e7f2      	b.n	1a001d96 <xTaskCreate+0x4c>

1a001db0 <vTaskStartScheduler>:
{
1a001db0:	b510      	push	{r4, lr}
1a001db2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001db4:	2400      	movs	r4, #0
1a001db6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001db8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001dba:	aa07      	add	r2, sp, #28
1a001dbc:	a906      	add	r1, sp, #24
1a001dbe:	a805      	add	r0, sp, #20
1a001dc0:	f7ff fde4 	bl	1a00198c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001dc4:	9b05      	ldr	r3, [sp, #20]
1a001dc6:	9302      	str	r3, [sp, #8]
1a001dc8:	9b06      	ldr	r3, [sp, #24]
1a001dca:	9301      	str	r3, [sp, #4]
1a001dcc:	9400      	str	r4, [sp, #0]
1a001dce:	4623      	mov	r3, r4
1a001dd0:	9a07      	ldr	r2, [sp, #28]
1a001dd2:	4917      	ldr	r1, [pc, #92]	; (1a001e30 <vTaskStartScheduler+0x80>)
1a001dd4:	4817      	ldr	r0, [pc, #92]	; (1a001e34 <vTaskStartScheduler+0x84>)
1a001dd6:	f7ff ff7f 	bl	1a001cd8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001dda:	b140      	cbz	r0, 1a001dee <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001ddc:	f000 fb90 	bl	1a002500 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001de0:	2801      	cmp	r0, #1
1a001de2:	d006      	beq.n	1a001df2 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001de4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001de8:	d018      	beq.n	1a001e1c <vTaskStartScheduler+0x6c>
}
1a001dea:	b008      	add	sp, #32
1a001dec:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001dee:	2000      	movs	r0, #0
1a001df0:	e7f6      	b.n	1a001de0 <vTaskStartScheduler+0x30>
1a001df2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001df6:	f383 8811 	msr	BASEPRI, r3
1a001dfa:	f3bf 8f6f 	isb	sy
1a001dfe:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001e02:	4b0d      	ldr	r3, [pc, #52]	; (1a001e38 <vTaskStartScheduler+0x88>)
1a001e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001e08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001e0a:	4b0c      	ldr	r3, [pc, #48]	; (1a001e3c <vTaskStartScheduler+0x8c>)
1a001e0c:	2201      	movs	r2, #1
1a001e0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001e10:	4b0b      	ldr	r3, [pc, #44]	; (1a001e40 <vTaskStartScheduler+0x90>)
1a001e12:	2200      	movs	r2, #0
1a001e14:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001e16:	f000 fe4f 	bl	1a002ab8 <xPortStartScheduler>
1a001e1a:	e7e6      	b.n	1a001dea <vTaskStartScheduler+0x3a>
1a001e1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e20:	f383 8811 	msr	BASEPRI, r3
1a001e24:	f3bf 8f6f 	isb	sy
1a001e28:	f3bf 8f4f 	dsb	sy
1a001e2c:	e7fe      	b.n	1a001e2c <vTaskStartScheduler+0x7c>
1a001e2e:	bf00      	nop
1a001e30:	1a004d74 	.word	0x1a004d74
1a001e34:	1a001c19 	.word	0x1a001c19
1a001e38:	10002ad8 	.word	0x10002ad8
1a001e3c:	10002af4 	.word	0x10002af4
1a001e40:	10002b20 	.word	0x10002b20

1a001e44 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001e44:	4a02      	ldr	r2, [pc, #8]	; (1a001e50 <vTaskSuspendAll+0xc>)
1a001e46:	6813      	ldr	r3, [r2, #0]
1a001e48:	3301      	adds	r3, #1
1a001e4a:	6013      	str	r3, [r2, #0]
}
1a001e4c:	4770      	bx	lr
1a001e4e:	bf00      	nop
1a001e50:	10002aa4 	.word	0x10002aa4

1a001e54 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001e54:	4b01      	ldr	r3, [pc, #4]	; (1a001e5c <xTaskGetTickCount+0x8>)
1a001e56:	6818      	ldr	r0, [r3, #0]
}
1a001e58:	4770      	bx	lr
1a001e5a:	bf00      	nop
1a001e5c:	10002b20 	.word	0x10002b20

1a001e60 <xTaskIncrementTick>:
{
1a001e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001e62:	4b3a      	ldr	r3, [pc, #232]	; (1a001f4c <xTaskIncrementTick+0xec>)
1a001e64:	681b      	ldr	r3, [r3, #0]
1a001e66:	2b00      	cmp	r3, #0
1a001e68:	d164      	bne.n	1a001f34 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001e6a:	4b39      	ldr	r3, [pc, #228]	; (1a001f50 <xTaskIncrementTick+0xf0>)
1a001e6c:	681d      	ldr	r5, [r3, #0]
1a001e6e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001e70:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001e72:	b9c5      	cbnz	r5, 1a001ea6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001e74:	4b37      	ldr	r3, [pc, #220]	; (1a001f54 <xTaskIncrementTick+0xf4>)
1a001e76:	681b      	ldr	r3, [r3, #0]
1a001e78:	681b      	ldr	r3, [r3, #0]
1a001e7a:	b143      	cbz	r3, 1a001e8e <xTaskIncrementTick+0x2e>
1a001e7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e80:	f383 8811 	msr	BASEPRI, r3
1a001e84:	f3bf 8f6f 	isb	sy
1a001e88:	f3bf 8f4f 	dsb	sy
1a001e8c:	e7fe      	b.n	1a001e8c <xTaskIncrementTick+0x2c>
1a001e8e:	4a31      	ldr	r2, [pc, #196]	; (1a001f54 <xTaskIncrementTick+0xf4>)
1a001e90:	6811      	ldr	r1, [r2, #0]
1a001e92:	4b31      	ldr	r3, [pc, #196]	; (1a001f58 <xTaskIncrementTick+0xf8>)
1a001e94:	6818      	ldr	r0, [r3, #0]
1a001e96:	6010      	str	r0, [r2, #0]
1a001e98:	6019      	str	r1, [r3, #0]
1a001e9a:	4a30      	ldr	r2, [pc, #192]	; (1a001f5c <xTaskIncrementTick+0xfc>)
1a001e9c:	6813      	ldr	r3, [r2, #0]
1a001e9e:	3301      	adds	r3, #1
1a001ea0:	6013      	str	r3, [r2, #0]
1a001ea2:	f7ff fd8d 	bl	1a0019c0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001ea6:	4b2e      	ldr	r3, [pc, #184]	; (1a001f60 <xTaskIncrementTick+0x100>)
1a001ea8:	681b      	ldr	r3, [r3, #0]
1a001eaa:	42ab      	cmp	r3, r5
1a001eac:	d938      	bls.n	1a001f20 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001eae:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001eb0:	4b2c      	ldr	r3, [pc, #176]	; (1a001f64 <xTaskIncrementTick+0x104>)
1a001eb2:	681b      	ldr	r3, [r3, #0]
1a001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001eb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001eba:	009a      	lsls	r2, r3, #2
1a001ebc:	4b2a      	ldr	r3, [pc, #168]	; (1a001f68 <xTaskIncrementTick+0x108>)
1a001ebe:	589b      	ldr	r3, [r3, r2]
1a001ec0:	2b01      	cmp	r3, #1
1a001ec2:	d93c      	bls.n	1a001f3e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001ec4:	2401      	movs	r4, #1
1a001ec6:	e03a      	b.n	1a001f3e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001ec8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001eca:	4b22      	ldr	r3, [pc, #136]	; (1a001f54 <xTaskIncrementTick+0xf4>)
1a001ecc:	681b      	ldr	r3, [r3, #0]
1a001ece:	681b      	ldr	r3, [r3, #0]
1a001ed0:	b343      	cbz	r3, 1a001f24 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001ed2:	4b20      	ldr	r3, [pc, #128]	; (1a001f54 <xTaskIncrementTick+0xf4>)
1a001ed4:	681b      	ldr	r3, [r3, #0]
1a001ed6:	68db      	ldr	r3, [r3, #12]
1a001ed8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001eda:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001edc:	429d      	cmp	r5, r3
1a001ede:	d326      	bcc.n	1a001f2e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001ee0:	1d37      	adds	r7, r6, #4
1a001ee2:	4638      	mov	r0, r7
1a001ee4:	f7ff fd3d 	bl	1a001962 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001ee8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001eea:	b11b      	cbz	r3, 1a001ef4 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001eec:	f106 0018 	add.w	r0, r6, #24
1a001ef0:	f7ff fd37 	bl	1a001962 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001ef4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001ef6:	2201      	movs	r2, #1
1a001ef8:	409a      	lsls	r2, r3
1a001efa:	491c      	ldr	r1, [pc, #112]	; (1a001f6c <xTaskIncrementTick+0x10c>)
1a001efc:	6808      	ldr	r0, [r1, #0]
1a001efe:	4302      	orrs	r2, r0
1a001f00:	600a      	str	r2, [r1, #0]
1a001f02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f06:	009a      	lsls	r2, r3, #2
1a001f08:	4639      	mov	r1, r7
1a001f0a:	4817      	ldr	r0, [pc, #92]	; (1a001f68 <xTaskIncrementTick+0x108>)
1a001f0c:	4410      	add	r0, r2
1a001f0e:	f7ff fd02 	bl	1a001916 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001f12:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001f14:	4b13      	ldr	r3, [pc, #76]	; (1a001f64 <xTaskIncrementTick+0x104>)
1a001f16:	681b      	ldr	r3, [r3, #0]
1a001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f1a:	429a      	cmp	r2, r3
1a001f1c:	d2d4      	bcs.n	1a001ec8 <xTaskIncrementTick+0x68>
1a001f1e:	e7d4      	b.n	1a001eca <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001f20:	2400      	movs	r4, #0
1a001f22:	e7d2      	b.n	1a001eca <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f24:	4b0e      	ldr	r3, [pc, #56]	; (1a001f60 <xTaskIncrementTick+0x100>)
1a001f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001f2a:	601a      	str	r2, [r3, #0]
					break;
1a001f2c:	e7c0      	b.n	1a001eb0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001f2e:	4a0c      	ldr	r2, [pc, #48]	; (1a001f60 <xTaskIncrementTick+0x100>)
1a001f30:	6013      	str	r3, [r2, #0]
						break;
1a001f32:	e7bd      	b.n	1a001eb0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001f34:	4a0e      	ldr	r2, [pc, #56]	; (1a001f70 <xTaskIncrementTick+0x110>)
1a001f36:	6813      	ldr	r3, [r2, #0]
1a001f38:	3301      	adds	r3, #1
1a001f3a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001f3c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001f3e:	4b0d      	ldr	r3, [pc, #52]	; (1a001f74 <xTaskIncrementTick+0x114>)
1a001f40:	681b      	ldr	r3, [r3, #0]
1a001f42:	b103      	cbz	r3, 1a001f46 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001f44:	2401      	movs	r4, #1
}
1a001f46:	4620      	mov	r0, r4
1a001f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001f4a:	bf00      	nop
1a001f4c:	10002aa4 	.word	0x10002aa4
1a001f50:	10002b20 	.word	0x10002b20
1a001f54:	10002a04 	.word	0x10002a04
1a001f58:	10002a08 	.word	0x10002a08
1a001f5c:	10002adc 	.word	0x10002adc
1a001f60:	10002ad8 	.word	0x10002ad8
1a001f64:	10002a00 	.word	0x10002a00
1a001f68:	10002a0c 	.word	0x10002a0c
1a001f6c:	10002aac 	.word	0x10002aac
1a001f70:	10002aa0 	.word	0x10002aa0
1a001f74:	10002b24 	.word	0x10002b24

1a001f78 <xTaskResumeAll>:
{
1a001f78:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001f7a:	4b33      	ldr	r3, [pc, #204]	; (1a002048 <xTaskResumeAll+0xd0>)
1a001f7c:	681b      	ldr	r3, [r3, #0]
1a001f7e:	b943      	cbnz	r3, 1a001f92 <xTaskResumeAll+0x1a>
1a001f80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f84:	f383 8811 	msr	BASEPRI, r3
1a001f88:	f3bf 8f6f 	isb	sy
1a001f8c:	f3bf 8f4f 	dsb	sy
1a001f90:	e7fe      	b.n	1a001f90 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001f92:	f000 fcef 	bl	1a002974 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001f96:	4b2c      	ldr	r3, [pc, #176]	; (1a002048 <xTaskResumeAll+0xd0>)
1a001f98:	681a      	ldr	r2, [r3, #0]
1a001f9a:	3a01      	subs	r2, #1
1a001f9c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001f9e:	681b      	ldr	r3, [r3, #0]
1a001fa0:	2b00      	cmp	r3, #0
1a001fa2:	d14d      	bne.n	1a002040 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001fa4:	4b29      	ldr	r3, [pc, #164]	; (1a00204c <xTaskResumeAll+0xd4>)
1a001fa6:	681b      	ldr	r3, [r3, #0]
1a001fa8:	b923      	cbnz	r3, 1a001fb4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001faa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001fac:	f000 fd04 	bl	1a0029b8 <vPortExitCritical>
}
1a001fb0:	4620      	mov	r0, r4
1a001fb2:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001fb4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001fb6:	4b26      	ldr	r3, [pc, #152]	; (1a002050 <xTaskResumeAll+0xd8>)
1a001fb8:	681b      	ldr	r3, [r3, #0]
1a001fba:	b31b      	cbz	r3, 1a002004 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001fbc:	4b24      	ldr	r3, [pc, #144]	; (1a002050 <xTaskResumeAll+0xd8>)
1a001fbe:	68db      	ldr	r3, [r3, #12]
1a001fc0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001fc2:	f104 0018 	add.w	r0, r4, #24
1a001fc6:	f7ff fccc 	bl	1a001962 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001fca:	1d25      	adds	r5, r4, #4
1a001fcc:	4628      	mov	r0, r5
1a001fce:	f7ff fcc8 	bl	1a001962 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001fd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001fd4:	2201      	movs	r2, #1
1a001fd6:	409a      	lsls	r2, r3
1a001fd8:	491e      	ldr	r1, [pc, #120]	; (1a002054 <xTaskResumeAll+0xdc>)
1a001fda:	6808      	ldr	r0, [r1, #0]
1a001fdc:	4302      	orrs	r2, r0
1a001fde:	600a      	str	r2, [r1, #0]
1a001fe0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001fe4:	009a      	lsls	r2, r3, #2
1a001fe6:	4629      	mov	r1, r5
1a001fe8:	481b      	ldr	r0, [pc, #108]	; (1a002058 <xTaskResumeAll+0xe0>)
1a001fea:	4410      	add	r0, r2
1a001fec:	f7ff fc93 	bl	1a001916 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001ff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001ff2:	4b1a      	ldr	r3, [pc, #104]	; (1a00205c <xTaskResumeAll+0xe4>)
1a001ff4:	681b      	ldr	r3, [r3, #0]
1a001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001ff8:	429a      	cmp	r2, r3
1a001ffa:	d3dc      	bcc.n	1a001fb6 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001ffc:	4b18      	ldr	r3, [pc, #96]	; (1a002060 <xTaskResumeAll+0xe8>)
1a001ffe:	2201      	movs	r2, #1
1a002000:	601a      	str	r2, [r3, #0]
1a002002:	e7d8      	b.n	1a001fb6 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a002004:	b10c      	cbz	r4, 1a00200a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a002006:	f7ff fcdb 	bl	1a0019c0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00200a:	4b16      	ldr	r3, [pc, #88]	; (1a002064 <xTaskResumeAll+0xec>)
1a00200c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00200e:	b154      	cbz	r4, 1a002026 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a002010:	f7ff ff26 	bl	1a001e60 <xTaskIncrementTick>
1a002014:	b110      	cbz	r0, 1a00201c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a002016:	4b12      	ldr	r3, [pc, #72]	; (1a002060 <xTaskResumeAll+0xe8>)
1a002018:	2201      	movs	r2, #1
1a00201a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00201c:	3c01      	subs	r4, #1
1a00201e:	d1f7      	bne.n	1a002010 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a002020:	4b10      	ldr	r3, [pc, #64]	; (1a002064 <xTaskResumeAll+0xec>)
1a002022:	2200      	movs	r2, #0
1a002024:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a002026:	4b0e      	ldr	r3, [pc, #56]	; (1a002060 <xTaskResumeAll+0xe8>)
1a002028:	681b      	ldr	r3, [r3, #0]
1a00202a:	b15b      	cbz	r3, 1a002044 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a00202c:	4b0e      	ldr	r3, [pc, #56]	; (1a002068 <xTaskResumeAll+0xf0>)
1a00202e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002032:	601a      	str	r2, [r3, #0]
1a002034:	f3bf 8f4f 	dsb	sy
1a002038:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a00203c:	2401      	movs	r4, #1
1a00203e:	e7b5      	b.n	1a001fac <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a002040:	2400      	movs	r4, #0
1a002042:	e7b3      	b.n	1a001fac <xTaskResumeAll+0x34>
1a002044:	2400      	movs	r4, #0
1a002046:	e7b1      	b.n	1a001fac <xTaskResumeAll+0x34>
1a002048:	10002aa4 	.word	0x10002aa4
1a00204c:	10002a98 	.word	0x10002a98
1a002050:	10002ae0 	.word	0x10002ae0
1a002054:	10002aac 	.word	0x10002aac
1a002058:	10002a0c 	.word	0x10002a0c
1a00205c:	10002a00 	.word	0x10002a00
1a002060:	10002b24 	.word	0x10002b24
1a002064:	10002aa0 	.word	0x10002aa0
1a002068:	e000ed04 	.word	0xe000ed04

1a00206c <vTaskDelay>:
	{
1a00206c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00206e:	b1a8      	cbz	r0, 1a00209c <vTaskDelay+0x30>
1a002070:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a002072:	4b0f      	ldr	r3, [pc, #60]	; (1a0020b0 <vTaskDelay+0x44>)
1a002074:	681b      	ldr	r3, [r3, #0]
1a002076:	b143      	cbz	r3, 1a00208a <vTaskDelay+0x1e>
1a002078:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00207c:	f383 8811 	msr	BASEPRI, r3
1a002080:	f3bf 8f6f 	isb	sy
1a002084:	f3bf 8f4f 	dsb	sy
1a002088:	e7fe      	b.n	1a002088 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a00208a:	f7ff fedb 	bl	1a001e44 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a00208e:	2100      	movs	r1, #0
1a002090:	4620      	mov	r0, r4
1a002092:	f7ff fdd5 	bl	1a001c40 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a002096:	f7ff ff6f 	bl	1a001f78 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00209a:	b938      	cbnz	r0, 1a0020ac <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a00209c:	4b05      	ldr	r3, [pc, #20]	; (1a0020b4 <vTaskDelay+0x48>)
1a00209e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0020a2:	601a      	str	r2, [r3, #0]
1a0020a4:	f3bf 8f4f 	dsb	sy
1a0020a8:	f3bf 8f6f 	isb	sy
	}
1a0020ac:	bd10      	pop	{r4, pc}
1a0020ae:	bf00      	nop
1a0020b0:	10002aa4 	.word	0x10002aa4
1a0020b4:	e000ed04 	.word	0xe000ed04

1a0020b8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0020b8:	4b2c      	ldr	r3, [pc, #176]	; (1a00216c <vTaskSwitchContext+0xb4>)
1a0020ba:	681b      	ldr	r3, [r3, #0]
1a0020bc:	b11b      	cbz	r3, 1a0020c6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0020be:	4b2c      	ldr	r3, [pc, #176]	; (1a002170 <vTaskSwitchContext+0xb8>)
1a0020c0:	2201      	movs	r2, #1
1a0020c2:	601a      	str	r2, [r3, #0]
1a0020c4:	4770      	bx	lr
{
1a0020c6:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0020c8:	4b29      	ldr	r3, [pc, #164]	; (1a002170 <vTaskSwitchContext+0xb8>)
1a0020ca:	2200      	movs	r2, #0
1a0020cc:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0020ce:	4b29      	ldr	r3, [pc, #164]	; (1a002174 <vTaskSwitchContext+0xbc>)
1a0020d0:	681b      	ldr	r3, [r3, #0]
1a0020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0020d4:	681a      	ldr	r2, [r3, #0]
1a0020d6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0020da:	d103      	bne.n	1a0020e4 <vTaskSwitchContext+0x2c>
1a0020dc:	685a      	ldr	r2, [r3, #4]
1a0020de:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0020e2:	d01b      	beq.n	1a00211c <vTaskSwitchContext+0x64>
1a0020e4:	4b23      	ldr	r3, [pc, #140]	; (1a002174 <vTaskSwitchContext+0xbc>)
1a0020e6:	6818      	ldr	r0, [r3, #0]
1a0020e8:	6819      	ldr	r1, [r3, #0]
1a0020ea:	3134      	adds	r1, #52	; 0x34
1a0020ec:	f7ff fc66 	bl	1a0019bc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0020f0:	4b21      	ldr	r3, [pc, #132]	; (1a002178 <vTaskSwitchContext+0xc0>)
1a0020f2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0020f4:	fab3 f383 	clz	r3, r3
1a0020f8:	b2db      	uxtb	r3, r3
1a0020fa:	f1c3 031f 	rsb	r3, r3, #31
1a0020fe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002102:	008a      	lsls	r2, r1, #2
1a002104:	491d      	ldr	r1, [pc, #116]	; (1a00217c <vTaskSwitchContext+0xc4>)
1a002106:	588a      	ldr	r2, [r1, r2]
1a002108:	b98a      	cbnz	r2, 1a00212e <vTaskSwitchContext+0x76>
	__asm volatile
1a00210a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00210e:	f383 8811 	msr	BASEPRI, r3
1a002112:	f3bf 8f6f 	isb	sy
1a002116:	f3bf 8f4f 	dsb	sy
1a00211a:	e7fe      	b.n	1a00211a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a00211c:	689a      	ldr	r2, [r3, #8]
1a00211e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002122:	d1df      	bne.n	1a0020e4 <vTaskSwitchContext+0x2c>
1a002124:	68db      	ldr	r3, [r3, #12]
1a002126:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00212a:	d1db      	bne.n	1a0020e4 <vTaskSwitchContext+0x2c>
1a00212c:	e7e0      	b.n	1a0020f0 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00212e:	4813      	ldr	r0, [pc, #76]	; (1a00217c <vTaskSwitchContext+0xc4>)
1a002130:	009a      	lsls	r2, r3, #2
1a002132:	18d4      	adds	r4, r2, r3
1a002134:	00a1      	lsls	r1, r4, #2
1a002136:	4401      	add	r1, r0
1a002138:	684c      	ldr	r4, [r1, #4]
1a00213a:	6864      	ldr	r4, [r4, #4]
1a00213c:	604c      	str	r4, [r1, #4]
1a00213e:	441a      	add	r2, r3
1a002140:	0091      	lsls	r1, r2, #2
1a002142:	3108      	adds	r1, #8
1a002144:	4408      	add	r0, r1
1a002146:	4284      	cmp	r4, r0
1a002148:	d009      	beq.n	1a00215e <vTaskSwitchContext+0xa6>
1a00214a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00214e:	009a      	lsls	r2, r3, #2
1a002150:	4b0a      	ldr	r3, [pc, #40]	; (1a00217c <vTaskSwitchContext+0xc4>)
1a002152:	4413      	add	r3, r2
1a002154:	685b      	ldr	r3, [r3, #4]
1a002156:	68da      	ldr	r2, [r3, #12]
1a002158:	4b06      	ldr	r3, [pc, #24]	; (1a002174 <vTaskSwitchContext+0xbc>)
1a00215a:	601a      	str	r2, [r3, #0]
}
1a00215c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00215e:	6861      	ldr	r1, [r4, #4]
1a002160:	4806      	ldr	r0, [pc, #24]	; (1a00217c <vTaskSwitchContext+0xc4>)
1a002162:	2214      	movs	r2, #20
1a002164:	fb02 0203 	mla	r2, r2, r3, r0
1a002168:	6051      	str	r1, [r2, #4]
1a00216a:	e7ee      	b.n	1a00214a <vTaskSwitchContext+0x92>
1a00216c:	10002aa4 	.word	0x10002aa4
1a002170:	10002b24 	.word	0x10002b24
1a002174:	10002a00 	.word	0x10002a00
1a002178:	10002aac 	.word	0x10002aac
1a00217c:	10002a0c 	.word	0x10002a0c

1a002180 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a002180:	b940      	cbnz	r0, 1a002194 <vTaskPlaceOnEventList+0x14>
1a002182:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002186:	f383 8811 	msr	BASEPRI, r3
1a00218a:	f3bf 8f6f 	isb	sy
1a00218e:	f3bf 8f4f 	dsb	sy
1a002192:	e7fe      	b.n	1a002192 <vTaskPlaceOnEventList+0x12>
{
1a002194:	b510      	push	{r4, lr}
1a002196:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002198:	4b04      	ldr	r3, [pc, #16]	; (1a0021ac <vTaskPlaceOnEventList+0x2c>)
1a00219a:	6819      	ldr	r1, [r3, #0]
1a00219c:	3118      	adds	r1, #24
1a00219e:	f7ff fbc6 	bl	1a00192e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0021a2:	2101      	movs	r1, #1
1a0021a4:	4620      	mov	r0, r4
1a0021a6:	f7ff fd4b 	bl	1a001c40 <prvAddCurrentTaskToDelayedList>
}
1a0021aa:	bd10      	pop	{r4, pc}
1a0021ac:	10002a00 	.word	0x10002a00

1a0021b0 <vTaskPlaceOnEventListRestricted>:
	{
1a0021b0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0021b2:	b940      	cbnz	r0, 1a0021c6 <vTaskPlaceOnEventListRestricted+0x16>
1a0021b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021b8:	f383 8811 	msr	BASEPRI, r3
1a0021bc:	f3bf 8f6f 	isb	sy
1a0021c0:	f3bf 8f4f 	dsb	sy
1a0021c4:	e7fe      	b.n	1a0021c4 <vTaskPlaceOnEventListRestricted+0x14>
1a0021c6:	460c      	mov	r4, r1
1a0021c8:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0021ca:	4a06      	ldr	r2, [pc, #24]	; (1a0021e4 <vTaskPlaceOnEventListRestricted+0x34>)
1a0021cc:	6811      	ldr	r1, [r2, #0]
1a0021ce:	3118      	adds	r1, #24
1a0021d0:	f7ff fba1 	bl	1a001916 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0021d4:	b10d      	cbz	r5, 1a0021da <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a0021d6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0021da:	4629      	mov	r1, r5
1a0021dc:	4620      	mov	r0, r4
1a0021de:	f7ff fd2f 	bl	1a001c40 <prvAddCurrentTaskToDelayedList>
	}
1a0021e2:	bd38      	pop	{r3, r4, r5, pc}
1a0021e4:	10002a00 	.word	0x10002a00

1a0021e8 <xTaskRemoveFromEventList>:
{
1a0021e8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0021ea:	68c3      	ldr	r3, [r0, #12]
1a0021ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0021ee:	b944      	cbnz	r4, 1a002202 <xTaskRemoveFromEventList+0x1a>
1a0021f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021f4:	f383 8811 	msr	BASEPRI, r3
1a0021f8:	f3bf 8f6f 	isb	sy
1a0021fc:	f3bf 8f4f 	dsb	sy
1a002200:	e7fe      	b.n	1a002200 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002202:	f104 0518 	add.w	r5, r4, #24
1a002206:	4628      	mov	r0, r5
1a002208:	f7ff fbab 	bl	1a001962 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00220c:	4b13      	ldr	r3, [pc, #76]	; (1a00225c <xTaskRemoveFromEventList+0x74>)
1a00220e:	681b      	ldr	r3, [r3, #0]
1a002210:	b9e3      	cbnz	r3, 1a00224c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002212:	1d25      	adds	r5, r4, #4
1a002214:	4628      	mov	r0, r5
1a002216:	f7ff fba4 	bl	1a001962 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00221a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00221c:	2201      	movs	r2, #1
1a00221e:	409a      	lsls	r2, r3
1a002220:	490f      	ldr	r1, [pc, #60]	; (1a002260 <xTaskRemoveFromEventList+0x78>)
1a002222:	6808      	ldr	r0, [r1, #0]
1a002224:	4302      	orrs	r2, r0
1a002226:	600a      	str	r2, [r1, #0]
1a002228:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00222c:	009a      	lsls	r2, r3, #2
1a00222e:	4629      	mov	r1, r5
1a002230:	480c      	ldr	r0, [pc, #48]	; (1a002264 <xTaskRemoveFromEventList+0x7c>)
1a002232:	4410      	add	r0, r2
1a002234:	f7ff fb6f 	bl	1a001916 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a002238:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00223a:	4b0b      	ldr	r3, [pc, #44]	; (1a002268 <xTaskRemoveFromEventList+0x80>)
1a00223c:	681b      	ldr	r3, [r3, #0]
1a00223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002240:	429a      	cmp	r2, r3
1a002242:	d908      	bls.n	1a002256 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002244:	2001      	movs	r0, #1
1a002246:	4b09      	ldr	r3, [pc, #36]	; (1a00226c <xTaskRemoveFromEventList+0x84>)
1a002248:	6018      	str	r0, [r3, #0]
}
1a00224a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a00224c:	4629      	mov	r1, r5
1a00224e:	4808      	ldr	r0, [pc, #32]	; (1a002270 <xTaskRemoveFromEventList+0x88>)
1a002250:	f7ff fb61 	bl	1a001916 <vListInsertEnd>
1a002254:	e7f0      	b.n	1a002238 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a002256:	2000      	movs	r0, #0
	return xReturn;
1a002258:	e7f7      	b.n	1a00224a <xTaskRemoveFromEventList+0x62>
1a00225a:	bf00      	nop
1a00225c:	10002aa4 	.word	0x10002aa4
1a002260:	10002aac 	.word	0x10002aac
1a002264:	10002a0c 	.word	0x10002a0c
1a002268:	10002a00 	.word	0x10002a00
1a00226c:	10002b24 	.word	0x10002b24
1a002270:	10002ae0 	.word	0x10002ae0

1a002274 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a002274:	4b03      	ldr	r3, [pc, #12]	; (1a002284 <vTaskInternalSetTimeOutState+0x10>)
1a002276:	681b      	ldr	r3, [r3, #0]
1a002278:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00227a:	4b03      	ldr	r3, [pc, #12]	; (1a002288 <vTaskInternalSetTimeOutState+0x14>)
1a00227c:	681b      	ldr	r3, [r3, #0]
1a00227e:	6043      	str	r3, [r0, #4]
}
1a002280:	4770      	bx	lr
1a002282:	bf00      	nop
1a002284:	10002adc 	.word	0x10002adc
1a002288:	10002b20 	.word	0x10002b20

1a00228c <xTaskCheckForTimeOut>:
{
1a00228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a00228e:	b150      	cbz	r0, 1a0022a6 <xTaskCheckForTimeOut+0x1a>
1a002290:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a002292:	b989      	cbnz	r1, 1a0022b8 <xTaskCheckForTimeOut+0x2c>
1a002294:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002298:	f383 8811 	msr	BASEPRI, r3
1a00229c:	f3bf 8f6f 	isb	sy
1a0022a0:	f3bf 8f4f 	dsb	sy
1a0022a4:	e7fe      	b.n	1a0022a4 <xTaskCheckForTimeOut+0x18>
1a0022a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022aa:	f383 8811 	msr	BASEPRI, r3
1a0022ae:	f3bf 8f6f 	isb	sy
1a0022b2:	f3bf 8f4f 	dsb	sy
1a0022b6:	e7fe      	b.n	1a0022b6 <xTaskCheckForTimeOut+0x2a>
1a0022b8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0022ba:	f000 fb5b 	bl	1a002974 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0022be:	4b11      	ldr	r3, [pc, #68]	; (1a002304 <xTaskCheckForTimeOut+0x78>)
1a0022c0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0022c2:	6868      	ldr	r0, [r5, #4]
1a0022c4:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0022c6:	6823      	ldr	r3, [r4, #0]
1a0022c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0022cc:	d016      	beq.n	1a0022fc <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0022ce:	682f      	ldr	r7, [r5, #0]
1a0022d0:	4e0d      	ldr	r6, [pc, #52]	; (1a002308 <xTaskCheckForTimeOut+0x7c>)
1a0022d2:	6836      	ldr	r6, [r6, #0]
1a0022d4:	42b7      	cmp	r7, r6
1a0022d6:	d001      	beq.n	1a0022dc <xTaskCheckForTimeOut+0x50>
1a0022d8:	4288      	cmp	r0, r1
1a0022da:	d911      	bls.n	1a002300 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0022dc:	4293      	cmp	r3, r2
1a0022de:	d803      	bhi.n	1a0022e8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0022e0:	2300      	movs	r3, #0
1a0022e2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0022e4:	2401      	movs	r4, #1
1a0022e6:	e005      	b.n	1a0022f4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a0022e8:	1a9b      	subs	r3, r3, r2
1a0022ea:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0022ec:	4628      	mov	r0, r5
1a0022ee:	f7ff ffc1 	bl	1a002274 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0022f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0022f4:	f000 fb60 	bl	1a0029b8 <vPortExitCritical>
}
1a0022f8:	4620      	mov	r0, r4
1a0022fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0022fc:	2400      	movs	r4, #0
1a0022fe:	e7f9      	b.n	1a0022f4 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a002300:	2401      	movs	r4, #1
1a002302:	e7f7      	b.n	1a0022f4 <xTaskCheckForTimeOut+0x68>
1a002304:	10002b20 	.word	0x10002b20
1a002308:	10002adc 	.word	0x10002adc

1a00230c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a00230c:	4b01      	ldr	r3, [pc, #4]	; (1a002314 <vTaskMissedYield+0x8>)
1a00230e:	2201      	movs	r2, #1
1a002310:	601a      	str	r2, [r3, #0]
}
1a002312:	4770      	bx	lr
1a002314:	10002b24 	.word	0x10002b24

1a002318 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a002318:	4b05      	ldr	r3, [pc, #20]	; (1a002330 <xTaskGetSchedulerState+0x18>)
1a00231a:	681b      	ldr	r3, [r3, #0]
1a00231c:	b133      	cbz	r3, 1a00232c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00231e:	4b05      	ldr	r3, [pc, #20]	; (1a002334 <xTaskGetSchedulerState+0x1c>)
1a002320:	681b      	ldr	r3, [r3, #0]
1a002322:	b10b      	cbz	r3, 1a002328 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002324:	2000      	movs	r0, #0
	}
1a002326:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a002328:	2002      	movs	r0, #2
1a00232a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a00232c:	2001      	movs	r0, #1
1a00232e:	4770      	bx	lr
1a002330:	10002af4 	.word	0x10002af4
1a002334:	10002aa4 	.word	0x10002aa4

1a002338 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002338:	2800      	cmp	r0, #0
1a00233a:	d049      	beq.n	1a0023d0 <xTaskPriorityDisinherit+0x98>
	{
1a00233c:	b538      	push	{r3, r4, r5, lr}
1a00233e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002340:	4a26      	ldr	r2, [pc, #152]	; (1a0023dc <xTaskPriorityDisinherit+0xa4>)
1a002342:	6812      	ldr	r2, [r2, #0]
1a002344:	4282      	cmp	r2, r0
1a002346:	d008      	beq.n	1a00235a <xTaskPriorityDisinherit+0x22>
1a002348:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00234c:	f383 8811 	msr	BASEPRI, r3
1a002350:	f3bf 8f6f 	isb	sy
1a002354:	f3bf 8f4f 	dsb	sy
1a002358:	e7fe      	b.n	1a002358 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00235a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a00235c:	b942      	cbnz	r2, 1a002370 <xTaskPriorityDisinherit+0x38>
1a00235e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002362:	f383 8811 	msr	BASEPRI, r3
1a002366:	f3bf 8f6f 	isb	sy
1a00236a:	f3bf 8f4f 	dsb	sy
1a00236e:	e7fe      	b.n	1a00236e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a002370:	3a01      	subs	r2, #1
1a002372:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002374:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a002376:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a002378:	4288      	cmp	r0, r1
1a00237a:	d02b      	beq.n	1a0023d4 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a00237c:	bb62      	cbnz	r2, 1a0023d8 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00237e:	1d25      	adds	r5, r4, #4
1a002380:	4628      	mov	r0, r5
1a002382:	f7ff faee 	bl	1a001962 <uxListRemove>
1a002386:	b970      	cbnz	r0, 1a0023a6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002388:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00238a:	2314      	movs	r3, #20
1a00238c:	fb03 f302 	mul.w	r3, r3, r2
1a002390:	4913      	ldr	r1, [pc, #76]	; (1a0023e0 <xTaskPriorityDisinherit+0xa8>)
1a002392:	58cb      	ldr	r3, [r1, r3]
1a002394:	b93b      	cbnz	r3, 1a0023a6 <xTaskPriorityDisinherit+0x6e>
1a002396:	2301      	movs	r3, #1
1a002398:	fa03 f202 	lsl.w	r2, r3, r2
1a00239c:	4911      	ldr	r1, [pc, #68]	; (1a0023e4 <xTaskPriorityDisinherit+0xac>)
1a00239e:	680b      	ldr	r3, [r1, #0]
1a0023a0:	ea23 0302 	bic.w	r3, r3, r2
1a0023a4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0023a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0023a8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0023aa:	f1c3 0207 	rsb	r2, r3, #7
1a0023ae:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0023b0:	2401      	movs	r4, #1
1a0023b2:	fa04 f203 	lsl.w	r2, r4, r3
1a0023b6:	490b      	ldr	r1, [pc, #44]	; (1a0023e4 <xTaskPriorityDisinherit+0xac>)
1a0023b8:	6808      	ldr	r0, [r1, #0]
1a0023ba:	4302      	orrs	r2, r0
1a0023bc:	600a      	str	r2, [r1, #0]
1a0023be:	4629      	mov	r1, r5
1a0023c0:	4a07      	ldr	r2, [pc, #28]	; (1a0023e0 <xTaskPriorityDisinherit+0xa8>)
1a0023c2:	2014      	movs	r0, #20
1a0023c4:	fb00 2003 	mla	r0, r0, r3, r2
1a0023c8:	f7ff faa5 	bl	1a001916 <vListInsertEnd>
					xReturn = pdTRUE;
1a0023cc:	4620      	mov	r0, r4
	}
1a0023ce:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0023d0:	2000      	movs	r0, #0
	}
1a0023d2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0023d4:	2000      	movs	r0, #0
1a0023d6:	e7fa      	b.n	1a0023ce <xTaskPriorityDisinherit+0x96>
1a0023d8:	2000      	movs	r0, #0
		return xReturn;
1a0023da:	e7f8      	b.n	1a0023ce <xTaskPriorityDisinherit+0x96>
1a0023dc:	10002a00 	.word	0x10002a00
1a0023e0:	10002a0c 	.word	0x10002a0c
1a0023e4:	10002aac 	.word	0x10002aac

1a0023e8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0023e8:	4b06      	ldr	r3, [pc, #24]	; (1a002404 <prvGetNextExpireTime+0x1c>)
1a0023ea:	681a      	ldr	r2, [r3, #0]
1a0023ec:	6813      	ldr	r3, [r2, #0]
1a0023ee:	fab3 f383 	clz	r3, r3
1a0023f2:	095b      	lsrs	r3, r3, #5
1a0023f4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0023f6:	b913      	cbnz	r3, 1a0023fe <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0023f8:	68d3      	ldr	r3, [r2, #12]
1a0023fa:	6818      	ldr	r0, [r3, #0]
1a0023fc:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0023fe:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002400:	4770      	bx	lr
1a002402:	bf00      	nop
1a002404:	10002b28 	.word	0x10002b28

1a002408 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002408:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00240a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00240c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00240e:	4291      	cmp	r1, r2
1a002410:	d80c      	bhi.n	1a00242c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002412:	1ad2      	subs	r2, r2, r3
1a002414:	6983      	ldr	r3, [r0, #24]
1a002416:	429a      	cmp	r2, r3
1a002418:	d301      	bcc.n	1a00241e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00241a:	2001      	movs	r0, #1
1a00241c:	e010      	b.n	1a002440 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00241e:	1d01      	adds	r1, r0, #4
1a002420:	4b09      	ldr	r3, [pc, #36]	; (1a002448 <prvInsertTimerInActiveList+0x40>)
1a002422:	6818      	ldr	r0, [r3, #0]
1a002424:	f7ff fa83 	bl	1a00192e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002428:	2000      	movs	r0, #0
1a00242a:	e009      	b.n	1a002440 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00242c:	429a      	cmp	r2, r3
1a00242e:	d201      	bcs.n	1a002434 <prvInsertTimerInActiveList+0x2c>
1a002430:	4299      	cmp	r1, r3
1a002432:	d206      	bcs.n	1a002442 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002434:	1d01      	adds	r1, r0, #4
1a002436:	4b05      	ldr	r3, [pc, #20]	; (1a00244c <prvInsertTimerInActiveList+0x44>)
1a002438:	6818      	ldr	r0, [r3, #0]
1a00243a:	f7ff fa78 	bl	1a00192e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00243e:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002440:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a002442:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002444:	e7fc      	b.n	1a002440 <prvInsertTimerInActiveList+0x38>
1a002446:	bf00      	nop
1a002448:	10002b2c 	.word	0x10002b2c
1a00244c:	10002b28 	.word	0x10002b28

1a002450 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002450:	b530      	push	{r4, r5, lr}
1a002452:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002454:	f000 fa8e 	bl	1a002974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002458:	4b11      	ldr	r3, [pc, #68]	; (1a0024a0 <prvCheckForValidListAndQueue+0x50>)
1a00245a:	681b      	ldr	r3, [r3, #0]
1a00245c:	b11b      	cbz	r3, 1a002466 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a00245e:	f000 faab 	bl	1a0029b8 <vPortExitCritical>
}
1a002462:	b003      	add	sp, #12
1a002464:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a002466:	4d0f      	ldr	r5, [pc, #60]	; (1a0024a4 <prvCheckForValidListAndQueue+0x54>)
1a002468:	4628      	mov	r0, r5
1a00246a:	f7ff fa46 	bl	1a0018fa <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a00246e:	4c0e      	ldr	r4, [pc, #56]	; (1a0024a8 <prvCheckForValidListAndQueue+0x58>)
1a002470:	4620      	mov	r0, r4
1a002472:	f7ff fa42 	bl	1a0018fa <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a002476:	4b0d      	ldr	r3, [pc, #52]	; (1a0024ac <prvCheckForValidListAndQueue+0x5c>)
1a002478:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a00247a:	4b0d      	ldr	r3, [pc, #52]	; (1a0024b0 <prvCheckForValidListAndQueue+0x60>)
1a00247c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a00247e:	2300      	movs	r3, #0
1a002480:	9300      	str	r3, [sp, #0]
1a002482:	4b0c      	ldr	r3, [pc, #48]	; (1a0024b4 <prvCheckForValidListAndQueue+0x64>)
1a002484:	4a0c      	ldr	r2, [pc, #48]	; (1a0024b8 <prvCheckForValidListAndQueue+0x68>)
1a002486:	2110      	movs	r1, #16
1a002488:	200a      	movs	r0, #10
1a00248a:	f7fe ffe0 	bl	1a00144e <xQueueGenericCreateStatic>
1a00248e:	4b04      	ldr	r3, [pc, #16]	; (1a0024a0 <prvCheckForValidListAndQueue+0x50>)
1a002490:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002492:	2800      	cmp	r0, #0
1a002494:	d0e3      	beq.n	1a00245e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a002496:	4909      	ldr	r1, [pc, #36]	; (1a0024bc <prvCheckForValidListAndQueue+0x6c>)
1a002498:	f7ff f9f2 	bl	1a001880 <vQueueAddToRegistry>
1a00249c:	e7df      	b.n	1a00245e <prvCheckForValidListAndQueue+0xe>
1a00249e:	bf00      	nop
1a0024a0:	10002c4c 	.word	0x10002c4c
1a0024a4:	10002bd0 	.word	0x10002bd0
1a0024a8:	10002be4 	.word	0x10002be4
1a0024ac:	10002b28 	.word	0x10002b28
1a0024b0:	10002b2c 	.word	0x10002b2c
1a0024b4:	10002bfc 	.word	0x10002bfc
1a0024b8:	10002b30 	.word	0x10002b30
1a0024bc:	1a004d7c 	.word	0x1a004d7c

1a0024c0 <prvInitialiseNewTimer>:
{
1a0024c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0024c4:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a0024c6:	b941      	cbnz	r1, 1a0024da <prvInitialiseNewTimer+0x1a>
1a0024c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024cc:	f383 8811 	msr	BASEPRI, r3
1a0024d0:	f3bf 8f6f 	isb	sy
1a0024d4:	f3bf 8f4f 	dsb	sy
1a0024d8:	e7fe      	b.n	1a0024d8 <prvInitialiseNewTimer+0x18>
1a0024da:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a0024dc:	b174      	cbz	r4, 1a0024fc <prvInitialiseNewTimer+0x3c>
1a0024de:	461d      	mov	r5, r3
1a0024e0:	4616      	mov	r6, r2
1a0024e2:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a0024e4:	f7ff ffb4 	bl	1a002450 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a0024e8:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0024ec:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0024ee:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0024f0:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0024f2:	9b06      	ldr	r3, [sp, #24]
1a0024f4:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0024f6:	1d20      	adds	r0, r4, #4
1a0024f8:	f7ff fa0a 	bl	1a001910 <vListInitialiseItem>
}
1a0024fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002500 <xTimerCreateTimerTask>:
{
1a002500:	b510      	push	{r4, lr}
1a002502:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002504:	f7ff ffa4 	bl	1a002450 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002508:	4b12      	ldr	r3, [pc, #72]	; (1a002554 <xTimerCreateTimerTask+0x54>)
1a00250a:	681b      	ldr	r3, [r3, #0]
1a00250c:	b1cb      	cbz	r3, 1a002542 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a00250e:	2400      	movs	r4, #0
1a002510:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002512:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002514:	aa07      	add	r2, sp, #28
1a002516:	a906      	add	r1, sp, #24
1a002518:	a805      	add	r0, sp, #20
1a00251a:	f7ff fa43 	bl	1a0019a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00251e:	9b05      	ldr	r3, [sp, #20]
1a002520:	9302      	str	r3, [sp, #8]
1a002522:	9b06      	ldr	r3, [sp, #24]
1a002524:	9301      	str	r3, [sp, #4]
1a002526:	2304      	movs	r3, #4
1a002528:	9300      	str	r3, [sp, #0]
1a00252a:	4623      	mov	r3, r4
1a00252c:	9a07      	ldr	r2, [sp, #28]
1a00252e:	490a      	ldr	r1, [pc, #40]	; (1a002558 <xTimerCreateTimerTask+0x58>)
1a002530:	480a      	ldr	r0, [pc, #40]	; (1a00255c <xTimerCreateTimerTask+0x5c>)
1a002532:	f7ff fbd1 	bl	1a001cd8 <xTaskCreateStatic>
1a002536:	4b0a      	ldr	r3, [pc, #40]	; (1a002560 <xTimerCreateTimerTask+0x60>)
1a002538:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00253a:	b110      	cbz	r0, 1a002542 <xTimerCreateTimerTask+0x42>
}
1a00253c:	2001      	movs	r0, #1
1a00253e:	b008      	add	sp, #32
1a002540:	bd10      	pop	{r4, pc}
1a002542:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002546:	f383 8811 	msr	BASEPRI, r3
1a00254a:	f3bf 8f6f 	isb	sy
1a00254e:	f3bf 8f4f 	dsb	sy
1a002552:	e7fe      	b.n	1a002552 <xTimerCreateTimerTask+0x52>
1a002554:	10002c4c 	.word	0x10002c4c
1a002558:	1a004d84 	.word	0x1a004d84
1a00255c:	1a002891 	.word	0x1a002891
1a002560:	10002c50 	.word	0x10002c50

1a002564 <xTimerCreateStatic>:
	{
1a002564:	b530      	push	{r4, r5, lr}
1a002566:	b085      	sub	sp, #20
1a002568:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a00256a:	2530      	movs	r5, #48	; 0x30
1a00256c:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a00256e:	9d03      	ldr	r5, [sp, #12]
1a002570:	2d30      	cmp	r5, #48	; 0x30
1a002572:	d008      	beq.n	1a002586 <xTimerCreateStatic+0x22>
1a002574:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002578:	f383 8811 	msr	BASEPRI, r3
1a00257c:	f3bf 8f6f 	isb	sy
1a002580:	f3bf 8f4f 	dsb	sy
1a002584:	e7fe      	b.n	1a002584 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a002586:	b944      	cbnz	r4, 1a00259a <xTimerCreateStatic+0x36>
1a002588:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00258c:	f383 8811 	msr	BASEPRI, r3
1a002590:	f3bf 8f6f 	isb	sy
1a002594:	f3bf 8f4f 	dsb	sy
1a002598:	e7fe      	b.n	1a002598 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a00259a:	9401      	str	r4, [sp, #4]
1a00259c:	9d08      	ldr	r5, [sp, #32]
1a00259e:	9500      	str	r5, [sp, #0]
1a0025a0:	f7ff ff8e 	bl	1a0024c0 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a0025a4:	2301      	movs	r3, #1
1a0025a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a0025aa:	4620      	mov	r0, r4
1a0025ac:	b005      	add	sp, #20
1a0025ae:	bd30      	pop	{r4, r5, pc}

1a0025b0 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a0025b0:	b1c8      	cbz	r0, 1a0025e6 <xTimerGenericCommand+0x36>
{
1a0025b2:	b530      	push	{r4, r5, lr}
1a0025b4:	b085      	sub	sp, #20
1a0025b6:	4615      	mov	r5, r2
1a0025b8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a0025ba:	4a17      	ldr	r2, [pc, #92]	; (1a002618 <xTimerGenericCommand+0x68>)
1a0025bc:	6810      	ldr	r0, [r2, #0]
1a0025be:	b340      	cbz	r0, 1a002612 <xTimerGenericCommand+0x62>
1a0025c0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a0025c2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0025c4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0025c6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0025c8:	2905      	cmp	r1, #5
1a0025ca:	dc1d      	bgt.n	1a002608 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0025cc:	f7ff fea4 	bl	1a002318 <xTaskGetSchedulerState>
1a0025d0:	2802      	cmp	r0, #2
1a0025d2:	d011      	beq.n	1a0025f8 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0025d4:	2300      	movs	r3, #0
1a0025d6:	461a      	mov	r2, r3
1a0025d8:	4669      	mov	r1, sp
1a0025da:	480f      	ldr	r0, [pc, #60]	; (1a002618 <xTimerGenericCommand+0x68>)
1a0025dc:	6800      	ldr	r0, [r0, #0]
1a0025de:	f7fe ff7f 	bl	1a0014e0 <xQueueGenericSend>
}
1a0025e2:	b005      	add	sp, #20
1a0025e4:	bd30      	pop	{r4, r5, pc}
1a0025e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025ea:	f383 8811 	msr	BASEPRI, r3
1a0025ee:	f3bf 8f6f 	isb	sy
1a0025f2:	f3bf 8f4f 	dsb	sy
1a0025f6:	e7fe      	b.n	1a0025f6 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0025f8:	2300      	movs	r3, #0
1a0025fa:	9a08      	ldr	r2, [sp, #32]
1a0025fc:	4669      	mov	r1, sp
1a0025fe:	4806      	ldr	r0, [pc, #24]	; (1a002618 <xTimerGenericCommand+0x68>)
1a002600:	6800      	ldr	r0, [r0, #0]
1a002602:	f7fe ff6d 	bl	1a0014e0 <xQueueGenericSend>
1a002606:	e7ec      	b.n	1a0025e2 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a002608:	2300      	movs	r3, #0
1a00260a:	4669      	mov	r1, sp
1a00260c:	f7ff f826 	bl	1a00165c <xQueueGenericSendFromISR>
1a002610:	e7e7      	b.n	1a0025e2 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a002612:	2000      	movs	r0, #0
	return xReturn;
1a002614:	e7e5      	b.n	1a0025e2 <xTimerGenericCommand+0x32>
1a002616:	bf00      	nop
1a002618:	10002c4c 	.word	0x10002c4c

1a00261c <prvSwitchTimerLists>:
{
1a00261c:	b570      	push	{r4, r5, r6, lr}
1a00261e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002620:	4b1a      	ldr	r3, [pc, #104]	; (1a00268c <prvSwitchTimerLists+0x70>)
1a002622:	681b      	ldr	r3, [r3, #0]
1a002624:	681a      	ldr	r2, [r3, #0]
1a002626:	b352      	cbz	r2, 1a00267e <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002628:	68db      	ldr	r3, [r3, #12]
1a00262a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00262c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00262e:	1d25      	adds	r5, r4, #4
1a002630:	4628      	mov	r0, r5
1a002632:	f7ff f996 	bl	1a001962 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002636:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002638:	4620      	mov	r0, r4
1a00263a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00263c:	69e3      	ldr	r3, [r4, #28]
1a00263e:	2b01      	cmp	r3, #1
1a002640:	d1ee      	bne.n	1a002620 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002642:	69a3      	ldr	r3, [r4, #24]
1a002644:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002646:	429e      	cmp	r6, r3
1a002648:	d207      	bcs.n	1a00265a <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00264a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00264c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00264e:	4629      	mov	r1, r5
1a002650:	4b0e      	ldr	r3, [pc, #56]	; (1a00268c <prvSwitchTimerLists+0x70>)
1a002652:	6818      	ldr	r0, [r3, #0]
1a002654:	f7ff f96b 	bl	1a00192e <vListInsert>
1a002658:	e7e2      	b.n	1a002620 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00265a:	2100      	movs	r1, #0
1a00265c:	9100      	str	r1, [sp, #0]
1a00265e:	460b      	mov	r3, r1
1a002660:	4632      	mov	r2, r6
1a002662:	4620      	mov	r0, r4
1a002664:	f7ff ffa4 	bl	1a0025b0 <xTimerGenericCommand>
				configASSERT( xResult );
1a002668:	2800      	cmp	r0, #0
1a00266a:	d1d9      	bne.n	1a002620 <prvSwitchTimerLists+0x4>
1a00266c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002670:	f383 8811 	msr	BASEPRI, r3
1a002674:	f3bf 8f6f 	isb	sy
1a002678:	f3bf 8f4f 	dsb	sy
1a00267c:	e7fe      	b.n	1a00267c <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a00267e:	4a04      	ldr	r2, [pc, #16]	; (1a002690 <prvSwitchTimerLists+0x74>)
1a002680:	6810      	ldr	r0, [r2, #0]
1a002682:	4902      	ldr	r1, [pc, #8]	; (1a00268c <prvSwitchTimerLists+0x70>)
1a002684:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002686:	6013      	str	r3, [r2, #0]
}
1a002688:	b002      	add	sp, #8
1a00268a:	bd70      	pop	{r4, r5, r6, pc}
1a00268c:	10002b28 	.word	0x10002b28
1a002690:	10002b2c 	.word	0x10002b2c

1a002694 <prvSampleTimeNow>:
{
1a002694:	b538      	push	{r3, r4, r5, lr}
1a002696:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002698:	f7ff fbdc 	bl	1a001e54 <xTaskGetTickCount>
1a00269c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a00269e:	4b07      	ldr	r3, [pc, #28]	; (1a0026bc <prvSampleTimeNow+0x28>)
1a0026a0:	681b      	ldr	r3, [r3, #0]
1a0026a2:	4283      	cmp	r3, r0
1a0026a4:	d805      	bhi.n	1a0026b2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a0026a6:	2300      	movs	r3, #0
1a0026a8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a0026aa:	4b04      	ldr	r3, [pc, #16]	; (1a0026bc <prvSampleTimeNow+0x28>)
1a0026ac:	601c      	str	r4, [r3, #0]
}
1a0026ae:	4620      	mov	r0, r4
1a0026b0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a0026b2:	f7ff ffb3 	bl	1a00261c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0026b6:	2301      	movs	r3, #1
1a0026b8:	602b      	str	r3, [r5, #0]
1a0026ba:	e7f6      	b.n	1a0026aa <prvSampleTimeNow+0x16>
1a0026bc:	10002bf8 	.word	0x10002bf8

1a0026c0 <prvProcessExpiredTimer>:
{
1a0026c0:	b570      	push	{r4, r5, r6, lr}
1a0026c2:	b082      	sub	sp, #8
1a0026c4:	4605      	mov	r5, r0
1a0026c6:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0026c8:	4b14      	ldr	r3, [pc, #80]	; (1a00271c <prvProcessExpiredTimer+0x5c>)
1a0026ca:	681b      	ldr	r3, [r3, #0]
1a0026cc:	68db      	ldr	r3, [r3, #12]
1a0026ce:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0026d0:	1d20      	adds	r0, r4, #4
1a0026d2:	f7ff f946 	bl	1a001962 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0026d6:	69e3      	ldr	r3, [r4, #28]
1a0026d8:	2b01      	cmp	r3, #1
1a0026da:	d004      	beq.n	1a0026e6 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0026dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0026de:	4620      	mov	r0, r4
1a0026e0:	4798      	blx	r3
}
1a0026e2:	b002      	add	sp, #8
1a0026e4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0026e6:	69a1      	ldr	r1, [r4, #24]
1a0026e8:	462b      	mov	r3, r5
1a0026ea:	4632      	mov	r2, r6
1a0026ec:	4429      	add	r1, r5
1a0026ee:	4620      	mov	r0, r4
1a0026f0:	f7ff fe8a 	bl	1a002408 <prvInsertTimerInActiveList>
1a0026f4:	2800      	cmp	r0, #0
1a0026f6:	d0f1      	beq.n	1a0026dc <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0026f8:	2100      	movs	r1, #0
1a0026fa:	9100      	str	r1, [sp, #0]
1a0026fc:	460b      	mov	r3, r1
1a0026fe:	462a      	mov	r2, r5
1a002700:	4620      	mov	r0, r4
1a002702:	f7ff ff55 	bl	1a0025b0 <xTimerGenericCommand>
			configASSERT( xResult );
1a002706:	2800      	cmp	r0, #0
1a002708:	d1e8      	bne.n	1a0026dc <prvProcessExpiredTimer+0x1c>
1a00270a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00270e:	f383 8811 	msr	BASEPRI, r3
1a002712:	f3bf 8f6f 	isb	sy
1a002716:	f3bf 8f4f 	dsb	sy
1a00271a:	e7fe      	b.n	1a00271a <prvProcessExpiredTimer+0x5a>
1a00271c:	10002b28 	.word	0x10002b28

1a002720 <prvProcessTimerOrBlockTask>:
{
1a002720:	b570      	push	{r4, r5, r6, lr}
1a002722:	b082      	sub	sp, #8
1a002724:	4606      	mov	r6, r0
1a002726:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002728:	f7ff fb8c 	bl	1a001e44 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a00272c:	a801      	add	r0, sp, #4
1a00272e:	f7ff ffb1 	bl	1a002694 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002732:	9b01      	ldr	r3, [sp, #4]
1a002734:	bb1b      	cbnz	r3, 1a00277e <prvProcessTimerOrBlockTask+0x5e>
1a002736:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002738:	b90c      	cbnz	r4, 1a00273e <prvProcessTimerOrBlockTask+0x1e>
1a00273a:	42b0      	cmp	r0, r6
1a00273c:	d218      	bcs.n	1a002770 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a00273e:	b12c      	cbz	r4, 1a00274c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002740:	4b11      	ldr	r3, [pc, #68]	; (1a002788 <prvProcessTimerOrBlockTask+0x68>)
1a002742:	681b      	ldr	r3, [r3, #0]
1a002744:	681c      	ldr	r4, [r3, #0]
1a002746:	fab4 f484 	clz	r4, r4
1a00274a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a00274c:	4622      	mov	r2, r4
1a00274e:	1b71      	subs	r1, r6, r5
1a002750:	4b0e      	ldr	r3, [pc, #56]	; (1a00278c <prvProcessTimerOrBlockTask+0x6c>)
1a002752:	6818      	ldr	r0, [r3, #0]
1a002754:	f7ff f8a8 	bl	1a0018a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002758:	f7ff fc0e 	bl	1a001f78 <xTaskResumeAll>
1a00275c:	b988      	cbnz	r0, 1a002782 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a00275e:	4b0c      	ldr	r3, [pc, #48]	; (1a002790 <prvProcessTimerOrBlockTask+0x70>)
1a002760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002764:	601a      	str	r2, [r3, #0]
1a002766:	f3bf 8f4f 	dsb	sy
1a00276a:	f3bf 8f6f 	isb	sy
1a00276e:	e008      	b.n	1a002782 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002770:	f7ff fc02 	bl	1a001f78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002774:	4629      	mov	r1, r5
1a002776:	4630      	mov	r0, r6
1a002778:	f7ff ffa2 	bl	1a0026c0 <prvProcessExpiredTimer>
1a00277c:	e001      	b.n	1a002782 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a00277e:	f7ff fbfb 	bl	1a001f78 <xTaskResumeAll>
}
1a002782:	b002      	add	sp, #8
1a002784:	bd70      	pop	{r4, r5, r6, pc}
1a002786:	bf00      	nop
1a002788:	10002b2c 	.word	0x10002b2c
1a00278c:	10002c4c 	.word	0x10002c4c
1a002790:	e000ed04 	.word	0xe000ed04

1a002794 <prvProcessReceivedCommands>:
{
1a002794:	b530      	push	{r4, r5, lr}
1a002796:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002798:	e002      	b.n	1a0027a0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00279a:	9b04      	ldr	r3, [sp, #16]
1a00279c:	2b00      	cmp	r3, #0
1a00279e:	da0f      	bge.n	1a0027c0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0027a0:	2200      	movs	r2, #0
1a0027a2:	a904      	add	r1, sp, #16
1a0027a4:	4b39      	ldr	r3, [pc, #228]	; (1a00288c <prvProcessReceivedCommands+0xf8>)
1a0027a6:	6818      	ldr	r0, [r3, #0]
1a0027a8:	f7fe ffbe 	bl	1a001728 <xQueueReceive>
1a0027ac:	2800      	cmp	r0, #0
1a0027ae:	d06a      	beq.n	1a002886 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0027b0:	9b04      	ldr	r3, [sp, #16]
1a0027b2:	2b00      	cmp	r3, #0
1a0027b4:	daf1      	bge.n	1a00279a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0027b6:	9907      	ldr	r1, [sp, #28]
1a0027b8:	9806      	ldr	r0, [sp, #24]
1a0027ba:	9b05      	ldr	r3, [sp, #20]
1a0027bc:	4798      	blx	r3
1a0027be:	e7ec      	b.n	1a00279a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0027c0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0027c2:	6963      	ldr	r3, [r4, #20]
1a0027c4:	b113      	cbz	r3, 1a0027cc <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0027c6:	1d20      	adds	r0, r4, #4
1a0027c8:	f7ff f8cb 	bl	1a001962 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0027cc:	a803      	add	r0, sp, #12
1a0027ce:	f7ff ff61 	bl	1a002694 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0027d2:	9b04      	ldr	r3, [sp, #16]
1a0027d4:	2b09      	cmp	r3, #9
1a0027d6:	d8e3      	bhi.n	1a0027a0 <prvProcessReceivedCommands+0xc>
1a0027d8:	a201      	add	r2, pc, #4	; (adr r2, 1a0027e0 <prvProcessReceivedCommands+0x4c>)
1a0027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0027de:	bf00      	nop
1a0027e0:	1a002809 	.word	0x1a002809
1a0027e4:	1a002809 	.word	0x1a002809
1a0027e8:	1a002809 	.word	0x1a002809
1a0027ec:	1a0027a1 	.word	0x1a0027a1
1a0027f0:	1a002851 	.word	0x1a002851
1a0027f4:	1a002877 	.word	0x1a002877
1a0027f8:	1a002809 	.word	0x1a002809
1a0027fc:	1a002809 	.word	0x1a002809
1a002800:	1a0027a1 	.word	0x1a0027a1
1a002804:	1a002851 	.word	0x1a002851
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002808:	9905      	ldr	r1, [sp, #20]
1a00280a:	69a5      	ldr	r5, [r4, #24]
1a00280c:	460b      	mov	r3, r1
1a00280e:	4602      	mov	r2, r0
1a002810:	4429      	add	r1, r5
1a002812:	4620      	mov	r0, r4
1a002814:	f7ff fdf8 	bl	1a002408 <prvInsertTimerInActiveList>
1a002818:	2800      	cmp	r0, #0
1a00281a:	d0c1      	beq.n	1a0027a0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00281c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00281e:	4620      	mov	r0, r4
1a002820:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002822:	69e3      	ldr	r3, [r4, #28]
1a002824:	2b01      	cmp	r3, #1
1a002826:	d1bb      	bne.n	1a0027a0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002828:	69a2      	ldr	r2, [r4, #24]
1a00282a:	2100      	movs	r1, #0
1a00282c:	9100      	str	r1, [sp, #0]
1a00282e:	460b      	mov	r3, r1
1a002830:	9805      	ldr	r0, [sp, #20]
1a002832:	4402      	add	r2, r0
1a002834:	4620      	mov	r0, r4
1a002836:	f7ff febb 	bl	1a0025b0 <xTimerGenericCommand>
							configASSERT( xResult );
1a00283a:	2800      	cmp	r0, #0
1a00283c:	d1b0      	bne.n	1a0027a0 <prvProcessReceivedCommands+0xc>
1a00283e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002842:	f383 8811 	msr	BASEPRI, r3
1a002846:	f3bf 8f6f 	isb	sy
1a00284a:	f3bf 8f4f 	dsb	sy
1a00284e:	e7fe      	b.n	1a00284e <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002850:	9905      	ldr	r1, [sp, #20]
1a002852:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002854:	b131      	cbz	r1, 1a002864 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002856:	4603      	mov	r3, r0
1a002858:	4602      	mov	r2, r0
1a00285a:	4401      	add	r1, r0
1a00285c:	4620      	mov	r0, r4
1a00285e:	f7ff fdd3 	bl	1a002408 <prvInsertTimerInActiveList>
					break;
1a002862:	e79d      	b.n	1a0027a0 <prvProcessReceivedCommands+0xc>
1a002864:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002868:	f383 8811 	msr	BASEPRI, r3
1a00286c:	f3bf 8f6f 	isb	sy
1a002870:	f3bf 8f4f 	dsb	sy
1a002874:	e7fe      	b.n	1a002874 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002876:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a00287a:	2b00      	cmp	r3, #0
1a00287c:	d190      	bne.n	1a0027a0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a00287e:	4620      	mov	r0, r4
1a002880:	f7fe fce6 	bl	1a001250 <vPortFree>
1a002884:	e78c      	b.n	1a0027a0 <prvProcessReceivedCommands+0xc>
}
1a002886:	b009      	add	sp, #36	; 0x24
1a002888:	bd30      	pop	{r4, r5, pc}
1a00288a:	bf00      	nop
1a00288c:	10002c4c 	.word	0x10002c4c

1a002890 <prvTimerTask>:
{
1a002890:	b500      	push	{lr}
1a002892:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002894:	a801      	add	r0, sp, #4
1a002896:	f7ff fda7 	bl	1a0023e8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00289a:	9901      	ldr	r1, [sp, #4]
1a00289c:	f7ff ff40 	bl	1a002720 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a0028a0:	f7ff ff78 	bl	1a002794 <prvProcessReceivedCommands>
1a0028a4:	e7f6      	b.n	1a002894 <prvTimerTask+0x4>
1a0028a6:	Address 0x000000001a0028a6 is out of bounds.


1a0028a8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a0028a8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a0028aa:	2300      	movs	r3, #0
1a0028ac:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0028ae:	4b0d      	ldr	r3, [pc, #52]	; (1a0028e4 <prvTaskExitError+0x3c>)
1a0028b0:	681b      	ldr	r3, [r3, #0]
1a0028b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0028b6:	d008      	beq.n	1a0028ca <prvTaskExitError+0x22>
1a0028b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028bc:	f383 8811 	msr	BASEPRI, r3
1a0028c0:	f3bf 8f6f 	isb	sy
1a0028c4:	f3bf 8f4f 	dsb	sy
1a0028c8:	e7fe      	b.n	1a0028c8 <prvTaskExitError+0x20>
1a0028ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028ce:	f383 8811 	msr	BASEPRI, r3
1a0028d2:	f3bf 8f6f 	isb	sy
1a0028d6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0028da:	9b01      	ldr	r3, [sp, #4]
1a0028dc:	2b00      	cmp	r3, #0
1a0028de:	d0fc      	beq.n	1a0028da <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0028e0:	b002      	add	sp, #8
1a0028e2:	4770      	bx	lr
1a0028e4:	10000000 	.word	0x10000000

1a0028e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0028e8:	4808      	ldr	r0, [pc, #32]	; (1a00290c <prvPortStartFirstTask+0x24>)
1a0028ea:	6800      	ldr	r0, [r0, #0]
1a0028ec:	6800      	ldr	r0, [r0, #0]
1a0028ee:	f380 8808 	msr	MSP, r0
1a0028f2:	f04f 0000 	mov.w	r0, #0
1a0028f6:	f380 8814 	msr	CONTROL, r0
1a0028fa:	b662      	cpsie	i
1a0028fc:	b661      	cpsie	f
1a0028fe:	f3bf 8f4f 	dsb	sy
1a002902:	f3bf 8f6f 	isb	sy
1a002906:	df00      	svc	0
1a002908:	bf00      	nop
1a00290a:	0000      	.short	0x0000
1a00290c:	e000ed08 	.word	0xe000ed08

1a002910 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002910:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002920 <vPortEnableVFP+0x10>
1a002914:	6801      	ldr	r1, [r0, #0]
1a002916:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00291a:	6001      	str	r1, [r0, #0]
1a00291c:	4770      	bx	lr
1a00291e:	0000      	.short	0x0000
1a002920:	e000ed88 	.word	0xe000ed88

1a002924 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002928:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a00292c:	f021 0101 	bic.w	r1, r1, #1
1a002930:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002934:	4b05      	ldr	r3, [pc, #20]	; (1a00294c <pxPortInitialiseStack+0x28>)
1a002936:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a00293a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a00293e:	f06f 0302 	mvn.w	r3, #2
1a002942:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002946:	3844      	subs	r0, #68	; 0x44
1a002948:	4770      	bx	lr
1a00294a:	bf00      	nop
1a00294c:	1a0028a9 	.word	0x1a0028a9

1a002950 <SVC_Handler>:
	__asm volatile (
1a002950:	4b07      	ldr	r3, [pc, #28]	; (1a002970 <pxCurrentTCBConst2>)
1a002952:	6819      	ldr	r1, [r3, #0]
1a002954:	6808      	ldr	r0, [r1, #0]
1a002956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00295a:	f380 8809 	msr	PSP, r0
1a00295e:	f3bf 8f6f 	isb	sy
1a002962:	f04f 0000 	mov.w	r0, #0
1a002966:	f380 8811 	msr	BASEPRI, r0
1a00296a:	4770      	bx	lr
1a00296c:	f3af 8000 	nop.w

1a002970 <pxCurrentTCBConst2>:
1a002970:	10002a00 	.word	0x10002a00

1a002974 <vPortEnterCritical>:
1a002974:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002978:	f383 8811 	msr	BASEPRI, r3
1a00297c:	f3bf 8f6f 	isb	sy
1a002980:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002984:	4a0a      	ldr	r2, [pc, #40]	; (1a0029b0 <vPortEnterCritical+0x3c>)
1a002986:	6813      	ldr	r3, [r2, #0]
1a002988:	3301      	adds	r3, #1
1a00298a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00298c:	2b01      	cmp	r3, #1
1a00298e:	d000      	beq.n	1a002992 <vPortEnterCritical+0x1e>
}
1a002990:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002992:	4b08      	ldr	r3, [pc, #32]	; (1a0029b4 <vPortEnterCritical+0x40>)
1a002994:	681b      	ldr	r3, [r3, #0]
1a002996:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00299a:	d0f9      	beq.n	1a002990 <vPortEnterCritical+0x1c>
1a00299c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029a0:	f383 8811 	msr	BASEPRI, r3
1a0029a4:	f3bf 8f6f 	isb	sy
1a0029a8:	f3bf 8f4f 	dsb	sy
1a0029ac:	e7fe      	b.n	1a0029ac <vPortEnterCritical+0x38>
1a0029ae:	bf00      	nop
1a0029b0:	10000000 	.word	0x10000000
1a0029b4:	e000ed04 	.word	0xe000ed04

1a0029b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0029b8:	4b09      	ldr	r3, [pc, #36]	; (1a0029e0 <vPortExitCritical+0x28>)
1a0029ba:	681b      	ldr	r3, [r3, #0]
1a0029bc:	b943      	cbnz	r3, 1a0029d0 <vPortExitCritical+0x18>
1a0029be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029c2:	f383 8811 	msr	BASEPRI, r3
1a0029c6:	f3bf 8f6f 	isb	sy
1a0029ca:	f3bf 8f4f 	dsb	sy
1a0029ce:	e7fe      	b.n	1a0029ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0029d0:	3b01      	subs	r3, #1
1a0029d2:	4a03      	ldr	r2, [pc, #12]	; (1a0029e0 <vPortExitCritical+0x28>)
1a0029d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0029d6:	b90b      	cbnz	r3, 1a0029dc <vPortExitCritical+0x24>
	__asm volatile
1a0029d8:	f383 8811 	msr	BASEPRI, r3
}
1a0029dc:	4770      	bx	lr
1a0029de:	bf00      	nop
1a0029e0:	10000000 	.word	0x10000000
1a0029e4:	ffffffff 	.word	0xffffffff
1a0029e8:	ffffffff 	.word	0xffffffff
1a0029ec:	ffffffff 	.word	0xffffffff

1a0029f0 <PendSV_Handler>:
	__asm volatile
1a0029f0:	f3ef 8009 	mrs	r0, PSP
1a0029f4:	f3bf 8f6f 	isb	sy
1a0029f8:	4b15      	ldr	r3, [pc, #84]	; (1a002a50 <pxCurrentTCBConst>)
1a0029fa:	681a      	ldr	r2, [r3, #0]
1a0029fc:	f01e 0f10 	tst.w	lr, #16
1a002a00:	bf08      	it	eq
1a002a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002a0a:	6010      	str	r0, [r2, #0]
1a002a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002a10:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002a14:	f380 8811 	msr	BASEPRI, r0
1a002a18:	f3bf 8f4f 	dsb	sy
1a002a1c:	f3bf 8f6f 	isb	sy
1a002a20:	f7ff fb4a 	bl	1a0020b8 <vTaskSwitchContext>
1a002a24:	f04f 0000 	mov.w	r0, #0
1a002a28:	f380 8811 	msr	BASEPRI, r0
1a002a2c:	bc09      	pop	{r0, r3}
1a002a2e:	6819      	ldr	r1, [r3, #0]
1a002a30:	6808      	ldr	r0, [r1, #0]
1a002a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002a36:	f01e 0f10 	tst.w	lr, #16
1a002a3a:	bf08      	it	eq
1a002a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002a40:	f380 8809 	msr	PSP, r0
1a002a44:	f3bf 8f6f 	isb	sy
1a002a48:	4770      	bx	lr
1a002a4a:	bf00      	nop
1a002a4c:	f3af 8000 	nop.w

1a002a50 <pxCurrentTCBConst>:
1a002a50:	10002a00 	.word	0x10002a00

1a002a54 <SysTick_Handler>:
{
1a002a54:	b508      	push	{r3, lr}
	__asm volatile
1a002a56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a5a:	f383 8811 	msr	BASEPRI, r3
1a002a5e:	f3bf 8f6f 	isb	sy
1a002a62:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002a66:	f7ff f9fb 	bl	1a001e60 <xTaskIncrementTick>
1a002a6a:	b118      	cbz	r0, 1a002a74 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002a6c:	4b03      	ldr	r3, [pc, #12]	; (1a002a7c <SysTick_Handler+0x28>)
1a002a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002a72:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002a74:	2300      	movs	r3, #0
1a002a76:	f383 8811 	msr	BASEPRI, r3
}
1a002a7a:	bd08      	pop	{r3, pc}
1a002a7c:	e000ed04 	.word	0xe000ed04

1a002a80 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002a80:	4a08      	ldr	r2, [pc, #32]	; (1a002aa4 <vPortSetupTimerInterrupt+0x24>)
1a002a82:	2300      	movs	r3, #0
1a002a84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002a86:	4908      	ldr	r1, [pc, #32]	; (1a002aa8 <vPortSetupTimerInterrupt+0x28>)
1a002a88:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002a8a:	4b08      	ldr	r3, [pc, #32]	; (1a002aac <vPortSetupTimerInterrupt+0x2c>)
1a002a8c:	681b      	ldr	r3, [r3, #0]
1a002a8e:	4908      	ldr	r1, [pc, #32]	; (1a002ab0 <vPortSetupTimerInterrupt+0x30>)
1a002a90:	fba1 1303 	umull	r1, r3, r1, r3
1a002a94:	099b      	lsrs	r3, r3, #6
1a002a96:	3b01      	subs	r3, #1
1a002a98:	4906      	ldr	r1, [pc, #24]	; (1a002ab4 <vPortSetupTimerInterrupt+0x34>)
1a002a9a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002a9c:	2307      	movs	r3, #7
1a002a9e:	6013      	str	r3, [r2, #0]
}
1a002aa0:	4770      	bx	lr
1a002aa2:	bf00      	nop
1a002aa4:	e000e010 	.word	0xe000e010
1a002aa8:	e000e018 	.word	0xe000e018
1a002aac:	10002d08 	.word	0x10002d08
1a002ab0:	10624dd3 	.word	0x10624dd3
1a002ab4:	e000e014 	.word	0xe000e014

1a002ab8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002ab8:	4b3a      	ldr	r3, [pc, #232]	; (1a002ba4 <xPortStartScheduler+0xec>)
1a002aba:	681a      	ldr	r2, [r3, #0]
1a002abc:	4b3a      	ldr	r3, [pc, #232]	; (1a002ba8 <xPortStartScheduler+0xf0>)
1a002abe:	429a      	cmp	r2, r3
1a002ac0:	d00d      	beq.n	1a002ade <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002ac2:	4b38      	ldr	r3, [pc, #224]	; (1a002ba4 <xPortStartScheduler+0xec>)
1a002ac4:	681a      	ldr	r2, [r3, #0]
1a002ac6:	4b39      	ldr	r3, [pc, #228]	; (1a002bac <xPortStartScheduler+0xf4>)
1a002ac8:	429a      	cmp	r2, r3
1a002aca:	d111      	bne.n	1a002af0 <xPortStartScheduler+0x38>
	__asm volatile
1a002acc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ad0:	f383 8811 	msr	BASEPRI, r3
1a002ad4:	f3bf 8f6f 	isb	sy
1a002ad8:	f3bf 8f4f 	dsb	sy
1a002adc:	e7fe      	b.n	1a002adc <xPortStartScheduler+0x24>
1a002ade:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ae2:	f383 8811 	msr	BASEPRI, r3
1a002ae6:	f3bf 8f6f 	isb	sy
1a002aea:	f3bf 8f4f 	dsb	sy
1a002aee:	e7fe      	b.n	1a002aee <xPortStartScheduler+0x36>
{
1a002af0:	b510      	push	{r4, lr}
1a002af2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002af4:	4b2e      	ldr	r3, [pc, #184]	; (1a002bb0 <xPortStartScheduler+0xf8>)
1a002af6:	781a      	ldrb	r2, [r3, #0]
1a002af8:	b2d2      	uxtb	r2, r2
1a002afa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002afc:	22ff      	movs	r2, #255	; 0xff
1a002afe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002b00:	781b      	ldrb	r3, [r3, #0]
1a002b02:	b2db      	uxtb	r3, r3
1a002b04:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002b08:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002b0c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002b10:	4a28      	ldr	r2, [pc, #160]	; (1a002bb4 <xPortStartScheduler+0xfc>)
1a002b12:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002b14:	4b28      	ldr	r3, [pc, #160]	; (1a002bb8 <xPortStartScheduler+0x100>)
1a002b16:	2207      	movs	r2, #7
1a002b18:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002b1a:	e009      	b.n	1a002b30 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a002b1c:	4a26      	ldr	r2, [pc, #152]	; (1a002bb8 <xPortStartScheduler+0x100>)
1a002b1e:	6813      	ldr	r3, [r2, #0]
1a002b20:	3b01      	subs	r3, #1
1a002b22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002b24:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002b28:	005b      	lsls	r3, r3, #1
1a002b2a:	b2db      	uxtb	r3, r3
1a002b2c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002b30:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002b34:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002b38:	d1f0      	bne.n	1a002b1c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002b3a:	4b1f      	ldr	r3, [pc, #124]	; (1a002bb8 <xPortStartScheduler+0x100>)
1a002b3c:	681b      	ldr	r3, [r3, #0]
1a002b3e:	2b04      	cmp	r3, #4
1a002b40:	d008      	beq.n	1a002b54 <xPortStartScheduler+0x9c>
1a002b42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b46:	f383 8811 	msr	BASEPRI, r3
1a002b4a:	f3bf 8f6f 	isb	sy
1a002b4e:	f3bf 8f4f 	dsb	sy
1a002b52:	e7fe      	b.n	1a002b52 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002b54:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002b5a:	4a17      	ldr	r2, [pc, #92]	; (1a002bb8 <xPortStartScheduler+0x100>)
1a002b5c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002b5e:	9b01      	ldr	r3, [sp, #4]
1a002b60:	b2db      	uxtb	r3, r3
1a002b62:	4a13      	ldr	r2, [pc, #76]	; (1a002bb0 <xPortStartScheduler+0xf8>)
1a002b64:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002b66:	4b15      	ldr	r3, [pc, #84]	; (1a002bbc <xPortStartScheduler+0x104>)
1a002b68:	681a      	ldr	r2, [r3, #0]
1a002b6a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002b6e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002b70:	681a      	ldr	r2, [r3, #0]
1a002b72:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002b76:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002b78:	f7ff ff82 	bl	1a002a80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002b7c:	2400      	movs	r4, #0
1a002b7e:	4b10      	ldr	r3, [pc, #64]	; (1a002bc0 <xPortStartScheduler+0x108>)
1a002b80:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002b82:	f7ff fec5 	bl	1a002910 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002b86:	4a0f      	ldr	r2, [pc, #60]	; (1a002bc4 <xPortStartScheduler+0x10c>)
1a002b88:	6813      	ldr	r3, [r2, #0]
1a002b8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002b8e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002b90:	f7ff feaa 	bl	1a0028e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002b94:	f7ff fa90 	bl	1a0020b8 <vTaskSwitchContext>
	prvTaskExitError();
1a002b98:	f7ff fe86 	bl	1a0028a8 <prvTaskExitError>
}
1a002b9c:	4620      	mov	r0, r4
1a002b9e:	b002      	add	sp, #8
1a002ba0:	bd10      	pop	{r4, pc}
1a002ba2:	bf00      	nop
1a002ba4:	e000ed00 	.word	0xe000ed00
1a002ba8:	410fc271 	.word	0x410fc271
1a002bac:	410fc270 	.word	0x410fc270
1a002bb0:	e000e400 	.word	0xe000e400
1a002bb4:	10002c54 	.word	0x10002c54
1a002bb8:	10002c58 	.word	0x10002c58
1a002bbc:	e000ed20 	.word	0xe000ed20
1a002bc0:	10000000 	.word	0x10000000
1a002bc4:	e000ef34 	.word	0xe000ef34

1a002bc8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002bc8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002bcc:	2b0f      	cmp	r3, #15
1a002bce:	d90f      	bls.n	1a002bf0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002bd0:	4a10      	ldr	r2, [pc, #64]	; (1a002c14 <vPortValidateInterruptPriority+0x4c>)
1a002bd2:	5c9b      	ldrb	r3, [r3, r2]
1a002bd4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002bd6:	4a10      	ldr	r2, [pc, #64]	; (1a002c18 <vPortValidateInterruptPriority+0x50>)
1a002bd8:	7812      	ldrb	r2, [r2, #0]
1a002bda:	429a      	cmp	r2, r3
1a002bdc:	d908      	bls.n	1a002bf0 <vPortValidateInterruptPriority+0x28>
1a002bde:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002be2:	f383 8811 	msr	BASEPRI, r3
1a002be6:	f3bf 8f6f 	isb	sy
1a002bea:	f3bf 8f4f 	dsb	sy
1a002bee:	e7fe      	b.n	1a002bee <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002bf0:	4b0a      	ldr	r3, [pc, #40]	; (1a002c1c <vPortValidateInterruptPriority+0x54>)
1a002bf2:	681b      	ldr	r3, [r3, #0]
1a002bf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002bf8:	4a09      	ldr	r2, [pc, #36]	; (1a002c20 <vPortValidateInterruptPriority+0x58>)
1a002bfa:	6812      	ldr	r2, [r2, #0]
1a002bfc:	4293      	cmp	r3, r2
1a002bfe:	d908      	bls.n	1a002c12 <vPortValidateInterruptPriority+0x4a>
1a002c00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c04:	f383 8811 	msr	BASEPRI, r3
1a002c08:	f3bf 8f6f 	isb	sy
1a002c0c:	f3bf 8f4f 	dsb	sy
1a002c10:	e7fe      	b.n	1a002c10 <vPortValidateInterruptPriority+0x48>
	}
1a002c12:	4770      	bx	lr
1a002c14:	e000e3f0 	.word	0xe000e3f0
1a002c18:	10002c54 	.word	0x10002c54
1a002c1c:	e000ed0c 	.word	0xe000ed0c
1a002c20:	10002c58 	.word	0x10002c58

1a002c24 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002c24:	4b04      	ldr	r3, [pc, #16]	; (1a002c38 <cyclesCounterInit+0x14>)
1a002c26:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a002c28:	4b04      	ldr	r3, [pc, #16]	; (1a002c3c <cyclesCounterInit+0x18>)
1a002c2a:	681a      	ldr	r2, [r3, #0]
1a002c2c:	6813      	ldr	r3, [r2, #0]
1a002c2e:	f043 0301 	orr.w	r3, r3, #1
1a002c32:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002c34:	2001      	movs	r0, #1
1a002c36:	4770      	bx	lr
1a002c38:	10000004 	.word	0x10000004
1a002c3c:	10000008 	.word	0x10000008

1a002c40 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002c40:	2301      	movs	r3, #1
1a002c42:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a002c46:	4b01      	ldr	r3, [pc, #4]	; (1a002c4c <clearInterrupt+0xc>)
1a002c48:	6258      	str	r0, [r3, #36]	; 0x24
}
1a002c4a:	4770      	bx	lr
1a002c4c:	40087000 	.word	0x40087000

1a002c50 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002c52:	4b12      	ldr	r3, [pc, #72]	; (1a002c9c <serveInterrupt+0x4c>)
1a002c54:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a002c56:	4b12      	ldr	r3, [pc, #72]	; (1a002ca0 <serveInterrupt+0x50>)
1a002c58:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a002c5a:	2301      	movs	r3, #1
1a002c5c:	4083      	lsls	r3, r0
1a002c5e:	420b      	tst	r3, r1
1a002c60:	d111      	bne.n	1a002c86 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a002c62:	4910      	ldr	r1, [pc, #64]	; (1a002ca4 <serveInterrupt+0x54>)
1a002c64:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002c66:	4d10      	ldr	r5, [pc, #64]	; (1a002ca8 <serveInterrupt+0x58>)
1a002c68:	0051      	lsls	r1, r2, #1
1a002c6a:	188f      	adds	r7, r1, r2
1a002c6c:	00fc      	lsls	r4, r7, #3
1a002c6e:	4627      	mov	r7, r4
1a002c70:	442c      	add	r4, r5
1a002c72:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a002c74:	6864      	ldr	r4, [r4, #4]
1a002c76:	1b36      	subs	r6, r6, r4
1a002c78:	443d      	add	r5, r7
1a002c7a:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a002c7c:	4a08      	ldr	r2, [pc, #32]	; (1a002ca0 <serveInterrupt+0x50>)
1a002c7e:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002c80:	f7ff ffde 	bl	1a002c40 <clearInterrupt>
}
1a002c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002c86:	4907      	ldr	r1, [pc, #28]	; (1a002ca4 <serveInterrupt+0x54>)
1a002c88:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002c8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a002c8e:	00d1      	lsls	r1, r2, #3
1a002c90:	4a05      	ldr	r2, [pc, #20]	; (1a002ca8 <serveInterrupt+0x58>)
1a002c92:	440a      	add	r2, r1
1a002c94:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a002c96:	4a02      	ldr	r2, [pc, #8]	; (1a002ca0 <serveInterrupt+0x50>)
1a002c98:	61d3      	str	r3, [r2, #28]
1a002c9a:	e7f1      	b.n	1a002c80 <serveInterrupt+0x30>
1a002c9c:	1a004d8c 	.word	0x1a004d8c
1a002ca0:	40087000 	.word	0x40087000
1a002ca4:	40084000 	.word	0x40084000
1a002ca8:	1000000c 	.word	0x1000000c

1a002cac <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a002cac:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a002cae:	2000      	movs	r0, #0
1a002cb0:	f7ff ffce 	bl	1a002c50 <serveInterrupt>
}
1a002cb4:	bd08      	pop	{r3, pc}

1a002cb6 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a002cb6:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a002cb8:	2001      	movs	r0, #1
1a002cba:	f7ff ffc9 	bl	1a002c50 <serveInterrupt>
}
1a002cbe:	bd08      	pop	{r3, pc}

1a002cc0 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a002cc0:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a002cc2:	2002      	movs	r0, #2
1a002cc4:	f7ff ffc4 	bl	1a002c50 <serveInterrupt>
}
1a002cc8:	bd08      	pop	{r3, pc}
1a002cca:	Address 0x000000001a002cca is out of bounds.


1a002ccc <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002ccc:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002cce:	4d0b      	ldr	r5, [pc, #44]	; (1a002cfc <gpioObtainPinInit+0x30>)
1a002cd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002cd4:	182c      	adds	r4, r5, r0
1a002cd6:	5628      	ldrsb	r0, [r5, r0]
1a002cd8:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002cda:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002cde:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002ce0:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002ce4:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002ce6:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002cea:	9b02      	ldr	r3, [sp, #8]
1a002cec:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002cee:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002cf2:	9b03      	ldr	r3, [sp, #12]
1a002cf4:	701a      	strb	r2, [r3, #0]
}
1a002cf6:	bc30      	pop	{r4, r5}
1a002cf8:	4770      	bx	lr
1a002cfa:	bf00      	nop
1a002cfc:	1a004d90 	.word	0x1a004d90

1a002d00 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a002d00:	b570      	push	{r4, r5, r6, lr}
1a002d02:	b084      	sub	sp, #16
1a002d04:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002d06:	2300      	movs	r3, #0
1a002d08:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002d0c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002d10:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002d14:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002d18:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002d1c:	f10d 030b 	add.w	r3, sp, #11
1a002d20:	9301      	str	r3, [sp, #4]
1a002d22:	ab03      	add	r3, sp, #12
1a002d24:	9300      	str	r3, [sp, #0]
1a002d26:	f10d 030d 	add.w	r3, sp, #13
1a002d2a:	f10d 020e 	add.w	r2, sp, #14
1a002d2e:	f10d 010f 	add.w	r1, sp, #15
1a002d32:	f7ff ffcb 	bl	1a002ccc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a002d36:	2c05      	cmp	r4, #5
1a002d38:	f200 80a5 	bhi.w	1a002e86 <gpioInit+0x186>
1a002d3c:	e8df f004 	tbb	[pc, r4]
1a002d40:	45278109 	.word	0x45278109
1a002d44:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a002d46:	4851      	ldr	r0, [pc, #324]	; (1a002e8c <gpioInit+0x18c>)
1a002d48:	f001 fa42 	bl	1a0041d0 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a002d4c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a002d4e:	b004      	add	sp, #16
1a002d50:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a002d52:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002d56:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002d5a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002d5e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002d62:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002d66:	494a      	ldr	r1, [pc, #296]	; (1a002e90 <gpioInit+0x190>)
1a002d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002d6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002d70:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002d74:	2001      	movs	r0, #1
1a002d76:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a002d7a:	4c44      	ldr	r4, [pc, #272]	; (1a002e8c <gpioInit+0x18c>)
1a002d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002d80:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002d84:	ea22 0201 	bic.w	r2, r2, r1
1a002d88:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002d8c:	e7df      	b.n	1a002d4e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002d8e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002d92:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002d96:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002d9a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a002d9e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002da2:	493b      	ldr	r1, [pc, #236]	; (1a002e90 <gpioInit+0x190>)
1a002da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002da8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002dac:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002db0:	2001      	movs	r0, #1
1a002db2:	fa00 f102 	lsl.w	r1, r0, r2
1a002db6:	4c35      	ldr	r4, [pc, #212]	; (1a002e8c <gpioInit+0x18c>)
1a002db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002dbc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002dc0:	ea22 0201 	bic.w	r2, r2, r1
1a002dc4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002dc8:	e7c1      	b.n	1a002d4e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002dca:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002dce:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002dd2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002dd6:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002dda:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002dde:	492c      	ldr	r1, [pc, #176]	; (1a002e90 <gpioInit+0x190>)
1a002de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002de4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002de8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002dec:	2001      	movs	r0, #1
1a002dee:	fa00 f102 	lsl.w	r1, r0, r2
1a002df2:	4c26      	ldr	r4, [pc, #152]	; (1a002e8c <gpioInit+0x18c>)
1a002df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002df8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002dfc:	ea22 0201 	bic.w	r2, r2, r1
1a002e00:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002e04:	e7a3      	b.n	1a002d4e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002e06:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002e0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002e0e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002e12:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002e16:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002e1a:	491d      	ldr	r1, [pc, #116]	; (1a002e90 <gpioInit+0x190>)
1a002e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002e20:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002e24:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002e28:	2001      	movs	r0, #1
1a002e2a:	fa00 f102 	lsl.w	r1, r0, r2
1a002e2e:	4c17      	ldr	r4, [pc, #92]	; (1a002e8c <gpioInit+0x18c>)
1a002e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002e34:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002e38:	ea22 0201 	bic.w	r2, r2, r1
1a002e3c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002e40:	e785      	b.n	1a002d4e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002e42:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002e46:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002e4a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002e4e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002e52:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002e56:	490e      	ldr	r1, [pc, #56]	; (1a002e90 <gpioInit+0x190>)
1a002e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002e5c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002e60:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002e64:	2001      	movs	r0, #1
1a002e66:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a002e6a:	4b08      	ldr	r3, [pc, #32]	; (1a002e8c <gpioInit+0x18c>)
1a002e6c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002e70:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a002e74:	4331      	orrs	r1, r6
1a002e76:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a002e7a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a002e7c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002e80:	2100      	movs	r1, #0
1a002e82:	5499      	strb	r1, [r3, r2]
1a002e84:	e763      	b.n	1a002d4e <gpioInit+0x4e>
      ret_val = 0;
1a002e86:	2000      	movs	r0, #0
1a002e88:	e761      	b.n	1a002d4e <gpioInit+0x4e>
1a002e8a:	bf00      	nop
1a002e8c:	400f4000 	.word	0x400f4000
1a002e90:	40086000 	.word	0x40086000

1a002e94 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a002e94:	b510      	push	{r4, lr}
1a002e96:	b084      	sub	sp, #16
1a002e98:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002e9a:	2300      	movs	r3, #0
1a002e9c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002ea0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002ea4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002ea8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002eac:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002eb0:	f10d 030b 	add.w	r3, sp, #11
1a002eb4:	9301      	str	r3, [sp, #4]
1a002eb6:	ab03      	add	r3, sp, #12
1a002eb8:	9300      	str	r3, [sp, #0]
1a002eba:	f10d 030d 	add.w	r3, sp, #13
1a002ebe:	f10d 020e 	add.w	r2, sp, #14
1a002ec2:	f10d 010f 	add.w	r1, sp, #15
1a002ec6:	f7ff ff01 	bl	1a002ccc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002eca:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002ece:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a002ed2:	3400      	adds	r4, #0
1a002ed4:	bf18      	it	ne
1a002ed6:	2401      	movne	r4, #1
1a002ed8:	015b      	lsls	r3, r3, #5
1a002eda:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002ede:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002ee2:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a002ee4:	2001      	movs	r0, #1
1a002ee6:	b004      	add	sp, #16
1a002ee8:	bd10      	pop	{r4, pc}

1a002eea <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a002eea:	b500      	push	{lr}
1a002eec:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002eee:	2300      	movs	r3, #0
1a002ef0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002ef4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002ef8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002efc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002f00:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002f04:	f10d 030b 	add.w	r3, sp, #11
1a002f08:	9301      	str	r3, [sp, #4]
1a002f0a:	ab03      	add	r3, sp, #12
1a002f0c:	9300      	str	r3, [sp, #0]
1a002f0e:	f10d 030d 	add.w	r3, sp, #13
1a002f12:	f10d 020e 	add.w	r2, sp, #14
1a002f16:	f10d 010f 	add.w	r1, sp, #15
1a002f1a:	f7ff fed7 	bl	1a002ccc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002f1e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a002f22:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a002f26:	015b      	lsls	r3, r3, #5
1a002f28:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002f2c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002f30:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a002f32:	3000      	adds	r0, #0
1a002f34:	bf18      	it	ne
1a002f36:	2001      	movne	r0, #1
1a002f38:	b005      	add	sp, #20
1a002f3a:	f85d fb04 	ldr.w	pc, [sp], #4
1a002f3e:	Address 0x000000001a002f3e is out of bounds.


1a002f40 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002f40:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a002f44:	4909      	ldr	r1, [pc, #36]	; (1a002f6c <tickerCallback+0x2c>)
1a002f46:	e9d1 bc00 	ldrd	fp, ip, [r1]
1a002f4a:	f11b 0201 	adds.w	r2, fp, #1
1a002f4e:	f14c 0300 	adc.w	r3, ip, #0
1a002f52:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002f56:	4b06      	ldr	r3, [pc, #24]	; (1a002f70 <tickerCallback+0x30>)
1a002f58:	681b      	ldr	r3, [r3, #0]
1a002f5a:	b123      	cbz	r3, 1a002f66 <tickerCallback+0x26>
      (* tickHookFunction )( callBackFuncParams );
1a002f5c:	4b04      	ldr	r3, [pc, #16]	; (1a002f70 <tickerCallback+0x30>)
1a002f5e:	681b      	ldr	r3, [r3, #0]
1a002f60:	4a04      	ldr	r2, [pc, #16]	; (1a002f74 <tickerCallback+0x34>)
1a002f62:	6810      	ldr	r0, [r2, #0]
1a002f64:	4798      	blx	r3
   }
}
1a002f66:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a002f6a:	bf00      	nop
1a002f6c:	10002cf8 	.word	0x10002cf8
1a002f70:	10002c60 	.word	0x10002c60
1a002f74:	10002c5c 	.word	0x10002c5c

1a002f78 <tickInit>:
{
1a002f78:	b510      	push	{r4, lr}
1a002f7a:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a002f7c:	4b0e      	ldr	r3, [pc, #56]	; (1a002fb8 <tickInit+0x40>)
1a002f7e:	9301      	str	r3, [sp, #4]
1a002f80:	4b0e      	ldr	r3, [pc, #56]	; (1a002fbc <tickInit+0x44>)
1a002f82:	9300      	str	r3, [sp, #0]
1a002f84:	2300      	movs	r3, #0
1a002f86:	2201      	movs	r2, #1
1a002f88:	4601      	mov	r1, r0
1a002f8a:	480d      	ldr	r0, [pc, #52]	; (1a002fc0 <tickInit+0x48>)
1a002f8c:	f7ff faea 	bl	1a002564 <xTimerCreateStatic>
         if (h == NULL)
1a002f90:	b178      	cbz	r0, 1a002fb2 <tickInit+0x3a>
1a002f92:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a002f94:	f7fe ff5e 	bl	1a001e54 <xTaskGetTickCount>
1a002f98:	2300      	movs	r3, #0
1a002f9a:	9300      	str	r3, [sp, #0]
1a002f9c:	4602      	mov	r2, r0
1a002f9e:	2101      	movs	r1, #1
1a002fa0:	4620      	mov	r0, r4
1a002fa2:	f7ff fb05 	bl	1a0025b0 <xTimerGenericCommand>
1a002fa6:	2801      	cmp	r0, #1
1a002fa8:	bf14      	ite	ne
1a002faa:	2000      	movne	r0, #0
1a002fac:	2001      	moveq	r0, #1
}
1a002fae:	b002      	add	sp, #8
1a002fb0:	bd10      	pop	{r4, pc}
            return 0;
1a002fb2:	2000      	movs	r0, #0
1a002fb4:	e7fb      	b.n	1a002fae <tickInit+0x36>
1a002fb6:	bf00      	nop
1a002fb8:	10002c64 	.word	0x10002c64
1a002fbc:	1a002f41 	.word	0x1a002f41
1a002fc0:	1a004ec8 	.word	0x1a004ec8

1a002fc4 <uartProcessIRQ>:
{
1a002fc4:	b570      	push	{r4, r5, r6, lr}
1a002fc6:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a002fc8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a002fcc:	0093      	lsls	r3, r2, #2
1a002fce:	4a25      	ldr	r2, [pc, #148]	; (1a003064 <uartProcessIRQ+0xa0>)
1a002fd0:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002fd2:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a002fd4:	b2ed      	uxtb	r5, r5
1a002fd6:	f015 0f01 	tst.w	r5, #1
1a002fda:	d00b      	beq.n	1a002ff4 <uartProcessIRQ+0x30>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a002fdc:	b930      	cbnz	r0, 1a002fec <uartProcessIRQ+0x28>
1a002fde:	4b22      	ldr	r3, [pc, #136]	; (1a003068 <uartProcessIRQ+0xa4>)
1a002fe0:	681b      	ldr	r3, [r3, #0]
1a002fe2:	b11b      	cbz	r3, 1a002fec <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a002fe4:	4b20      	ldr	r3, [pc, #128]	; (1a003068 <uartProcessIRQ+0xa4>)
1a002fe6:	681b      	ldr	r3, [r3, #0]
1a002fe8:	2000      	movs	r0, #0
1a002fea:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002fec:	2c03      	cmp	r4, #3
1a002fee:	d015      	beq.n	1a00301c <uartProcessIRQ+0x58>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a002ff0:	2c05      	cmp	r4, #5
1a002ff2:	d01c      	beq.n	1a00302e <uartProcessIRQ+0x6a>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a002ff4:	f015 0f20 	tst.w	r5, #32
1a002ff8:	d00f      	beq.n	1a00301a <uartProcessIRQ+0x56>
	return pUART->IER;
1a002ffa:	6873      	ldr	r3, [r6, #4]
1a002ffc:	f013 0f02 	tst.w	r3, #2
1a003000:	d00b      	beq.n	1a00301a <uartProcessIRQ+0x56>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a003002:	b934      	cbnz	r4, 1a003012 <uartProcessIRQ+0x4e>
1a003004:	4b19      	ldr	r3, [pc, #100]	; (1a00306c <uartProcessIRQ+0xa8>)
1a003006:	681b      	ldr	r3, [r3, #0]
1a003008:	b11b      	cbz	r3, 1a003012 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART0)(0);
1a00300a:	4b18      	ldr	r3, [pc, #96]	; (1a00306c <uartProcessIRQ+0xa8>)
1a00300c:	681b      	ldr	r3, [r3, #0]
1a00300e:	2000      	movs	r0, #0
1a003010:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003012:	2c03      	cmp	r4, #3
1a003014:	d014      	beq.n	1a003040 <uartProcessIRQ+0x7c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003016:	2c05      	cmp	r4, #5
1a003018:	d01b      	beq.n	1a003052 <uartProcessIRQ+0x8e>
}
1a00301a:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a00301c:	4b14      	ldr	r3, [pc, #80]	; (1a003070 <uartProcessIRQ+0xac>)
1a00301e:	681b      	ldr	r3, [r3, #0]
1a003020:	2b00      	cmp	r3, #0
1a003022:	d0e5      	beq.n	1a002ff0 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART2)(0);
1a003024:	4b12      	ldr	r3, [pc, #72]	; (1a003070 <uartProcessIRQ+0xac>)
1a003026:	681b      	ldr	r3, [r3, #0]
1a003028:	2000      	movs	r0, #0
1a00302a:	4798      	blx	r3
1a00302c:	e7e0      	b.n	1a002ff0 <uartProcessIRQ+0x2c>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a00302e:	4b11      	ldr	r3, [pc, #68]	; (1a003074 <uartProcessIRQ+0xb0>)
1a003030:	681b      	ldr	r3, [r3, #0]
1a003032:	2b00      	cmp	r3, #0
1a003034:	d0de      	beq.n	1a002ff4 <uartProcessIRQ+0x30>
         (*rxIsrCallbackUART3)(0);
1a003036:	4b0f      	ldr	r3, [pc, #60]	; (1a003074 <uartProcessIRQ+0xb0>)
1a003038:	681b      	ldr	r3, [r3, #0]
1a00303a:	2000      	movs	r0, #0
1a00303c:	4798      	blx	r3
1a00303e:	e7d9      	b.n	1a002ff4 <uartProcessIRQ+0x30>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003040:	4b0d      	ldr	r3, [pc, #52]	; (1a003078 <uartProcessIRQ+0xb4>)
1a003042:	681b      	ldr	r3, [r3, #0]
1a003044:	2b00      	cmp	r3, #0
1a003046:	d0e6      	beq.n	1a003016 <uartProcessIRQ+0x52>
         (*txIsrCallbackUART2)(0);
1a003048:	4b0b      	ldr	r3, [pc, #44]	; (1a003078 <uartProcessIRQ+0xb4>)
1a00304a:	681b      	ldr	r3, [r3, #0]
1a00304c:	2000      	movs	r0, #0
1a00304e:	4798      	blx	r3
1a003050:	e7e1      	b.n	1a003016 <uartProcessIRQ+0x52>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003052:	4b0a      	ldr	r3, [pc, #40]	; (1a00307c <uartProcessIRQ+0xb8>)
1a003054:	681b      	ldr	r3, [r3, #0]
1a003056:	2b00      	cmp	r3, #0
1a003058:	d0df      	beq.n	1a00301a <uartProcessIRQ+0x56>
         (*txIsrCallbackUART3)(0);
1a00305a:	4b08      	ldr	r3, [pc, #32]	; (1a00307c <uartProcessIRQ+0xb8>)
1a00305c:	681b      	ldr	r3, [r3, #0]
1a00305e:	2000      	movs	r0, #0
1a003060:	4798      	blx	r3
}
1a003062:	e7da      	b.n	1a00301a <uartProcessIRQ+0x56>
1a003064:	1a004ed4 	.word	0x1a004ed4
1a003068:	10002c94 	.word	0x10002c94
1a00306c:	10002ca0 	.word	0x10002ca0
1a003070:	10002c98 	.word	0x10002c98
1a003074:	10002c9c 	.word	0x10002c9c
1a003078:	10002ca4 	.word	0x10002ca4
1a00307c:	10002ca8 	.word	0x10002ca8

1a003080 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003080:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003084:	0083      	lsls	r3, r0, #2
1a003086:	4a03      	ldr	r2, [pc, #12]	; (1a003094 <uartTxReady+0x14>)
1a003088:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a00308a:	6958      	ldr	r0, [r3, #20]
}
1a00308c:	f000 0020 	and.w	r0, r0, #32
1a003090:	4770      	bx	lr
1a003092:	bf00      	nop
1a003094:	1a004ed4 	.word	0x1a004ed4

1a003098 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003098:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00309c:	0083      	lsls	r3, r0, #2
1a00309e:	4a02      	ldr	r2, [pc, #8]	; (1a0030a8 <uartTxWrite+0x10>)
1a0030a0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0030a2:	6019      	str	r1, [r3, #0]
}
1a0030a4:	4770      	bx	lr
1a0030a6:	bf00      	nop
1a0030a8:	1a004ed4 	.word	0x1a004ed4

1a0030ac <uartInit>:
{
1a0030ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0030b0:	4680      	mov	r8, r0
1a0030b2:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0030b4:	4c19      	ldr	r4, [pc, #100]	; (1a00311c <uartInit+0x70>)
1a0030b6:	0045      	lsls	r5, r0, #1
1a0030b8:	182a      	adds	r2, r5, r0
1a0030ba:	0093      	lsls	r3, r2, #2
1a0030bc:	18e6      	adds	r6, r4, r3
1a0030be:	58e7      	ldr	r7, [r4, r3]
1a0030c0:	4638      	mov	r0, r7
1a0030c2:	f000 fb25 	bl	1a003710 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0030c6:	4649      	mov	r1, r9
1a0030c8:	4638      	mov	r0, r7
1a0030ca:	f000 fb4b 	bl	1a003764 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0030ce:	2307      	movs	r3, #7
1a0030d0:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0030d2:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0030d4:	2301      	movs	r3, #1
1a0030d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0030d8:	7930      	ldrb	r0, [r6, #4]
1a0030da:	7973      	ldrb	r3, [r6, #5]
1a0030dc:	79b2      	ldrb	r2, [r6, #6]
1a0030de:	f042 0218 	orr.w	r2, r2, #24
1a0030e2:	490f      	ldr	r1, [pc, #60]	; (1a003120 <uartInit+0x74>)
1a0030e4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0030e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0030ec:	79f0      	ldrb	r0, [r6, #7]
1a0030ee:	7a33      	ldrb	r3, [r6, #8]
1a0030f0:	7a72      	ldrb	r2, [r6, #9]
1a0030f2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0030f6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a0030fe:	f1b8 0f01 	cmp.w	r8, #1
1a003102:	d001      	beq.n	1a003108 <uartInit+0x5c>
}
1a003104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003108:	4a06      	ldr	r2, [pc, #24]	; (1a003124 <uartInit+0x78>)
1a00310a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00310c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003110:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003112:	221a      	movs	r2, #26
1a003114:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003118:	e7f4      	b.n	1a003104 <uartInit+0x58>
1a00311a:	bf00      	nop
1a00311c:	1a004ed4 	.word	0x1a004ed4
1a003120:	40086000 	.word	0x40086000
1a003124:	40081000 	.word	0x40081000

1a003128 <uartWriteByte>:
{
1a003128:	b538      	push	{r3, r4, r5, lr}
1a00312a:	4604      	mov	r4, r0
1a00312c:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a00312e:	4620      	mov	r0, r4
1a003130:	f7ff ffa6 	bl	1a003080 <uartTxReady>
1a003134:	2800      	cmp	r0, #0
1a003136:	d0fa      	beq.n	1a00312e <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a003138:	4629      	mov	r1, r5
1a00313a:	4620      	mov	r0, r4
1a00313c:	f7ff ffac 	bl	1a003098 <uartTxWrite>
}
1a003140:	bd38      	pop	{r3, r4, r5, pc}

1a003142 <uartWriteString>:
{
1a003142:	b538      	push	{r3, r4, r5, lr}
1a003144:	4605      	mov	r5, r0
1a003146:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003148:	e003      	b.n	1a003152 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a00314a:	4628      	mov	r0, r5
1a00314c:	f7ff ffec 	bl	1a003128 <uartWriteByte>
      str++;
1a003150:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003152:	7821      	ldrb	r1, [r4, #0]
1a003154:	2900      	cmp	r1, #0
1a003156:	d1f8      	bne.n	1a00314a <uartWriteString+0x8>
}
1a003158:	bd38      	pop	{r3, r4, r5, pc}

1a00315a <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a00315a:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a00315c:	2003      	movs	r0, #3
1a00315e:	f7ff ff31 	bl	1a002fc4 <uartProcessIRQ>
}
1a003162:	bd08      	pop	{r3, pc}

1a003164 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a003164:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a003166:	2005      	movs	r0, #5
1a003168:	f7ff ff2c 	bl	1a002fc4 <uartProcessIRQ>
}
1a00316c:	bd08      	pop	{r3, pc}
1a00316e:	Address 0x000000001a00316e is out of bounds.


1a003170 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a003170:	b538      	push	{r3, r4, r5, lr}
1a003172:	4604      	mov	r4, r0
1a003174:	460d      	mov	r5, r1
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003176:	4b08      	ldr	r3, [pc, #32]	; (1a003198 <i2cHardwareInit+0x28>)
1a003178:	f640 0208 	movw	r2, #2056	; 0x808
1a00317c:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a003180:	f001 f8c8 	bl	1a004314 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a003184:	4629      	mov	r1, r5
1a003186:	4620      	mov	r0, r4
1a003188:	f001 f8d6 	bl	1a004338 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a00318c:	4903      	ldr	r1, [pc, #12]	; (1a00319c <i2cHardwareInit+0x2c>)
1a00318e:	4620      	mov	r0, r4
1a003190:	f001 f8ee 	bl	1a004370 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a003194:	2001      	movs	r0, #1
1a003196:	bd38      	pop	{r3, r4, r5, pc}
1a003198:	40086000 	.word	0x40086000
1a00319c:	1a0043e9 	.word	0x1a0043e9

1a0031a0 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a0031a0:	b500      	push	{lr}
1a0031a2:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a0031a4:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0031a8:	2100      	movs	r1, #0
1a0031aa:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0031ae:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a0031b2:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a0031b4:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a0031b8:	9b07      	ldr	r3, [sp, #28]
1a0031ba:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a0031bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a0031c0:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0031c4:	4669      	mov	r1, sp
1a0031c6:	4804      	ldr	r0, [pc, #16]	; (1a0031d8 <i2cHardwareRead+0x38>)
1a0031c8:	f000 ffc5 	bl	1a004156 <Chip_I2CM_XferBlocking>
1a0031cc:	b100      	cbz	r0, 1a0031d0 <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a0031ce:	2001      	movs	r0, #1
}
1a0031d0:	b005      	add	sp, #20
1a0031d2:	f85d fb04 	ldr.w	pc, [sp], #4
1a0031d6:	bf00      	nop
1a0031d8:	400a1000 	.word	0x400a1000

1a0031dc <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a0031dc:	b108      	cbz	r0, 1a0031e2 <i2cHardwareWrite+0x6>
      return FALSE;
1a0031de:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a0031e0:	4770      	bx	lr
{
1a0031e2:	b500      	push	{lr}
1a0031e4:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a0031e6:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0031ea:	2100      	movs	r1, #0
1a0031ec:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0031f0:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a0031f4:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a0031f6:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a0031fa:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a0031fc:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a003200:	4669      	mov	r1, sp
1a003202:	4804      	ldr	r0, [pc, #16]	; (1a003214 <i2cHardwareWrite+0x38>)
1a003204:	f000 ffa7 	bl	1a004156 <Chip_I2CM_XferBlocking>
1a003208:	b100      	cbz	r0, 1a00320c <i2cHardwareWrite+0x30>
   return TRUE;
1a00320a:	2001      	movs	r0, #1
}
1a00320c:	b005      	add	sp, #20
1a00320e:	f85d fb04 	ldr.w	pc, [sp], #4
1a003212:	bf00      	nop
1a003214:	400a1000 	.word	0x400a1000

1a003218 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003218:	b108      	cbz	r0, 1a00321e <i2cInit+0x6>
      return FALSE;
1a00321a:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a00321c:	4770      	bx	lr
{
1a00321e:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a003220:	f7ff ffa6 	bl	1a003170 <i2cHardwareInit>
}
1a003224:	bd08      	pop	{r3, pc}

1a003226 <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003226:	b108      	cbz	r0, 1a00322c <i2cRead+0x6>
      return FALSE;
1a003228:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a00322a:	4770      	bx	lr
{
1a00322c:	b510      	push	{r4, lr}
1a00322e:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a003230:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a003234:	9403      	str	r4, [sp, #12]
1a003236:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a00323a:	9402      	str	r4, [sp, #8]
1a00323c:	9c07      	ldr	r4, [sp, #28]
1a00323e:	9401      	str	r4, [sp, #4]
1a003240:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a003244:	9400      	str	r4, [sp, #0]
1a003246:	f7ff ffab 	bl	1a0031a0 <i2cHardwareRead>
}
1a00324a:	b004      	add	sp, #16
1a00324c:	bd10      	pop	{r4, pc}

1a00324e <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a00324e:	b108      	cbz	r0, 1a003254 <i2cWrite+0x6>
      return FALSE;
1a003250:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a003252:	4770      	bx	lr
{
1a003254:	b510      	push	{r4, lr}
1a003256:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a003258:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a00325c:	9400      	str	r4, [sp, #0]
1a00325e:	f7ff ffbd 	bl	1a0031dc <i2cHardwareWrite>
}
1a003262:	b002      	add	sp, #8
1a003264:	bd10      	pop	{r4, pc}

1a003266 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a003266:	e7fe      	b.n	1a003266 <errorOcurred>

1a003268 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a003268:	4770      	bx	lr
1a00326a:	Address 0x000000001a00326a is out of bounds.


1a00326c <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a00326c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00326e:	2400      	movs	r4, #0
1a003270:	e001      	b.n	1a003276 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003272:	3401      	adds	r4, #1
1a003274:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003276:	2c03      	cmp	r4, #3
1a003278:	d812      	bhi.n	1a0032a0 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00327a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00327c:	4b09      	ldr	r3, [pc, #36]	; (1a0032a4 <TIMER0_IRQHandler+0x38>)
1a00327e:	681a      	ldr	r2, [r3, #0]
1a003280:	f004 010f 	and.w	r1, r4, #15
1a003284:	2301      	movs	r3, #1
1a003286:	408b      	lsls	r3, r1
1a003288:	421a      	tst	r2, r3
1a00328a:	d0f2      	beq.n	1a003272 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00328c:	4b06      	ldr	r3, [pc, #24]	; (1a0032a8 <TIMER0_IRQHandler+0x3c>)
1a00328e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a003292:	2000      	movs	r0, #0
1a003294:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003296:	2301      	movs	r3, #1
1a003298:	40ab      	lsls	r3, r5
1a00329a:	4a02      	ldr	r2, [pc, #8]	; (1a0032a4 <TIMER0_IRQHandler+0x38>)
1a00329c:	6013      	str	r3, [r2, #0]
1a00329e:	e7e8      	b.n	1a003272 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0032a0:	bd38      	pop	{r3, r4, r5, pc}
1a0032a2:	bf00      	nop
1a0032a4:	40084000 	.word	0x40084000
1a0032a8:	10000054 	.word	0x10000054

1a0032ac <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0032ac:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0032ae:	2400      	movs	r4, #0
1a0032b0:	e001      	b.n	1a0032b6 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0032b2:	3401      	adds	r4, #1
1a0032b4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0032b6:	2c03      	cmp	r4, #3
1a0032b8:	d813      	bhi.n	1a0032e2 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0032ba:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0032bc:	4b09      	ldr	r3, [pc, #36]	; (1a0032e4 <TIMER1_IRQHandler+0x38>)
1a0032be:	681a      	ldr	r2, [r3, #0]
1a0032c0:	f004 010f 	and.w	r1, r4, #15
1a0032c4:	2301      	movs	r3, #1
1a0032c6:	408b      	lsls	r3, r1
1a0032c8:	421a      	tst	r2, r3
1a0032ca:	d0f2      	beq.n	1a0032b2 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0032cc:	1d23      	adds	r3, r4, #4
1a0032ce:	4a06      	ldr	r2, [pc, #24]	; (1a0032e8 <TIMER1_IRQHandler+0x3c>)
1a0032d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0032d4:	2000      	movs	r0, #0
1a0032d6:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0032d8:	2301      	movs	r3, #1
1a0032da:	40ab      	lsls	r3, r5
1a0032dc:	4a01      	ldr	r2, [pc, #4]	; (1a0032e4 <TIMER1_IRQHandler+0x38>)
1a0032de:	6013      	str	r3, [r2, #0]
1a0032e0:	e7e7      	b.n	1a0032b2 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0032e2:	bd38      	pop	{r3, r4, r5, pc}
1a0032e4:	40085000 	.word	0x40085000
1a0032e8:	10000054 	.word	0x10000054

1a0032ec <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0032ec:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0032ee:	2400      	movs	r4, #0
1a0032f0:	e001      	b.n	1a0032f6 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0032f2:	3401      	adds	r4, #1
1a0032f4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0032f6:	2c03      	cmp	r4, #3
1a0032f8:	d814      	bhi.n	1a003324 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0032fa:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0032fc:	4b0a      	ldr	r3, [pc, #40]	; (1a003328 <TIMER2_IRQHandler+0x3c>)
1a0032fe:	681a      	ldr	r2, [r3, #0]
1a003300:	f004 010f 	and.w	r1, r4, #15
1a003304:	2301      	movs	r3, #1
1a003306:	408b      	lsls	r3, r1
1a003308:	421a      	tst	r2, r3
1a00330a:	d0f2      	beq.n	1a0032f2 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00330c:	f104 0308 	add.w	r3, r4, #8
1a003310:	4a06      	ldr	r2, [pc, #24]	; (1a00332c <TIMER2_IRQHandler+0x40>)
1a003312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003316:	2000      	movs	r0, #0
1a003318:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00331a:	2301      	movs	r3, #1
1a00331c:	40ab      	lsls	r3, r5
1a00331e:	4a02      	ldr	r2, [pc, #8]	; (1a003328 <TIMER2_IRQHandler+0x3c>)
1a003320:	6013      	str	r3, [r2, #0]
1a003322:	e7e6      	b.n	1a0032f2 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a003324:	bd38      	pop	{r3, r4, r5, pc}
1a003326:	bf00      	nop
1a003328:	400c3000 	.word	0x400c3000
1a00332c:	10000054 	.word	0x10000054

1a003330 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a003330:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003332:	2400      	movs	r4, #0
1a003334:	e001      	b.n	1a00333a <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003336:	3401      	adds	r4, #1
1a003338:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00333a:	2c03      	cmp	r4, #3
1a00333c:	d814      	bhi.n	1a003368 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00333e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003340:	4b0a      	ldr	r3, [pc, #40]	; (1a00336c <TIMER3_IRQHandler+0x3c>)
1a003342:	681a      	ldr	r2, [r3, #0]
1a003344:	f004 010f 	and.w	r1, r4, #15
1a003348:	2301      	movs	r3, #1
1a00334a:	408b      	lsls	r3, r1
1a00334c:	421a      	tst	r2, r3
1a00334e:	d0f2      	beq.n	1a003336 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003350:	f104 030c 	add.w	r3, r4, #12
1a003354:	4a06      	ldr	r2, [pc, #24]	; (1a003370 <TIMER3_IRQHandler+0x40>)
1a003356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00335a:	2000      	movs	r0, #0
1a00335c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00335e:	2301      	movs	r3, #1
1a003360:	40ab      	lsls	r3, r5
1a003362:	4a02      	ldr	r2, [pc, #8]	; (1a00336c <TIMER3_IRQHandler+0x3c>)
1a003364:	6013      	str	r3, [r2, #0]
1a003366:	e7e6      	b.n	1a003336 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a003368:	bd38      	pop	{r3, r4, r5, pc}
1a00336a:	bf00      	nop
1a00336c:	400c4000 	.word	0x400c4000
1a003370:	10000054 	.word	0x10000054

1a003374 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003374:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003376:	f000 faed 	bl	1a003954 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00337a:	4b3a      	ldr	r3, [pc, #232]	; (1a003464 <boardInit+0xf0>)
1a00337c:	6818      	ldr	r0, [r3, #0]
1a00337e:	f7ff fc51 	bl	1a002c24 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a003382:	2001      	movs	r0, #1
1a003384:	2100      	movs	r1, #0
1a003386:	f7ff fdf7 	bl	1a002f78 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a00338a:	2105      	movs	r1, #5
1a00338c:	2000      	movs	r0, #0
1a00338e:	f7ff fcb7 	bl	1a002d00 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a003392:	2100      	movs	r1, #0
1a003394:	2024      	movs	r0, #36	; 0x24
1a003396:	f7ff fcb3 	bl	1a002d00 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a00339a:	2100      	movs	r1, #0
1a00339c:	2025      	movs	r0, #37	; 0x25
1a00339e:	f7ff fcaf 	bl	1a002d00 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0033a2:	2100      	movs	r1, #0
1a0033a4:	2026      	movs	r0, #38	; 0x26
1a0033a6:	f7ff fcab 	bl	1a002d00 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a0033aa:	2100      	movs	r1, #0
1a0033ac:	2027      	movs	r0, #39	; 0x27
1a0033ae:	f7ff fca7 	bl	1a002d00 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a0033b2:	2101      	movs	r1, #1
1a0033b4:	2028      	movs	r0, #40	; 0x28
1a0033b6:	f7ff fca3 	bl	1a002d00 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a0033ba:	2101      	movs	r1, #1
1a0033bc:	2029      	movs	r0, #41	; 0x29
1a0033be:	f7ff fc9f 	bl	1a002d00 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a0033c2:	2101      	movs	r1, #1
1a0033c4:	202a      	movs	r0, #42	; 0x2a
1a0033c6:	f7ff fc9b 	bl	1a002d00 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a0033ca:	2101      	movs	r1, #1
1a0033cc:	202b      	movs	r0, #43	; 0x2b
1a0033ce:	f7ff fc97 	bl	1a002d00 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a0033d2:	2101      	movs	r1, #1
1a0033d4:	202c      	movs	r0, #44	; 0x2c
1a0033d6:	f7ff fc93 	bl	1a002d00 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0033da:	2101      	movs	r1, #1
1a0033dc:	202d      	movs	r0, #45	; 0x2d
1a0033de:	f7ff fc8f 	bl	1a002d00 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0033e2:	2100      	movs	r1, #0
1a0033e4:	202e      	movs	r0, #46	; 0x2e
1a0033e6:	f7ff fc8b 	bl	1a002d00 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0033ea:	2100      	movs	r1, #0
1a0033ec:	202f      	movs	r0, #47	; 0x2f
1a0033ee:	f7ff fc87 	bl	1a002d00 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0033f2:	2100      	movs	r1, #0
1a0033f4:	2030      	movs	r0, #48	; 0x30
1a0033f6:	f7ff fc83 	bl	1a002d00 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0033fa:	2100      	movs	r1, #0
1a0033fc:	2031      	movs	r0, #49	; 0x31
1a0033fe:	f7ff fc7f 	bl	1a002d00 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a003402:	2100      	movs	r1, #0
1a003404:	2032      	movs	r0, #50	; 0x32
1a003406:	f7ff fc7b 	bl	1a002d00 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a00340a:	2100      	movs	r1, #0
1a00340c:	2033      	movs	r0, #51	; 0x33
1a00340e:	f7ff fc77 	bl	1a002d00 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a003412:	2100      	movs	r1, #0
1a003414:	2034      	movs	r0, #52	; 0x34
1a003416:	f7ff fc73 	bl	1a002d00 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a00341a:	2100      	movs	r1, #0
1a00341c:	2035      	movs	r0, #53	; 0x35
1a00341e:	f7ff fc6f 	bl	1a002d00 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a003422:	2101      	movs	r1, #1
1a003424:	2036      	movs	r0, #54	; 0x36
1a003426:	f7ff fc6b 	bl	1a002d00 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a00342a:	2101      	movs	r1, #1
1a00342c:	2037      	movs	r0, #55	; 0x37
1a00342e:	f7ff fc67 	bl	1a002d00 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a003432:	2101      	movs	r1, #1
1a003434:	2038      	movs	r0, #56	; 0x38
1a003436:	f7ff fc63 	bl	1a002d00 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a00343a:	2101      	movs	r1, #1
1a00343c:	2039      	movs	r0, #57	; 0x39
1a00343e:	f7ff fc5f 	bl	1a002d00 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a003442:	2101      	movs	r1, #1
1a003444:	203a      	movs	r0, #58	; 0x3a
1a003446:	f7ff fc5b 	bl	1a002d00 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a00344a:	2101      	movs	r1, #1
1a00344c:	203b      	movs	r0, #59	; 0x3b
1a00344e:	f7ff fc57 	bl	1a002d00 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a003452:	2101      	movs	r1, #1
1a003454:	203c      	movs	r0, #60	; 0x3c
1a003456:	f7ff fc53 	bl	1a002d00 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a00345a:	2101      	movs	r1, #1
1a00345c:	203d      	movs	r0, #61	; 0x3d
1a00345e:	f7ff fc4f 	bl	1a002d00 <gpioInit>

}
1a003462:	bd08      	pop	{r3, pc}
1a003464:	10002d08 	.word	0x10002d08

1a003468 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003468:	2200      	movs	r2, #0
1a00346a:	2a05      	cmp	r2, #5
1a00346c:	d819      	bhi.n	1a0034a2 <Board_LED_Init+0x3a>
{
1a00346e:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a003470:	490c      	ldr	r1, [pc, #48]	; (1a0034a4 <Board_LED_Init+0x3c>)
1a003472:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a003476:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00347a:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a00347c:	4b0a      	ldr	r3, [pc, #40]	; (1a0034a8 <Board_LED_Init+0x40>)
1a00347e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a003482:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003486:	2001      	movs	r0, #1
1a003488:	40a0      	lsls	r0, r4
1a00348a:	4301      	orrs	r1, r0
1a00348c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a003490:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a003494:	2100      	movs	r1, #0
1a003496:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003498:	3201      	adds	r2, #1
1a00349a:	2a05      	cmp	r2, #5
1a00349c:	d9e8      	bls.n	1a003470 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a00349e:	bc70      	pop	{r4, r5, r6}
1a0034a0:	4770      	bx	lr
1a0034a2:	4770      	bx	lr
1a0034a4:	1a004f28 	.word	0x1a004f28
1a0034a8:	400f4000 	.word	0x400f4000

1a0034ac <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0034ac:	2300      	movs	r3, #0
1a0034ae:	2b03      	cmp	r3, #3
1a0034b0:	d816      	bhi.n	1a0034e0 <Board_TEC_Init+0x34>
{
1a0034b2:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0034b4:	490b      	ldr	r1, [pc, #44]	; (1a0034e4 <Board_TEC_Init+0x38>)
1a0034b6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0034ba:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0034be:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0034c0:	4c09      	ldr	r4, [pc, #36]	; (1a0034e8 <Board_TEC_Init+0x3c>)
1a0034c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0034c6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0034ca:	2001      	movs	r0, #1
1a0034cc:	40a8      	lsls	r0, r5
1a0034ce:	ea21 0100 	bic.w	r1, r1, r0
1a0034d2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0034d6:	3301      	adds	r3, #1
1a0034d8:	2b03      	cmp	r3, #3
1a0034da:	d9eb      	bls.n	1a0034b4 <Board_TEC_Init+0x8>
    }
}
1a0034dc:	bc30      	pop	{r4, r5}
1a0034de:	4770      	bx	lr
1a0034e0:	4770      	bx	lr
1a0034e2:	bf00      	nop
1a0034e4:	1a004f20 	.word	0x1a004f20
1a0034e8:	400f4000 	.word	0x400f4000

1a0034ec <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0034ec:	2300      	movs	r3, #0
1a0034ee:	2b08      	cmp	r3, #8
1a0034f0:	d816      	bhi.n	1a003520 <Board_GPIO_Init+0x34>
{
1a0034f2:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0034f4:	490b      	ldr	r1, [pc, #44]	; (1a003524 <Board_GPIO_Init+0x38>)
1a0034f6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0034fa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0034fe:	784d      	ldrb	r5, [r1, #1]
1a003500:	4c09      	ldr	r4, [pc, #36]	; (1a003528 <Board_GPIO_Init+0x3c>)
1a003502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003506:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00350a:	2001      	movs	r0, #1
1a00350c:	40a8      	lsls	r0, r5
1a00350e:	ea21 0100 	bic.w	r1, r1, r0
1a003512:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003516:	3301      	adds	r3, #1
1a003518:	2b08      	cmp	r3, #8
1a00351a:	d9eb      	bls.n	1a0034f4 <Board_GPIO_Init+0x8>
    }
}
1a00351c:	bc30      	pop	{r4, r5}
1a00351e:	4770      	bx	lr
1a003520:	4770      	bx	lr
1a003522:	bf00      	nop
1a003524:	1a004f34 	.word	0x1a004f34
1a003528:	400f4000 	.word	0x400f4000

1a00352c <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a00352c:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00352e:	4c0b      	ldr	r4, [pc, #44]	; (1a00355c <Board_SPI_Init+0x30>)
1a003530:	4620      	mov	r0, r4
1a003532:	f000 ffb3 	bl	1a00449c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003536:	6863      	ldr	r3, [r4, #4]
1a003538:	f023 0304 	bic.w	r3, r3, #4
1a00353c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00353e:	6823      	ldr	r3, [r4, #0]
1a003540:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003544:	f043 0307 	orr.w	r3, r3, #7
1a003548:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00354a:	4905      	ldr	r1, [pc, #20]	; (1a003560 <Board_SPI_Init+0x34>)
1a00354c:	4620      	mov	r0, r4
1a00354e:	f000 ff86 	bl	1a00445e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003552:	6863      	ldr	r3, [r4, #4]
1a003554:	f043 0302 	orr.w	r3, r3, #2
1a003558:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a00355a:	bd10      	pop	{r4, pc}
1a00355c:	400c5000 	.word	0x400c5000
1a003560:	000186a0 	.word	0x000186a0

1a003564 <Board_I2C_Init>:
{
1a003564:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a003566:	2000      	movs	r0, #0
1a003568:	f000 fed4 	bl	1a004314 <Chip_I2C_Init>
1a00356c:	4b04      	ldr	r3, [pc, #16]	; (1a003580 <Board_I2C_Init+0x1c>)
1a00356e:	f640 0208 	movw	r2, #2056	; 0x808
1a003572:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003576:	4903      	ldr	r1, [pc, #12]	; (1a003584 <Board_I2C_Init+0x20>)
1a003578:	2000      	movs	r0, #0
1a00357a:	f000 fedd 	bl	1a004338 <Chip_I2C_SetClockRate>
}
1a00357e:	bd08      	pop	{r3, pc}
1a003580:	40086000 	.word	0x40086000
1a003584:	000f4240 	.word	0x000f4240

1a003588 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a003588:	b510      	push	{r4, lr}
1a00358a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a00358c:	4c08      	ldr	r4, [pc, #32]	; (1a0035b0 <Board_ADC_Init+0x28>)
1a00358e:	4669      	mov	r1, sp
1a003590:	4620      	mov	r0, r4
1a003592:	f000 f99f 	bl	1a0038d4 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a003596:	4a07      	ldr	r2, [pc, #28]	; (1a0035b4 <Board_ADC_Init+0x2c>)
1a003598:	4669      	mov	r1, sp
1a00359a:	4620      	mov	r0, r4
1a00359c:	f000 f9ba 	bl	1a003914 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0035a0:	2200      	movs	r2, #0
1a0035a2:	4669      	mov	r1, sp
1a0035a4:	4620      	mov	r0, r4
1a0035a6:	f000 f9ce 	bl	1a003946 <Chip_ADC_SetResolution>
}
1a0035aa:	b002      	add	sp, #8
1a0035ac:	bd10      	pop	{r4, pc}
1a0035ae:	bf00      	nop
1a0035b0:	400e3000 	.word	0x400e3000
1a0035b4:	00061a80 	.word	0x00061a80

1a0035b8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0035b8:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0035ba:	4c07      	ldr	r4, [pc, #28]	; (1a0035d8 <Board_Debug_Init+0x20>)
1a0035bc:	4620      	mov	r0, r4
1a0035be:	f000 f8a7 	bl	1a003710 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0035c2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0035c6:	4620      	mov	r0, r4
1a0035c8:	f000 f8ec 	bl	1a0037a4 <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a0035cc:	2303      	movs	r3, #3
1a0035ce:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0035d0:	2301      	movs	r3, #1
1a0035d2:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a0035d4:	bd10      	pop	{r4, pc}
1a0035d6:	bf00      	nop
1a0035d8:	400c1000 	.word	0x400c1000

1a0035dc <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0035dc:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0035de:	f7ff ffeb 	bl	1a0035b8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0035e2:	480b      	ldr	r0, [pc, #44]	; (1a003610 <Board_Init+0x34>)
1a0035e4:	f000 fdf4 	bl	1a0041d0 <Chip_GPIO_Init>

   Board_LED_Init();
1a0035e8:	f7ff ff3e 	bl	1a003468 <Board_LED_Init>
   Board_TEC_Init();
1a0035ec:	f7ff ff5e 	bl	1a0034ac <Board_TEC_Init>
   Board_SPI_Init();
1a0035f0:	f7ff ff9c 	bl	1a00352c <Board_SPI_Init>
   Board_GPIO_Init();
1a0035f4:	f7ff ff7a 	bl	1a0034ec <Board_GPIO_Init>
   Board_I2C_Init();
1a0035f8:	f7ff ffb4 	bl	1a003564 <Board_I2C_Init>
   Board_ADC_Init();
1a0035fc:	f7ff ffc4 	bl	1a003588 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a003600:	4a04      	ldr	r2, [pc, #16]	; (1a003614 <Board_Init+0x38>)
1a003602:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a003606:	f043 0304 	orr.w	r3, r3, #4
1a00360a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a00360e:	bd08      	pop	{r3, pc}
1a003610:	400f4000 	.word	0x400f4000
1a003614:	40043000 	.word	0x40043000

1a003618 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a003618:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a00361a:	4a04      	ldr	r2, [pc, #16]	; (1a00362c <SystemInit+0x14>)
1a00361c:	4b04      	ldr	r3, [pc, #16]	; (1a003630 <SystemInit+0x18>)
1a00361e:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a003620:	f000 fdac 	bl	1a00417c <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a003624:	f000 f858 	bl	1a0036d8 <Board_SystemInit>
}
1a003628:	bd08      	pop	{r3, pc}
1a00362a:	bf00      	nop
1a00362c:	1a000000 	.word	0x1a000000
1a003630:	e000ed08 	.word	0xe000ed08

1a003634 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003634:	2300      	movs	r3, #0
1a003636:	2b25      	cmp	r3, #37	; 0x25
1a003638:	d812      	bhi.n	1a003660 <Board_SetupMuxing+0x2c>
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a00363a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00363c:	4a09      	ldr	r2, [pc, #36]	; (1a003664 <Board_SetupMuxing+0x30>)
1a00363e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003642:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003646:	784a      	ldrb	r2, [r1, #1]
1a003648:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00364a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00364e:	4906      	ldr	r1, [pc, #24]	; (1a003668 <Board_SetupMuxing+0x34>)
1a003650:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003654:	3301      	adds	r3, #1
1a003656:	2b25      	cmp	r3, #37	; 0x25
1a003658:	d9f0      	bls.n	1a00363c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00365a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00365e:	4770      	bx	lr
1a003660:	4770      	bx	lr
1a003662:	bf00      	nop
1a003664:	1a004f58 	.word	0x1a004f58
1a003668:	40086000 	.word	0x40086000

1a00366c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00366c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00366e:	4a17      	ldr	r2, [pc, #92]	; (1a0036cc <Board_SetupClocking+0x60>)
1a003670:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003678:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00367c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003680:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003688:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00368c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003690:	2201      	movs	r2, #1
1a003692:	490f      	ldr	r1, [pc, #60]	; (1a0036d0 <Board_SetupClocking+0x64>)
1a003694:	2006      	movs	r0, #6
1a003696:	f000 fc2f 	bl	1a003ef8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00369a:	2400      	movs	r4, #0
1a00369c:	e00a      	b.n	1a0036b4 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00369e:	480d      	ldr	r0, [pc, #52]	; (1a0036d4 <Board_SetupClocking+0x68>)
1a0036a0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0036a4:	78cb      	ldrb	r3, [r1, #3]
1a0036a6:	788a      	ldrb	r2, [r1, #2]
1a0036a8:	7849      	ldrb	r1, [r1, #1]
1a0036aa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0036ae:	f000 fb7f 	bl	1a003db0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0036b2:	3401      	adds	r4, #1
1a0036b4:	2c02      	cmp	r4, #2
1a0036b6:	d9f2      	bls.n	1a00369e <Board_SetupClocking+0x32>
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0036b8:	4b04      	ldr	r3, [pc, #16]	; (1a0036cc <Board_SetupClocking+0x60>)
1a0036ba:	685a      	ldr	r2, [r3, #4]
1a0036bc:	f022 020c 	bic.w	r2, r2, #12
1a0036c0:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0036c2:	685a      	ldr	r2, [r3, #4]
1a0036c4:	f042 0203 	orr.w	r2, r2, #3
1a0036c8:	605a      	str	r2, [r3, #4]
}
1a0036ca:	bd10      	pop	{r4, pc}
1a0036cc:	40043000 	.word	0x40043000
1a0036d0:	0c28cb00 	.word	0x0c28cb00
1a0036d4:	1a004f4c 	.word	0x1a004f4c

1a0036d8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0036d8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0036da:	f7ff ffab 	bl	1a003634 <Board_SetupMuxing>
    Board_SetupClocking();
1a0036de:	f7ff ffc5 	bl	1a00366c <Board_SetupClocking>
}
1a0036e2:	bd08      	pop	{r3, pc}

1a0036e4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0036e4:	4b09      	ldr	r3, [pc, #36]	; (1a00370c <Chip_UART_GetIndex+0x28>)
1a0036e6:	4298      	cmp	r0, r3
1a0036e8:	d009      	beq.n	1a0036fe <Chip_UART_GetIndex+0x1a>
1a0036ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0036ee:	4298      	cmp	r0, r3
1a0036f0:	d007      	beq.n	1a003702 <Chip_UART_GetIndex+0x1e>
1a0036f2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0036f6:	4298      	cmp	r0, r3
1a0036f8:	d005      	beq.n	1a003706 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0036fa:	2000      	movs	r0, #0
1a0036fc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0036fe:	2002      	movs	r0, #2
1a003700:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a003702:	2003      	movs	r0, #3
1a003704:	4770      	bx	lr
			return 1;
1a003706:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003708:	4770      	bx	lr
1a00370a:	bf00      	nop
1a00370c:	400c1000 	.word	0x400c1000

1a003710 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a003710:	b530      	push	{r4, r5, lr}
1a003712:	b083      	sub	sp, #12
1a003714:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003716:	f7ff ffe5 	bl	1a0036e4 <Chip_UART_GetIndex>
1a00371a:	2301      	movs	r3, #1
1a00371c:	461a      	mov	r2, r3
1a00371e:	4619      	mov	r1, r3
1a003720:	4d0e      	ldr	r5, [pc, #56]	; (1a00375c <Chip_UART_Init+0x4c>)
1a003722:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003726:	f000 fb89 	bl	1a003e3c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00372a:	2307      	movs	r3, #7
1a00372c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00372e:	2300      	movs	r3, #0
1a003730:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a003732:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003734:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003736:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003738:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00373a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00373c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00373e:	4b08      	ldr	r3, [pc, #32]	; (1a003760 <Chip_UART_Init+0x50>)
1a003740:	429c      	cmp	r4, r3
1a003742:	d006      	beq.n	1a003752 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003744:	2303      	movs	r3, #3
1a003746:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003748:	2310      	movs	r3, #16
1a00374a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00374c:	9b01      	ldr	r3, [sp, #4]
}
1a00374e:	b003      	add	sp, #12
1a003750:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a003752:	2300      	movs	r3, #0
1a003754:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003756:	69a3      	ldr	r3, [r4, #24]
1a003758:	9301      	str	r3, [sp, #4]
1a00375a:	e7f3      	b.n	1a003744 <Chip_UART_Init+0x34>
1a00375c:	1a004ff8 	.word	0x1a004ff8
1a003760:	40082000 	.word	0x40082000

1a003764 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003764:	b538      	push	{r3, r4, r5, lr}
1a003766:	4605      	mov	r5, r0
1a003768:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00376a:	f7ff ffbb 	bl	1a0036e4 <Chip_UART_GetIndex>
1a00376e:	4b0c      	ldr	r3, [pc, #48]	; (1a0037a0 <Chip_UART_SetBaud+0x3c>)
1a003770:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003774:	f000 fb9a 	bl	1a003eac <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003778:	0123      	lsls	r3, r4, #4
1a00377a:	fbb0 f3f3 	udiv	r3, r0, r3
1a00377e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003780:	68ea      	ldr	r2, [r5, #12]
1a003782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003786:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a003788:	6029      	str	r1, [r5, #0]
1a00378a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00378e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003790:	68ea      	ldr	r2, [r5, #12]
1a003792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003796:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003798:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a00379c:	0900      	lsrs	r0, r0, #4
1a00379e:	bd38      	pop	{r3, r4, r5, pc}
1a0037a0:	1a004ff0 	.word	0x1a004ff0

1a0037a4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0037a8:	b083      	sub	sp, #12
1a0037aa:	4683      	mov	fp, r0
1a0037ac:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0037ae:	f7ff ff99 	bl	1a0036e4 <Chip_UART_GetIndex>
1a0037b2:	4b35      	ldr	r3, [pc, #212]	; (1a003888 <Chip_UART_SetBaudFDR+0xe4>)
1a0037b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0037b8:	f000 fb78 	bl	1a003eac <Chip_Clock_GetRate>
1a0037bc:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0037be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0037c2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0037c4:	2300      	movs	r3, #0
1a0037c6:	9301      	str	r3, [sp, #4]
1a0037c8:	46a2      	mov	sl, r4
1a0037ca:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0037cc:	e02a      	b.n	1a003824 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0037ce:	4242      	negs	r2, r0
				div ++;
1a0037d0:	1c4b      	adds	r3, r1, #1
1a0037d2:	e017      	b.n	1a003804 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0037d4:	b30a      	cbz	r2, 1a00381a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0037d6:	4617      	mov	r7, r2
			sd = d;
1a0037d8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0037da:	46a2      	mov	sl, r4
			sdiv = div;
1a0037dc:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0037de:	3501      	adds	r5, #1
1a0037e0:	42ac      	cmp	r4, r5
1a0037e2:	d91e      	bls.n	1a003822 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0037e4:	0933      	lsrs	r3, r6, #4
1a0037e6:	0730      	lsls	r0, r6, #28
1a0037e8:	fba4 0100 	umull	r0, r1, r4, r0
1a0037ec:	fb04 1103 	mla	r1, r4, r3, r1
1a0037f0:	1962      	adds	r2, r4, r5
1a0037f2:	fb08 f202 	mul.w	r2, r8, r2
1a0037f6:	2300      	movs	r3, #0
1a0037f8:	f001 f8bc 	bl	1a004974 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0037fc:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0037fe:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a003800:	2800      	cmp	r0, #0
1a003802:	dbe4      	blt.n	1a0037ce <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003804:	4297      	cmp	r7, r2
1a003806:	d3ea      	bcc.n	1a0037de <Chip_UART_SetBaudFDR+0x3a>
1a003808:	2b00      	cmp	r3, #0
1a00380a:	d0e8      	beq.n	1a0037de <Chip_UART_SetBaudFDR+0x3a>
1a00380c:	0c19      	lsrs	r1, r3, #16
1a00380e:	d1e6      	bne.n	1a0037de <Chip_UART_SetBaudFDR+0x3a>
1a003810:	2b02      	cmp	r3, #2
1a003812:	d8df      	bhi.n	1a0037d4 <Chip_UART_SetBaudFDR+0x30>
1a003814:	2d00      	cmp	r5, #0
1a003816:	d0dd      	beq.n	1a0037d4 <Chip_UART_SetBaudFDR+0x30>
1a003818:	e7e1      	b.n	1a0037de <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00381a:	4617      	mov	r7, r2
			sd = d;
1a00381c:	9501      	str	r5, [sp, #4]
			sm = m;
1a00381e:	46a2      	mov	sl, r4
			sdiv = div;
1a003820:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003822:	3401      	adds	r4, #1
1a003824:	b11f      	cbz	r7, 1a00382e <Chip_UART_SetBaudFDR+0x8a>
1a003826:	2c0f      	cmp	r4, #15
1a003828:	d801      	bhi.n	1a00382e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00382a:	2500      	movs	r5, #0
1a00382c:	e7d8      	b.n	1a0037e0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00382e:	f1b9 0f00 	cmp.w	r9, #0
1a003832:	d024      	beq.n	1a00387e <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003834:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00383c:	f8cb 300c 	str.w	r3, [fp, #12]
1a003840:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a003844:	f8cb 3000 	str.w	r3, [fp]
1a003848:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00384c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003850:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003858:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00385c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003860:	b2db      	uxtb	r3, r3
1a003862:	9901      	ldr	r1, [sp, #4]
1a003864:	f001 020f 	and.w	r2, r1, #15
1a003868:	4313      	orrs	r3, r2
1a00386a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00386e:	0933      	lsrs	r3, r6, #4
1a003870:	fb0a f303 	mul.w	r3, sl, r3
1a003874:	448a      	add	sl, r1
1a003876:	fb09 f90a 	mul.w	r9, r9, sl
1a00387a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00387e:	4648      	mov	r0, r9
1a003880:	b003      	add	sp, #12
1a003882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003886:	bf00      	nop
1a003888:	1a004ff0 	.word	0x1a004ff0

1a00388c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00388c:	4b03      	ldr	r3, [pc, #12]	; (1a00389c <Chip_ADC_GetClockIndex+0x10>)
1a00388e:	4298      	cmp	r0, r3
1a003890:	d001      	beq.n	1a003896 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a003892:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003894:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a003896:	2004      	movs	r0, #4
1a003898:	4770      	bx	lr
1a00389a:	bf00      	nop
1a00389c:	400e4000 	.word	0x400e4000

1a0038a0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0038a0:	b570      	push	{r4, r5, r6, lr}
1a0038a2:	460d      	mov	r5, r1
1a0038a4:	4614      	mov	r4, r2
1a0038a6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0038a8:	f7ff fff0 	bl	1a00388c <Chip_ADC_GetClockIndex>
1a0038ac:	f000 fafe 	bl	1a003eac <Chip_Clock_GetRate>
	if (burstMode) {
1a0038b0:	b965      	cbnz	r5, 1a0038cc <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0038b2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0038b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0038ba:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0038be:	0064      	lsls	r4, r4, #1
1a0038c0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0038c4:	b2c0      	uxtb	r0, r0
1a0038c6:	3801      	subs	r0, #1
	return div;
}
1a0038c8:	b2c0      	uxtb	r0, r0
1a0038ca:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a0038cc:	fb04 f406 	mul.w	r4, r4, r6
1a0038d0:	e7f3      	b.n	1a0038ba <getClkDiv+0x1a>
1a0038d2:	Address 0x000000001a0038d2 is out of bounds.


1a0038d4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0038d4:	b538      	push	{r3, r4, r5, lr}
1a0038d6:	4605      	mov	r5, r0
1a0038d8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0038da:	f7ff ffd7 	bl	1a00388c <Chip_ADC_GetClockIndex>
1a0038de:	2301      	movs	r3, #1
1a0038e0:	461a      	mov	r2, r3
1a0038e2:	4619      	mov	r1, r3
1a0038e4:	f000 faaa 	bl	1a003e3c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0038e8:	2100      	movs	r1, #0
1a0038ea:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0038ec:	4a08      	ldr	r2, [pc, #32]	; (1a003910 <Chip_ADC_Init+0x3c>)
1a0038ee:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0038f0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0038f2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0038f4:	230b      	movs	r3, #11
1a0038f6:	4628      	mov	r0, r5
1a0038f8:	f7ff ffd2 	bl	1a0038a0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0038fc:	0200      	lsls	r0, r0, #8
1a0038fe:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003902:	7920      	ldrb	r0, [r4, #4]
1a003904:	0440      	lsls	r0, r0, #17
1a003906:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00390a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00390c:	6028      	str	r0, [r5, #0]
}
1a00390e:	bd38      	pop	{r3, r4, r5, pc}
1a003910:	00061a80 	.word	0x00061a80

1a003914 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003914:	b570      	push	{r4, r5, r6, lr}
1a003916:	4605      	mov	r5, r0
1a003918:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00391a:	6804      	ldr	r4, [r0, #0]
1a00391c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003920:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003924:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003926:	790b      	ldrb	r3, [r1, #4]
1a003928:	f1c3 030b 	rsb	r3, r3, #11
1a00392c:	b2db      	uxtb	r3, r3
1a00392e:	7949      	ldrb	r1, [r1, #5]
1a003930:	f7ff ffb6 	bl	1a0038a0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003934:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003938:	7930      	ldrb	r0, [r6, #4]
1a00393a:	0440      	lsls	r0, r0, #17
1a00393c:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003940:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a003942:	6028      	str	r0, [r5, #0]
}
1a003944:	bd70      	pop	{r4, r5, r6, pc}

1a003946 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003946:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003948:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00394a:	680a      	ldr	r2, [r1, #0]
1a00394c:	f7ff ffe2 	bl	1a003914 <Chip_ADC_SetSampleRate>
}
1a003950:	bd08      	pop	{r3, pc}
1a003952:	Address 0x000000001a003952 is out of bounds.


1a003954 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003954:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003956:	2069      	movs	r0, #105	; 0x69
1a003958:	f000 faa8 	bl	1a003eac <Chip_Clock_GetRate>
1a00395c:	4b01      	ldr	r3, [pc, #4]	; (1a003964 <SystemCoreClockUpdate+0x10>)
1a00395e:	6018      	str	r0, [r3, #0]
}
1a003960:	bd08      	pop	{r3, pc}
1a003962:	bf00      	nop
1a003964:	10002d08 	.word	0x10002d08

1a003968 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003968:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00396a:	680b      	ldr	r3, [r1, #0]
1a00396c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003970:	d002      	beq.n	1a003978 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a003972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003976:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003978:	4607      	mov	r7, r0
1a00397a:	2501      	movs	r5, #1
1a00397c:	e03b      	b.n	1a0039f6 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00397e:	694b      	ldr	r3, [r1, #20]
1a003980:	fb03 f302 	mul.w	r3, r3, r2
1a003984:	fbb3 f3f5 	udiv	r3, r3, r5
1a003988:	e014      	b.n	1a0039b4 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00398a:	461c      	mov	r4, r3
1a00398c:	e020      	b.n	1a0039d0 <pll_calc_divs+0x68>
		return -val;
1a00398e:	f1cc 0c00 	rsb	ip, ip, #0
1a003992:	e020      	b.n	1a0039d6 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a003994:	3201      	adds	r2, #1
1a003996:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00399a:	dc26      	bgt.n	1a0039ea <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a00399c:	680c      	ldr	r4, [r1, #0]
1a00399e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0039a2:	d0ec      	beq.n	1a00397e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0039a4:	1c73      	adds	r3, r6, #1
1a0039a6:	fa02 fc03 	lsl.w	ip, r2, r3
1a0039aa:	694b      	ldr	r3, [r1, #20]
1a0039ac:	fb03 f30c 	mul.w	r3, r3, ip
1a0039b0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0039b4:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a003a04 <pll_calc_divs+0x9c>
1a0039b8:	4563      	cmp	r3, ip
1a0039ba:	d9eb      	bls.n	1a003994 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0039bc:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a003a08 <pll_calc_divs+0xa0>
1a0039c0:	4563      	cmp	r3, ip
1a0039c2:	d812      	bhi.n	1a0039ea <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0039c4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0039c8:	d1df      	bne.n	1a00398a <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0039ca:	1c74      	adds	r4, r6, #1
1a0039cc:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0039d0:	ebb0 0c04 	subs.w	ip, r0, r4
1a0039d4:	d4db      	bmi.n	1a00398e <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0039d6:	4567      	cmp	r7, ip
1a0039d8:	d9dc      	bls.n	1a003994 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0039da:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0039dc:	1c77      	adds	r7, r6, #1
1a0039de:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0039e0:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0039e2:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0039e4:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0039e6:	4667      	mov	r7, ip
1a0039e8:	e7d4      	b.n	1a003994 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0039ea:	3601      	adds	r6, #1
1a0039ec:	2e03      	cmp	r6, #3
1a0039ee:	dc01      	bgt.n	1a0039f4 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0039f0:	2201      	movs	r2, #1
1a0039f2:	e7d0      	b.n	1a003996 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0039f4:	3501      	adds	r5, #1
1a0039f6:	2d04      	cmp	r5, #4
1a0039f8:	dc01      	bgt.n	1a0039fe <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0039fa:	2600      	movs	r6, #0
1a0039fc:	e7f6      	b.n	1a0039ec <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0039fe:	bcf0      	pop	{r4, r5, r6, r7}
1a003a00:	4770      	bx	lr
1a003a02:	bf00      	nop
1a003a04:	094c5eff 	.word	0x094c5eff
1a003a08:	1312d000 	.word	0x1312d000

1a003a0c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003a0e:	b099      	sub	sp, #100	; 0x64
1a003a10:	4605      	mov	r5, r0
1a003a12:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a003a14:	225c      	movs	r2, #92	; 0x5c
1a003a16:	2100      	movs	r1, #0
1a003a18:	a801      	add	r0, sp, #4
1a003a1a:	f001 f95a 	bl	1a004cd2 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003a1e:	2380      	movs	r3, #128	; 0x80
1a003a20:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a003a22:	6963      	ldr	r3, [r4, #20]
1a003a24:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a003a26:	7923      	ldrb	r3, [r4, #4]
1a003a28:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003a2c:	4669      	mov	r1, sp
1a003a2e:	4628      	mov	r0, r5
1a003a30:	f7ff ff9a 	bl	1a003968 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a003a34:	9b06      	ldr	r3, [sp, #24]
1a003a36:	42ab      	cmp	r3, r5
1a003a38:	d027      	beq.n	1a003a8a <pll_get_frac+0x7e>
	if (val < 0)
1a003a3a:	1aeb      	subs	r3, r5, r3
1a003a3c:	d42e      	bmi.n	1a003a9c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a003a3e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003a40:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a003a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003a46:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003a48:	6963      	ldr	r3, [r4, #20]
1a003a4a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003a4c:	7923      	ldrb	r3, [r4, #4]
1a003a4e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a003a52:	a910      	add	r1, sp, #64	; 0x40
1a003a54:	4628      	mov	r0, r5
1a003a56:	f7ff ff87 	bl	1a003968 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003a5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003a5c:	42ab      	cmp	r3, r5
1a003a5e:	d01f      	beq.n	1a003aa0 <pll_get_frac+0x94>
	if (val < 0)
1a003a60:	1aeb      	subs	r3, r5, r3
1a003a62:	d425      	bmi.n	1a003ab0 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003a64:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003a66:	4b2b      	ldr	r3, [pc, #172]	; (1a003b14 <pll_get_frac+0x108>)
1a003a68:	429d      	cmp	r5, r3
1a003a6a:	d923      	bls.n	1a003ab4 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a003a6e:	1aed      	subs	r5, r5, r3
1a003a70:	d433      	bmi.n	1a003ada <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a003a72:	42ae      	cmp	r6, r5
1a003a74:	dc3b      	bgt.n	1a003aee <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003a76:	42be      	cmp	r6, r7
1a003a78:	dc31      	bgt.n	1a003ade <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003a7a:	466d      	mov	r5, sp
1a003a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003a88:	e006      	b.n	1a003a98 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003a8a:	466d      	mov	r5, sp
1a003a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003a90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003a98:	b019      	add	sp, #100	; 0x64
1a003a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003a9c:	425b      	negs	r3, r3
1a003a9e:	e7ce      	b.n	1a003a3e <pll_get_frac+0x32>
		*ppll = pll[2];
1a003aa0:	ad10      	add	r5, sp, #64	; 0x40
1a003aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003aa6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003aaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a003aae:	e7f3      	b.n	1a003a98 <pll_get_frac+0x8c>
		return -val;
1a003ab0:	425b      	negs	r3, r3
1a003ab2:	e7d7      	b.n	1a003a64 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003ab4:	2340      	movs	r3, #64	; 0x40
1a003ab6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003ab8:	6963      	ldr	r3, [r4, #20]
1a003aba:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003abc:	a908      	add	r1, sp, #32
1a003abe:	4628      	mov	r0, r5
1a003ac0:	f7ff ff52 	bl	1a003968 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003ac6:	42ab      	cmp	r3, r5
1a003ac8:	d1d0      	bne.n	1a003a6c <pll_get_frac+0x60>
			*ppll = pll[1];
1a003aca:	ad08      	add	r5, sp, #32
1a003acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003ad0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003ad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003ad8:	e7de      	b.n	1a003a98 <pll_get_frac+0x8c>
		return -val;
1a003ada:	426d      	negs	r5, r5
1a003adc:	e7c9      	b.n	1a003a72 <pll_get_frac+0x66>
			*ppll = pll[2];
1a003ade:	ad10      	add	r5, sp, #64	; 0x40
1a003ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003ae4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003aec:	e7d4      	b.n	1a003a98 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a003aee:	42af      	cmp	r7, r5
1a003af0:	db07      	blt.n	1a003b02 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a003af2:	ad08      	add	r5, sp, #32
1a003af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003af8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003b00:	e7ca      	b.n	1a003a98 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a003b02:	ad10      	add	r5, sp, #64	; 0x40
1a003b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003b08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003b10:	e7c2      	b.n	1a003a98 <pll_get_frac+0x8c>
1a003b12:	bf00      	nop
1a003b14:	068e7780 	.word	0x068e7780

1a003b18 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003b18:	b430      	push	{r4, r5}
1a003b1a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003b1c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003b1e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003b20:	e000      	b.n	1a003b24 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a003b22:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003b24:	281c      	cmp	r0, #28
1a003b26:	d118      	bne.n	1a003b5a <Chip_Clock_FindBaseClock+0x42>
1a003b28:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003b2c:	0051      	lsls	r1, r2, #1
1a003b2e:	4a0c      	ldr	r2, [pc, #48]	; (1a003b60 <Chip_Clock_FindBaseClock+0x48>)
1a003b30:	440a      	add	r2, r1
1a003b32:	7914      	ldrb	r4, [r2, #4]
1a003b34:	4284      	cmp	r4, r0
1a003b36:	d010      	beq.n	1a003b5a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003b38:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003b3c:	004a      	lsls	r2, r1, #1
1a003b3e:	4908      	ldr	r1, [pc, #32]	; (1a003b60 <Chip_Clock_FindBaseClock+0x48>)
1a003b40:	5a8a      	ldrh	r2, [r1, r2]
1a003b42:	42aa      	cmp	r2, r5
1a003b44:	d8ed      	bhi.n	1a003b22 <Chip_Clock_FindBaseClock+0xa>
1a003b46:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003b4a:	0051      	lsls	r1, r2, #1
1a003b4c:	4a04      	ldr	r2, [pc, #16]	; (1a003b60 <Chip_Clock_FindBaseClock+0x48>)
1a003b4e:	440a      	add	r2, r1
1a003b50:	8852      	ldrh	r2, [r2, #2]
1a003b52:	42aa      	cmp	r2, r5
1a003b54:	d3e5      	bcc.n	1a003b22 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003b56:	4620      	mov	r0, r4
1a003b58:	e7e4      	b.n	1a003b24 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003b5a:	bc30      	pop	{r4, r5}
1a003b5c:	4770      	bx	lr
1a003b5e:	bf00      	nop
1a003b60:	1a00500c 	.word	0x1a00500c

1a003b64 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003b64:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003b6a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003b6c:	4a0d      	ldr	r2, [pc, #52]	; (1a003ba4 <Chip_Clock_EnableCrystal+0x40>)
1a003b6e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003b70:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003b74:	6992      	ldr	r2, [r2, #24]
1a003b76:	428a      	cmp	r2, r1
1a003b78:	d001      	beq.n	1a003b7e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003b7a:	4a0a      	ldr	r2, [pc, #40]	; (1a003ba4 <Chip_Clock_EnableCrystal+0x40>)
1a003b7c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a003b7e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a003b82:	4a09      	ldr	r2, [pc, #36]	; (1a003ba8 <Chip_Clock_EnableCrystal+0x44>)
1a003b84:	6811      	ldr	r1, [r2, #0]
1a003b86:	4a09      	ldr	r2, [pc, #36]	; (1a003bac <Chip_Clock_EnableCrystal+0x48>)
1a003b88:	4291      	cmp	r1, r2
1a003b8a:	d901      	bls.n	1a003b90 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003b8c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003b90:	4a04      	ldr	r2, [pc, #16]	; (1a003ba4 <Chip_Clock_EnableCrystal+0x40>)
1a003b92:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003b94:	9b01      	ldr	r3, [sp, #4]
1a003b96:	1e5a      	subs	r2, r3, #1
1a003b98:	9201      	str	r2, [sp, #4]
1a003b9a:	2b00      	cmp	r3, #0
1a003b9c:	d1fa      	bne.n	1a003b94 <Chip_Clock_EnableCrystal+0x30>
}
1a003b9e:	b002      	add	sp, #8
1a003ba0:	4770      	bx	lr
1a003ba2:	bf00      	nop
1a003ba4:	40050000 	.word	0x40050000
1a003ba8:	1a004f48 	.word	0x1a004f48
1a003bac:	01312cff 	.word	0x01312cff

1a003bb0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a003bb0:	3012      	adds	r0, #18
1a003bb2:	4b05      	ldr	r3, [pc, #20]	; (1a003bc8 <Chip_Clock_GetDividerSource+0x18>)
1a003bb4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003bb8:	f010 0f01 	tst.w	r0, #1
1a003bbc:	d102      	bne.n	1a003bc4 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003bbe:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003bc2:	4770      	bx	lr
		return CLKINPUT_PD;
1a003bc4:	2011      	movs	r0, #17
}
1a003bc6:	4770      	bx	lr
1a003bc8:	40050000 	.word	0x40050000

1a003bcc <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003bcc:	f100 0212 	add.w	r2, r0, #18
1a003bd0:	4b03      	ldr	r3, [pc, #12]	; (1a003be0 <Chip_Clock_GetDividerDivisor+0x14>)
1a003bd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003bd6:	4b03      	ldr	r3, [pc, #12]	; (1a003be4 <Chip_Clock_GetDividerDivisor+0x18>)
1a003bd8:	5c18      	ldrb	r0, [r3, r0]
}
1a003bda:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003bde:	4770      	bx	lr
1a003be0:	40050000 	.word	0x40050000
1a003be4:	1a005004 	.word	0x1a005004

1a003be8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003be8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003bea:	2810      	cmp	r0, #16
1a003bec:	d80a      	bhi.n	1a003c04 <Chip_Clock_GetClockInputHz+0x1c>
1a003bee:	e8df f000 	tbb	[pc, r0]
1a003bf2:	0b42      	.short	0x0b42
1a003bf4:	091f160d 	.word	0x091f160d
1a003bf8:	2b282522 	.word	0x2b282522
1a003bfc:	322e0909 	.word	0x322e0909
1a003c00:	3a36      	.short	0x3a36
1a003c02:	3e          	.byte	0x3e
1a003c03:	00          	.byte	0x00
	uint32_t rate = 0;
1a003c04:	2000      	movs	r0, #0
1a003c06:	e038      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003c08:	481e      	ldr	r0, [pc, #120]	; (1a003c84 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003c0a:	e036      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003c0c:	4b1e      	ldr	r3, [pc, #120]	; (1a003c88 <Chip_Clock_GetClockInputHz+0xa0>)
1a003c0e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003c12:	f003 0307 	and.w	r3, r3, #7
1a003c16:	2b04      	cmp	r3, #4
1a003c18:	d130      	bne.n	1a003c7c <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a003c1a:	2000      	movs	r0, #0
1a003c1c:	e02d      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003c1e:	4b1a      	ldr	r3, [pc, #104]	; (1a003c88 <Chip_Clock_GetClockInputHz+0xa0>)
1a003c20:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003c24:	f003 0307 	and.w	r3, r3, #7
1a003c28:	2b04      	cmp	r3, #4
1a003c2a:	d029      	beq.n	1a003c80 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003c2c:	4817      	ldr	r0, [pc, #92]	; (1a003c8c <Chip_Clock_GetClockInputHz+0xa4>)
1a003c2e:	e024      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003c30:	4b17      	ldr	r3, [pc, #92]	; (1a003c90 <Chip_Clock_GetClockInputHz+0xa8>)
1a003c32:	6818      	ldr	r0, [r3, #0]
		break;
1a003c34:	e021      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003c36:	4b17      	ldr	r3, [pc, #92]	; (1a003c94 <Chip_Clock_GetClockInputHz+0xac>)
1a003c38:	6818      	ldr	r0, [r3, #0]
		break;
1a003c3a:	e01e      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003c3c:	4b16      	ldr	r3, [pc, #88]	; (1a003c98 <Chip_Clock_GetClockInputHz+0xb0>)
1a003c3e:	6818      	ldr	r0, [r3, #0]
		break;
1a003c40:	e01b      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a003c42:	4b15      	ldr	r3, [pc, #84]	; (1a003c98 <Chip_Clock_GetClockInputHz+0xb0>)
1a003c44:	6858      	ldr	r0, [r3, #4]
		break;
1a003c46:	e018      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003c48:	f000 f86a 	bl	1a003d20 <Chip_Clock_GetMainPLLHz>
		break;
1a003c4c:	e015      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003c4e:	2100      	movs	r1, #0
1a003c50:	f000 f89c 	bl	1a003d8c <Chip_Clock_GetDivRate>
		break;
1a003c54:	e011      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003c56:	2101      	movs	r1, #1
1a003c58:	f000 f898 	bl	1a003d8c <Chip_Clock_GetDivRate>
		break;
1a003c5c:	e00d      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003c5e:	2102      	movs	r1, #2
1a003c60:	f000 f894 	bl	1a003d8c <Chip_Clock_GetDivRate>
		break;
1a003c64:	e009      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003c66:	2103      	movs	r1, #3
1a003c68:	f000 f890 	bl	1a003d8c <Chip_Clock_GetDivRate>
		break;
1a003c6c:	e005      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003c6e:	2104      	movs	r1, #4
1a003c70:	f000 f88c 	bl	1a003d8c <Chip_Clock_GetDivRate>
		break;
1a003c74:	e001      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a003c76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003c7a:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003c7c:	4803      	ldr	r0, [pc, #12]	; (1a003c8c <Chip_Clock_GetClockInputHz+0xa4>)
1a003c7e:	e7fc      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a003c80:	4806      	ldr	r0, [pc, #24]	; (1a003c9c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a003c82:	e7fa      	b.n	1a003c7a <Chip_Clock_GetClockInputHz+0x92>
1a003c84:	00b71b00 	.word	0x00b71b00
1a003c88:	40043000 	.word	0x40043000
1a003c8c:	017d7840 	.word	0x017d7840
1a003c90:	1a004f1c 	.word	0x1a004f1c
1a003c94:	1a004f48 	.word	0x1a004f48
1a003c98:	10002cac 	.word	0x10002cac
1a003c9c:	02faf080 	.word	0x02faf080

1a003ca0 <Chip_Clock_CalcMainPLLValue>:
{
1a003ca0:	b538      	push	{r3, r4, r5, lr}
1a003ca2:	4605      	mov	r5, r0
1a003ca4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003ca6:	7908      	ldrb	r0, [r1, #4]
1a003ca8:	f7ff ff9e 	bl	1a003be8 <Chip_Clock_GetClockInputHz>
1a003cac:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a003cae:	4b19      	ldr	r3, [pc, #100]	; (1a003d14 <Chip_Clock_CalcMainPLLValue+0x74>)
1a003cb0:	442b      	add	r3, r5
1a003cb2:	4a19      	ldr	r2, [pc, #100]	; (1a003d18 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003cb4:	4293      	cmp	r3, r2
1a003cb6:	d821      	bhi.n	1a003cfc <Chip_Clock_CalcMainPLLValue+0x5c>
1a003cb8:	b318      	cbz	r0, 1a003d02 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003cba:	2380      	movs	r3, #128	; 0x80
1a003cbc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a003cbe:	2300      	movs	r3, #0
1a003cc0:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003cc2:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003cc4:	fbb5 f3f0 	udiv	r3, r5, r0
1a003cc8:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003cca:	4a14      	ldr	r2, [pc, #80]	; (1a003d1c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003ccc:	4295      	cmp	r5, r2
1a003cce:	d903      	bls.n	1a003cd8 <Chip_Clock_CalcMainPLLValue+0x38>
1a003cd0:	fb03 f000 	mul.w	r0, r3, r0
1a003cd4:	42a8      	cmp	r0, r5
1a003cd6:	d007      	beq.n	1a003ce8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003cd8:	4621      	mov	r1, r4
1a003cda:	4628      	mov	r0, r5
1a003cdc:	f7ff fe96 	bl	1a003a0c <pll_get_frac>
		if (!ppll->nsel) {
1a003ce0:	68a3      	ldr	r3, [r4, #8]
1a003ce2:	b18b      	cbz	r3, 1a003d08 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003ce4:	3b01      	subs	r3, #1
1a003ce6:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003ce8:	6923      	ldr	r3, [r4, #16]
1a003cea:	b183      	cbz	r3, 1a003d0e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003cec:	68e2      	ldr	r2, [r4, #12]
1a003cee:	b10a      	cbz	r2, 1a003cf4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003cf0:	3a01      	subs	r2, #1
1a003cf2:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003cf4:	3b01      	subs	r3, #1
1a003cf6:	6123      	str	r3, [r4, #16]
	return 0;
1a003cf8:	2000      	movs	r0, #0
}
1a003cfa:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003d00:	e7fb      	b.n	1a003cfa <Chip_Clock_CalcMainPLLValue+0x5a>
1a003d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003d06:	e7f8      	b.n	1a003cfa <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003d0c:	e7f5      	b.n	1a003cfa <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003d12:	e7f2      	b.n	1a003cfa <Chip_Clock_CalcMainPLLValue+0x5a>
1a003d14:	ff6b3a10 	.word	0xff6b3a10
1a003d18:	0b940510 	.word	0x0b940510
1a003d1c:	094c5eff 	.word	0x094c5eff

1a003d20 <Chip_Clock_GetMainPLLHz>:
{
1a003d20:	b530      	push	{r4, r5, lr}
1a003d22:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003d24:	4d17      	ldr	r5, [pc, #92]	; (1a003d84 <Chip_Clock_GetMainPLLHz+0x64>)
1a003d26:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003d28:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003d2c:	f7ff ff5c 	bl	1a003be8 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003d30:	4b15      	ldr	r3, [pc, #84]	; (1a003d88 <Chip_Clock_GetMainPLLHz+0x68>)
1a003d32:	681b      	ldr	r3, [r3, #0]
1a003d34:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003d36:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003d38:	f013 0f01 	tst.w	r3, #1
1a003d3c:	d01f      	beq.n	1a003d7e <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a003d3e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003d42:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003d46:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003d4a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003d4e:	3301      	adds	r3, #1
	n = nsel + 1;
1a003d50:	3201      	adds	r2, #1
	p = ptab[psel];
1a003d52:	f10d 0c08 	add.w	ip, sp, #8
1a003d56:	4461      	add	r1, ip
1a003d58:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003d5c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003d60:	d108      	bne.n	1a003d74 <Chip_Clock_GetMainPLLHz+0x54>
1a003d62:	b93d      	cbnz	r5, 1a003d74 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003d64:	0049      	lsls	r1, r1, #1
1a003d66:	fbb3 f3f1 	udiv	r3, r3, r1
1a003d6a:	fbb0 f0f2 	udiv	r0, r0, r2
1a003d6e:	fb00 f003 	mul.w	r0, r0, r3
1a003d72:	e005      	b.n	1a003d80 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a003d74:	fbb0 f0f2 	udiv	r0, r0, r2
1a003d78:	fb03 f000 	mul.w	r0, r3, r0
1a003d7c:	e000      	b.n	1a003d80 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a003d7e:	2000      	movs	r0, #0
}
1a003d80:	b003      	add	sp, #12
1a003d82:	bd30      	pop	{r4, r5, pc}
1a003d84:	40050000 	.word	0x40050000
1a003d88:	1a005000 	.word	0x1a005000

1a003d8c <Chip_Clock_GetDivRate>:
{
1a003d8c:	b538      	push	{r3, r4, r5, lr}
1a003d8e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a003d90:	4608      	mov	r0, r1
1a003d92:	f7ff ff0d 	bl	1a003bb0 <Chip_Clock_GetDividerSource>
1a003d96:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003d98:	4620      	mov	r0, r4
1a003d9a:	f7ff ff17 	bl	1a003bcc <Chip_Clock_GetDividerDivisor>
1a003d9e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003da0:	4628      	mov	r0, r5
1a003da2:	f7ff ff21 	bl	1a003be8 <Chip_Clock_GetClockInputHz>
1a003da6:	3401      	adds	r4, #1
}
1a003da8:	fbb0 f0f4 	udiv	r0, r0, r4
1a003dac:	bd38      	pop	{r3, r4, r5, pc}
1a003dae:	Address 0x000000001a003dae is out of bounds.


1a003db0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003db0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003db2:	f100 0416 	add.w	r4, r0, #22
1a003db6:	00a4      	lsls	r4, r4, #2
1a003db8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003dbc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003dc0:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a003dc2:	281b      	cmp	r0, #27
1a003dc4:	d813      	bhi.n	1a003dee <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003dc6:	2911      	cmp	r1, #17
1a003dc8:	d01a      	beq.n	1a003e00 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003dca:	4d0e      	ldr	r5, [pc, #56]	; (1a003e04 <Chip_Clock_SetBaseClock+0x54>)
1a003dcc:	4025      	ands	r5, r4

			if (autoblocken) {
1a003dce:	b10a      	cbz	r2, 1a003dd4 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003dd0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003dd4:	b10b      	cbz	r3, 1a003dda <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003dd6:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003dda:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003dde:	3016      	adds	r0, #22
1a003de0:	0080      	lsls	r0, r0, #2
1a003de2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003de6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003dea:	6045      	str	r5, [r0, #4]
1a003dec:	e008      	b.n	1a003e00 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003dee:	f044 0401 	orr.w	r4, r4, #1
1a003df2:	3016      	adds	r0, #22
1a003df4:	0080      	lsls	r0, r0, #2
1a003df6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003dfa:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003dfe:	6044      	str	r4, [r0, #4]
	}
}
1a003e00:	bc30      	pop	{r4, r5}
1a003e02:	4770      	bx	lr
1a003e04:	e0fff7fe 	.word	0xe0fff7fe

1a003e08 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003e08:	281b      	cmp	r0, #27
1a003e0a:	d80c      	bhi.n	1a003e26 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003e0c:	3016      	adds	r0, #22
1a003e0e:	0080      	lsls	r0, r0, #2
1a003e10:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003e14:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003e18:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003e1a:	f010 0f01 	tst.w	r0, #1
1a003e1e:	d104      	bne.n	1a003e2a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003e20:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003e24:	4770      	bx	lr
		return CLKINPUT_PD;
1a003e26:	2011      	movs	r0, #17
1a003e28:	4770      	bx	lr
		return CLKINPUT_PD;
1a003e2a:	2011      	movs	r0, #17
}
1a003e2c:	4770      	bx	lr

1a003e2e <Chip_Clock_GetBaseClocktHz>:
{
1a003e2e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003e30:	f7ff ffea 	bl	1a003e08 <Chip_Clock_GetBaseClock>
1a003e34:	f7ff fed8 	bl	1a003be8 <Chip_Clock_GetClockInputHz>
}
1a003e38:	bd08      	pop	{r3, pc}
1a003e3a:	Address 0x000000001a003e3a is out of bounds.


1a003e3c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003e3c:	b969      	cbnz	r1, 1a003e5a <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a003e3e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003e40:	b10a      	cbz	r2, 1a003e46 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a003e42:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003e46:	2b02      	cmp	r3, #2
1a003e48:	d009      	beq.n	1a003e5e <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003e4a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003e4e:	d209      	bcs.n	1a003e64 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003e50:	3020      	adds	r0, #32
1a003e52:	4b07      	ldr	r3, [pc, #28]	; (1a003e70 <Chip_Clock_EnableOpts+0x34>)
1a003e54:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003e58:	4770      	bx	lr
		reg |= (1 << 1);
1a003e5a:	2103      	movs	r1, #3
1a003e5c:	e7f0      	b.n	1a003e40 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003e5e:	f041 0120 	orr.w	r1, r1, #32
1a003e62:	e7f2      	b.n	1a003e4a <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003e64:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003e68:	4b02      	ldr	r3, [pc, #8]	; (1a003e74 <Chip_Clock_EnableOpts+0x38>)
1a003e6a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003e6e:	4770      	bx	lr
1a003e70:	40051000 	.word	0x40051000
1a003e74:	40052000 	.word	0x40052000

1a003e78 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003e78:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003e7c:	d208      	bcs.n	1a003e90 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003e7e:	4a09      	ldr	r2, [pc, #36]	; (1a003ea4 <Chip_Clock_Enable+0x2c>)
1a003e80:	3020      	adds	r0, #32
1a003e82:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003e86:	f043 0301 	orr.w	r3, r3, #1
1a003e8a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003e8e:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003e90:	4a05      	ldr	r2, [pc, #20]	; (1a003ea8 <Chip_Clock_Enable+0x30>)
1a003e92:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003e96:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003e9a:	f043 0301 	orr.w	r3, r3, #1
1a003e9e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003ea2:	4770      	bx	lr
1a003ea4:	40051000 	.word	0x40051000
1a003ea8:	40052000 	.word	0x40052000

1a003eac <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003eac:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003eae:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003eb2:	d309      	bcc.n	1a003ec8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003eb4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003eb8:	4a0d      	ldr	r2, [pc, #52]	; (1a003ef0 <Chip_Clock_GetRate+0x44>)
1a003eba:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003ebe:	f014 0f01 	tst.w	r4, #1
1a003ec2:	d107      	bne.n	1a003ed4 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003ec4:	2000      	movs	r0, #0
	}

	return rate;
}
1a003ec6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003ec8:	f100 0320 	add.w	r3, r0, #32
1a003ecc:	4a09      	ldr	r2, [pc, #36]	; (1a003ef4 <Chip_Clock_GetRate+0x48>)
1a003ece:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003ed2:	e7f4      	b.n	1a003ebe <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003ed4:	f7ff fe20 	bl	1a003b18 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003ed8:	f7ff ffa9 	bl	1a003e2e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003edc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003ee0:	d103      	bne.n	1a003eea <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003ee2:	2301      	movs	r3, #1
		rate = rate / div;
1a003ee4:	fbb0 f0f3 	udiv	r0, r0, r3
1a003ee8:	e7ed      	b.n	1a003ec6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003eea:	2302      	movs	r3, #2
1a003eec:	e7fa      	b.n	1a003ee4 <Chip_Clock_GetRate+0x38>
1a003eee:	bf00      	nop
1a003ef0:	40052000 	.word	0x40052000
1a003ef4:	40051000 	.word	0x40051000

1a003ef8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003ef8:	b570      	push	{r4, r5, r6, lr}
1a003efa:	b08a      	sub	sp, #40	; 0x28
1a003efc:	4605      	mov	r5, r0
1a003efe:	460e      	mov	r6, r1
1a003f00:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003f02:	f242 7310 	movw	r3, #10000	; 0x2710
1a003f06:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003f08:	2806      	cmp	r0, #6
1a003f0a:	d018      	beq.n	1a003f3e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003f0c:	2300      	movs	r3, #0
1a003f0e:	2201      	movs	r2, #1
1a003f10:	4629      	mov	r1, r5
1a003f12:	2004      	movs	r0, #4
1a003f14:	f7ff ff4c 	bl	1a003db0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003f18:	4a49      	ldr	r2, [pc, #292]	; (1a004040 <Chip_SetupCoreClock+0x148>)
1a003f1a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003f1c:	f043 0301 	orr.w	r3, r3, #1
1a003f20:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003f22:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003f26:	a901      	add	r1, sp, #4
1a003f28:	4630      	mov	r0, r6
1a003f2a:	f7ff feb9 	bl	1a003ca0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003f2e:	4b45      	ldr	r3, [pc, #276]	; (1a004044 <Chip_SetupCoreClock+0x14c>)
1a003f30:	429e      	cmp	r6, r3
1a003f32:	d916      	bls.n	1a003f62 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003f34:	9b01      	ldr	r3, [sp, #4]
1a003f36:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003f3a:	d003      	beq.n	1a003f44 <Chip_SetupCoreClock+0x4c>
1a003f3c:	e7fe      	b.n	1a003f3c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003f3e:	f7ff fe11 	bl	1a003b64 <Chip_Clock_EnableCrystal>
1a003f42:	e7e3      	b.n	1a003f0c <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003f44:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003f48:	d005      	beq.n	1a003f56 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003f4e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003f50:	2500      	movs	r5, #0
			direct = 1;
1a003f52:	2601      	movs	r6, #1
1a003f54:	e007      	b.n	1a003f66 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003f56:	9b04      	ldr	r3, [sp, #16]
1a003f58:	3301      	adds	r3, #1
1a003f5a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003f5c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003f5e:	2600      	movs	r6, #0
1a003f60:	e001      	b.n	1a003f66 <Chip_SetupCoreClock+0x6e>
1a003f62:	2500      	movs	r5, #0
1a003f64:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003f66:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003f6a:	9b01      	ldr	r3, [sp, #4]
1a003f6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003f70:	9a05      	ldr	r2, [sp, #20]
1a003f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003f76:	9a03      	ldr	r2, [sp, #12]
1a003f78:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003f7c:	9a04      	ldr	r2, [sp, #16]
1a003f7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003f82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003f86:	4a2e      	ldr	r2, [pc, #184]	; (1a004040 <Chip_SetupCoreClock+0x148>)
1a003f88:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003f8a:	4b2d      	ldr	r3, [pc, #180]	; (1a004040 <Chip_SetupCoreClock+0x148>)
1a003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003f8e:	f013 0f01 	tst.w	r3, #1
1a003f92:	d0fa      	beq.n	1a003f8a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003f94:	2300      	movs	r3, #0
1a003f96:	2201      	movs	r2, #1
1a003f98:	2109      	movs	r1, #9
1a003f9a:	2004      	movs	r0, #4
1a003f9c:	f7ff ff08 	bl	1a003db0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003fa0:	b1fe      	cbz	r6, 1a003fe2 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003fa2:	f242 7310 	movw	r3, #10000	; 0x2710
1a003fa6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003faa:	1e5a      	subs	r2, r3, #1
1a003fac:	9209      	str	r2, [sp, #36]	; 0x24
1a003fae:	2b00      	cmp	r3, #0
1a003fb0:	d1fa      	bne.n	1a003fa8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003fb2:	9b01      	ldr	r3, [sp, #4]
1a003fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003fb8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003fba:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003fbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003fc2:	9a05      	ldr	r2, [sp, #20]
1a003fc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003fc8:	9a03      	ldr	r2, [sp, #12]
1a003fca:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003fce:	9a04      	ldr	r2, [sp, #16]
1a003fd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003fd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003fd8:	4a19      	ldr	r2, [pc, #100]	; (1a004040 <Chip_SetupCoreClock+0x148>)
1a003fda:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003fdc:	b36c      	cbz	r4, 1a00403a <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003fde:	2400      	movs	r4, #0
1a003fe0:	e029      	b.n	1a004036 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003fe2:	2d00      	cmp	r5, #0
1a003fe4:	d0fa      	beq.n	1a003fdc <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003fe6:	f242 7310 	movw	r3, #10000	; 0x2710
1a003fea:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003fee:	1e5a      	subs	r2, r3, #1
1a003ff0:	9209      	str	r2, [sp, #36]	; 0x24
1a003ff2:	2b00      	cmp	r3, #0
1a003ff4:	d1fa      	bne.n	1a003fec <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003ff6:	9b04      	ldr	r3, [sp, #16]
1a003ff8:	1e5a      	subs	r2, r3, #1
1a003ffa:	9204      	str	r2, [sp, #16]
1a003ffc:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a004000:	9b01      	ldr	r3, [sp, #4]
1a004002:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a004006:	9905      	ldr	r1, [sp, #20]
1a004008:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00400c:	9903      	ldr	r1, [sp, #12]
1a00400e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a004012:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004016:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00401a:	4a09      	ldr	r2, [pc, #36]	; (1a004040 <Chip_SetupCoreClock+0x148>)
1a00401c:	6453      	str	r3, [r2, #68]	; 0x44
1a00401e:	e7dd      	b.n	1a003fdc <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a004020:	4809      	ldr	r0, [pc, #36]	; (1a004048 <Chip_SetupCoreClock+0x150>)
1a004022:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a004026:	78cb      	ldrb	r3, [r1, #3]
1a004028:	788a      	ldrb	r2, [r1, #2]
1a00402a:	7849      	ldrb	r1, [r1, #1]
1a00402c:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a004030:	f7ff febe 	bl	1a003db0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a004034:	3401      	adds	r4, #1
1a004036:	2c11      	cmp	r4, #17
1a004038:	d9f2      	bls.n	1a004020 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00403a:	b00a      	add	sp, #40	; 0x28
1a00403c:	bd70      	pop	{r4, r5, r6, pc}
1a00403e:	bf00      	nop
1a004040:	40050000 	.word	0x40050000
1a004044:	068e7780 	.word	0x068e7780
1a004048:	1a005078 	.word	0x1a005078

1a00404c <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a00404c:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a00404e:	6843      	ldr	r3, [r0, #4]
1a004050:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004054:	2b30      	cmp	r3, #48	; 0x30
1a004056:	d04a      	beq.n	1a0040ee <Chip_I2CM_XferHandler+0xa2>
1a004058:	d90f      	bls.n	1a00407a <Chip_I2CM_XferHandler+0x2e>
1a00405a:	2b48      	cmp	r3, #72	; 0x48
1a00405c:	d06a      	beq.n	1a004134 <Chip_I2CM_XferHandler+0xe8>
1a00405e:	d83a      	bhi.n	1a0040d6 <Chip_I2CM_XferHandler+0x8a>
1a004060:	2b38      	cmp	r3, #56	; 0x38
1a004062:	d06b      	beq.n	1a00413c <Chip_I2CM_XferHandler+0xf0>
1a004064:	2b40      	cmp	r3, #64	; 0x40
1a004066:	d13e      	bne.n	1a0040e6 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a004068:	88ca      	ldrh	r2, [r1, #6]
1a00406a:	2a01      	cmp	r2, #1
1a00406c:	d95a      	bls.n	1a004124 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a00406e:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a004070:	b9b2      	cbnz	r2, 1a0040a0 <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a004072:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a004074:	f023 0310 	bic.w	r3, r3, #16
1a004078:	e012      	b.n	1a0040a0 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00407a:	2b10      	cmp	r3, #16
1a00407c:	d007      	beq.n	1a00408e <Chip_I2CM_XferHandler+0x42>
1a00407e:	d81c      	bhi.n	1a0040ba <Chip_I2CM_XferHandler+0x6e>
1a004080:	b91b      	cbnz	r3, 1a00408a <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a004082:	2303      	movs	r3, #3
1a004084:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a004086:	232c      	movs	r3, #44	; 0x2c
        break;
1a004088:	e00a      	b.n	1a0040a0 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00408a:	2b08      	cmp	r3, #8
1a00408c:	d12b      	bne.n	1a0040e6 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00408e:	780a      	ldrb	r2, [r1, #0]
1a004090:	888b      	ldrh	r3, [r1, #4]
1a004092:	fab3 f383 	clz	r3, r3
1a004096:	095b      	lsrs	r3, r3, #5
1a004098:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a00409c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00409e:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0040a0:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0040a4:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a0040a6:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a0040aa:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a0040ac:	8848      	ldrh	r0, [r1, #2]
1a0040ae:	38ff      	subs	r0, #255	; 0xff
1a0040b0:	bf18      	it	ne
1a0040b2:	2001      	movne	r0, #1
}
1a0040b4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0040b8:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0040ba:	2b20      	cmp	r3, #32
1a0040bc:	d017      	beq.n	1a0040ee <Chip_I2CM_XferHandler+0xa2>
1a0040be:	2b28      	cmp	r3, #40	; 0x28
1a0040c0:	d001      	beq.n	1a0040c6 <Chip_I2CM_XferHandler+0x7a>
1a0040c2:	2b18      	cmp	r3, #24
1a0040c4:	d10f      	bne.n	1a0040e6 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a0040c6:	888b      	ldrh	r3, [r1, #4]
1a0040c8:	b9cb      	cbnz	r3, 1a0040fe <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a0040ca:	88cb      	ldrh	r3, [r1, #6]
1a0040cc:	2b00      	cmp	r3, #0
1a0040ce:	d139      	bne.n	1a004144 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a0040d0:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a0040d2:	232c      	movs	r3, #44	; 0x2c
1a0040d4:	e7e4      	b.n	1a0040a0 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0040d6:	2b58      	cmp	r3, #88	; 0x58
1a0040d8:	d01b      	beq.n	1a004112 <Chip_I2CM_XferHandler+0xc6>
1a0040da:	2bf8      	cmp	r3, #248	; 0xf8
1a0040dc:	d101      	bne.n	1a0040e2 <Chip_I2CM_XferHandler+0x96>
      return 0;
1a0040de:	2000      	movs	r0, #0
1a0040e0:	e7e8      	b.n	1a0040b4 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0040e2:	2b50      	cmp	r3, #80	; 0x50
1a0040e4:	d015      	beq.n	1a004112 <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a0040e6:	2301      	movs	r3, #1
1a0040e8:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0040ea:	232c      	movs	r3, #44	; 0x2c
        break;
1a0040ec:	e7d8      	b.n	1a0040a0 <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a0040ee:	784b      	ldrb	r3, [r1, #1]
1a0040f0:	f013 0f01 	tst.w	r3, #1
1a0040f4:	d1e7      	bne.n	1a0040c6 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a0040f6:	2302      	movs	r3, #2
1a0040f8:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0040fa:	232c      	movs	r3, #44	; 0x2c
			break;
1a0040fc:	e7d0      	b.n	1a0040a0 <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a0040fe:	688b      	ldr	r3, [r1, #8]
1a004100:	1c5a      	adds	r2, r3, #1
1a004102:	608a      	str	r2, [r1, #8]
1a004104:	781b      	ldrb	r3, [r3, #0]
1a004106:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a004108:	888b      	ldrh	r3, [r1, #4]
1a00410a:	3b01      	subs	r3, #1
1a00410c:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a00410e:	233c      	movs	r3, #60	; 0x3c
1a004110:	e7c6      	b.n	1a0040a0 <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a004112:	6882      	ldr	r2, [r0, #8]
1a004114:	68cb      	ldr	r3, [r1, #12]
1a004116:	1c5c      	adds	r4, r3, #1
1a004118:	60cc      	str	r4, [r1, #12]
1a00411a:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a00411c:	88cb      	ldrh	r3, [r1, #6]
1a00411e:	3b01      	subs	r3, #1
1a004120:	80cb      	strh	r3, [r1, #6]
1a004122:	e7a1      	b.n	1a004068 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a004124:	784b      	ldrb	r3, [r1, #1]
1a004126:	f013 0f02 	tst.w	r3, #2
1a00412a:	d101      	bne.n	1a004130 <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a00412c:	233c      	movs	r3, #60	; 0x3c
1a00412e:	e79f      	b.n	1a004070 <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a004130:	2338      	movs	r3, #56	; 0x38
1a004132:	e79d      	b.n	1a004070 <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a004134:	2304      	movs	r3, #4
1a004136:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a004138:	232c      	movs	r3, #44	; 0x2c
		break;
1a00413a:	e7b1      	b.n	1a0040a0 <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a00413c:	2305      	movs	r3, #5
1a00413e:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a004140:	233c      	movs	r3, #60	; 0x3c
		break;
1a004142:	e7ad      	b.n	1a0040a0 <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a004144:	231c      	movs	r3, #28
1a004146:	e7ab      	b.n	1a0040a0 <Chip_I2CM_XferHandler+0x54>

1a004148 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a004148:	23ff      	movs	r3, #255	; 0xff
1a00414a:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a00414c:	232c      	movs	r3, #44	; 0x2c
1a00414e:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a004150:	2360      	movs	r3, #96	; 0x60
1a004152:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a004154:	4770      	bx	lr

1a004156 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a004156:	b538      	push	{r3, r4, r5, lr}
1a004158:	4604      	mov	r4, r0
1a00415a:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a00415c:	f7ff fff4 	bl	1a004148 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a004160:	2000      	movs	r0, #0

	while (ret == 0) {
1a004162:	e007      	b.n	1a004174 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a004164:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a004166:	f013 0f08 	tst.w	r3, #8
1a00416a:	d0fb      	beq.n	1a004164 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a00416c:	4629      	mov	r1, r5
1a00416e:	4620      	mov	r0, r4
1a004170:	f7ff ff6c 	bl	1a00404c <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a004174:	2800      	cmp	r0, #0
1a004176:	d0f5      	beq.n	1a004164 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a004178:	bd38      	pop	{r3, r4, r5, pc}
1a00417a:	Address 0x000000001a00417a is out of bounds.


1a00417c <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a00417c:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a00417e:	4b0f      	ldr	r3, [pc, #60]	; (1a0041bc <fpuInit+0x40>)
1a004180:	681b      	ldr	r3, [r3, #0]
1a004182:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a004184:	4b0e      	ldr	r3, [pc, #56]	; (1a0041c0 <fpuInit+0x44>)
1a004186:	681b      	ldr	r3, [r3, #0]
1a004188:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00418a:	9a02      	ldr	r2, [sp, #8]
1a00418c:	4b0d      	ldr	r3, [pc, #52]	; (1a0041c4 <fpuInit+0x48>)
1a00418e:	429a      	cmp	r2, r3
1a004190:	d00c      	beq.n	1a0041ac <fpuInit+0x30>
1a004192:	2300      	movs	r3, #0

	if (vfpPresent) {
1a004194:	b143      	cbz	r3, 1a0041a8 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a004196:	4a0c      	ldr	r2, [pc, #48]	; (1a0041c8 <fpuInit+0x4c>)
1a004198:	6813      	ldr	r3, [r2, #0]
1a00419a:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a00419c:	9b03      	ldr	r3, [sp, #12]
1a00419e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0041a2:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a0041a4:	9b03      	ldr	r3, [sp, #12]
1a0041a6:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a0041a8:	b004      	add	sp, #16
1a0041aa:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0041ac:	9a01      	ldr	r2, [sp, #4]
1a0041ae:	4b07      	ldr	r3, [pc, #28]	; (1a0041cc <fpuInit+0x50>)
1a0041b0:	429a      	cmp	r2, r3
1a0041b2:	d001      	beq.n	1a0041b8 <fpuInit+0x3c>
1a0041b4:	2300      	movs	r3, #0
1a0041b6:	e7ed      	b.n	1a004194 <fpuInit+0x18>
1a0041b8:	2301      	movs	r3, #1
1a0041ba:	e7eb      	b.n	1a004194 <fpuInit+0x18>
1a0041bc:	e000ef40 	.word	0xe000ef40
1a0041c0:	e000ef44 	.word	0xe000ef44
1a0041c4:	10110021 	.word	0x10110021
1a0041c8:	e000ed88 	.word	0xe000ed88
1a0041cc:	11000011 	.word	0x11000011

1a0041d0 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0041d0:	4770      	bx	lr
1a0041d2:	Address 0x000000001a0041d2 is out of bounds.


1a0041d4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0041d4:	2901      	cmp	r1, #1
1a0041d6:	d000      	beq.n	1a0041da <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a0041d8:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a0041da:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0041de:	0082      	lsls	r2, r0, #2
1a0041e0:	4b03      	ldr	r3, [pc, #12]	; (1a0041f0 <Chip_I2C_EventHandler+0x1c>)
1a0041e2:	4413      	add	r3, r2
1a0041e4:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0041e6:	7d13      	ldrb	r3, [r2, #20]
1a0041e8:	b2db      	uxtb	r3, r3
1a0041ea:	2b04      	cmp	r3, #4
1a0041ec:	d0fb      	beq.n	1a0041e6 <Chip_I2C_EventHandler+0x12>
1a0041ee:	e7f3      	b.n	1a0041d8 <Chip_I2C_EventHandler+0x4>
1a0041f0:	10000094 	.word	0x10000094

1a0041f4 <handleMasterXferState>:
{
1a0041f4:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a0041f6:	6843      	ldr	r3, [r0, #4]
1a0041f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a0041fc:	2b58      	cmp	r3, #88	; 0x58
1a0041fe:	d87e      	bhi.n	1a0042fe <handleMasterXferState+0x10a>
1a004200:	e8df f003 	tbb	[pc, r3]
1a004204:	7d7d7d79 	.word	0x7d7d7d79
1a004208:	7d7d7d7d 	.word	0x7d7d7d7d
1a00420c:	7d7d7d2f 	.word	0x7d7d7d2f
1a004210:	7d7d7d7d 	.word	0x7d7d7d7d
1a004214:	7d7d7d2f 	.word	0x7d7d7d2f
1a004218:	7d7d7d7d 	.word	0x7d7d7d7d
1a00421c:	7d7d7d39 	.word	0x7d7d7d39
1a004220:	7d7d7d7d 	.word	0x7d7d7d7d
1a004224:	7d7d7d6d 	.word	0x7d7d7d6d
1a004228:	7d7d7d7d 	.word	0x7d7d7d7d
1a00422c:	7d7d7d39 	.word	0x7d7d7d39
1a004230:	7d7d7d7d 	.word	0x7d7d7d7d
1a004234:	7d7d7d71 	.word	0x7d7d7d71
1a004238:	7d7d7d7d 	.word	0x7d7d7d7d
1a00423c:	7d7d7d75 	.word	0x7d7d7d75
1a004240:	7d7d7d7d 	.word	0x7d7d7d7d
1a004244:	7d7d7d6b 	.word	0x7d7d7d6b
1a004248:	7d7d7d7d 	.word	0x7d7d7d7d
1a00424c:	7d7d7d6d 	.word	0x7d7d7d6d
1a004250:	7d7d7d7d 	.word	0x7d7d7d7d
1a004254:	7d7d7d2d 	.word	0x7d7d7d2d
1a004258:	7d7d7d7d 	.word	0x7d7d7d7d
1a00425c:	4f          	.byte	0x4f
1a00425d:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a00425e:	233c      	movs	r3, #60	; 0x3c
1a004260:	e020      	b.n	1a0042a4 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a004262:	780a      	ldrb	r2, [r1, #0]
1a004264:	688b      	ldr	r3, [r1, #8]
1a004266:	fab3 f383 	clz	r3, r3
1a00426a:	095b      	lsrs	r3, r3, #5
1a00426c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a004270:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a004272:	233c      	movs	r3, #60	; 0x3c
		break;
1a004274:	e023      	b.n	1a0042be <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a004276:	688b      	ldr	r3, [r1, #8]
1a004278:	b94b      	cbnz	r3, 1a00428e <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a00427a:	690b      	ldr	r3, [r1, #16]
1a00427c:	b123      	cbz	r3, 1a004288 <handleMasterXferState+0x94>
1a00427e:	f06f 0320 	mvn.w	r3, #32
1a004282:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a004286:	e01a      	b.n	1a0042be <handleMasterXferState+0xca>
1a004288:	f06f 0310 	mvn.w	r3, #16
1a00428c:	e7f9      	b.n	1a004282 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a00428e:	684b      	ldr	r3, [r1, #4]
1a004290:	1c5a      	adds	r2, r3, #1
1a004292:	604a      	str	r2, [r1, #4]
1a004294:	781b      	ldrb	r3, [r3, #0]
1a004296:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a004298:	688b      	ldr	r3, [r1, #8]
1a00429a:	3b01      	subs	r3, #1
1a00429c:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00429e:	233c      	movs	r3, #60	; 0x3c
1a0042a0:	e00d      	b.n	1a0042be <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a0042a2:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a0042a4:	6884      	ldr	r4, [r0, #8]
1a0042a6:	68ca      	ldr	r2, [r1, #12]
1a0042a8:	1c55      	adds	r5, r2, #1
1a0042aa:	60cd      	str	r5, [r1, #12]
1a0042ac:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a0042ae:	690a      	ldr	r2, [r1, #16]
1a0042b0:	3a01      	subs	r2, #1
1a0042b2:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a0042b4:	690a      	ldr	r2, [r1, #16]
1a0042b6:	2a01      	cmp	r2, #1
1a0042b8:	dd01      	ble.n	1a0042be <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a0042ba:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0042be:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0042c2:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a0042c4:	f023 0210 	bic.w	r2, r3, #16
1a0042c8:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a0042ca:	f013 0f10 	tst.w	r3, #16
1a0042ce:	d018      	beq.n	1a004302 <handleMasterXferState+0x10e>
1a0042d0:	7d0b      	ldrb	r3, [r1, #20]
1a0042d2:	2b02      	cmp	r3, #2
1a0042d4:	d015      	beq.n	1a004302 <handleMasterXferState+0x10e>
	return 1;
1a0042d6:	2001      	movs	r0, #1
1a0042d8:	e017      	b.n	1a00430a <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a0042da:	233c      	movs	r3, #60	; 0x3c
1a0042dc:	e7ea      	b.n	1a0042b4 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a0042de:	2305      	movs	r3, #5
1a0042e0:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0042e2:	232c      	movs	r3, #44	; 0x2c
		break;
1a0042e4:	e7eb      	b.n	1a0042be <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a0042e6:	2301      	movs	r3, #1
1a0042e8:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0042ea:	232c      	movs	r3, #44	; 0x2c
		break;
1a0042ec:	e7e7      	b.n	1a0042be <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a0042ee:	2302      	movs	r3, #2
1a0042f0:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a0042f2:	233c      	movs	r3, #60	; 0x3c
		break;
1a0042f4:	e7e3      	b.n	1a0042be <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a0042f6:	2303      	movs	r3, #3
1a0042f8:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0042fa:	232c      	movs	r3, #44	; 0x2c
1a0042fc:	e7df      	b.n	1a0042be <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a0042fe:	233c      	movs	r3, #60	; 0x3c
1a004300:	e7dd      	b.n	1a0042be <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a004302:	7d0b      	ldrb	r3, [r1, #20]
1a004304:	2b04      	cmp	r3, #4
1a004306:	d002      	beq.n	1a00430e <handleMasterXferState+0x11a>
		return 0;
1a004308:	2000      	movs	r0, #0
}
1a00430a:	bc30      	pop	{r4, r5}
1a00430c:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a00430e:	2000      	movs	r0, #0
1a004310:	7508      	strb	r0, [r1, #20]
1a004312:	e7fa      	b.n	1a00430a <handleMasterXferState+0x116>

1a004314 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a004314:	b570      	push	{r4, r5, r6, lr}
1a004316:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a004318:	4e06      	ldr	r6, [pc, #24]	; (1a004334 <Chip_I2C_Init+0x20>)
1a00431a:	00c4      	lsls	r4, r0, #3
1a00431c:	1a22      	subs	r2, r4, r0
1a00431e:	0093      	lsls	r3, r2, #2
1a004320:	4433      	add	r3, r6
1a004322:	8898      	ldrh	r0, [r3, #4]
1a004324:	f7ff fda8 	bl	1a003e78 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a004328:	1b64      	subs	r4, r4, r5
1a00432a:	00a3      	lsls	r3, r4, #2
1a00432c:	58f3      	ldr	r3, [r6, r3]
1a00432e:	226c      	movs	r2, #108	; 0x6c
1a004330:	619a      	str	r2, [r3, #24]
}
1a004332:	bd70      	pop	{r4, r5, r6, pc}
1a004334:	10000094 	.word	0x10000094

1a004338 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a004338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00433c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00433e:	4e0b      	ldr	r6, [pc, #44]	; (1a00436c <Chip_I2C_SetClockRate+0x34>)
1a004340:	00c5      	lsls	r5, r0, #3
1a004342:	1a2b      	subs	r3, r5, r0
1a004344:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a004348:	eb06 0308 	add.w	r3, r6, r8
1a00434c:	8898      	ldrh	r0, [r3, #4]
1a00434e:	f7ff fdad 	bl	1a003eac <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a004352:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a004356:	f856 3008 	ldr.w	r3, [r6, r8]
1a00435a:	0842      	lsrs	r2, r0, #1
1a00435c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00435e:	f856 3008 	ldr.w	r3, [r6, r8]
1a004362:	691a      	ldr	r2, [r3, #16]
1a004364:	1a80      	subs	r0, r0, r2
1a004366:	6158      	str	r0, [r3, #20]
}
1a004368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00436c:	10000094 	.word	0x10000094

1a004370 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a004370:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a004374:	009a      	lsls	r2, r3, #2
1a004376:	4b09      	ldr	r3, [pc, #36]	; (1a00439c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a004378:	4413      	add	r3, r2
1a00437a:	691b      	ldr	r3, [r3, #16]
1a00437c:	b153      	cbz	r3, 1a004394 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a00437e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a004382:	0082      	lsls	r2, r0, #2
1a004384:	4b05      	ldr	r3, [pc, #20]	; (1a00439c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a004386:	4413      	add	r3, r2
1a004388:	6898      	ldr	r0, [r3, #8]
}
1a00438a:	4288      	cmp	r0, r1
1a00438c:	bf14      	ite	ne
1a00438e:	2000      	movne	r0, #0
1a004390:	2001      	moveq	r0, #1
1a004392:	4770      	bx	lr
		iic->mEvent = event;
1a004394:	4b01      	ldr	r3, [pc, #4]	; (1a00439c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a004396:	4413      	add	r3, r2
1a004398:	6099      	str	r1, [r3, #8]
1a00439a:	e7f0      	b.n	1a00437e <Chip_I2C_SetMasterEventHandler+0xe>
1a00439c:	10000094 	.word	0x10000094

1a0043a0 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a0043a0:	b510      	push	{r4, lr}
1a0043a2:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a0043a4:	4809      	ldr	r0, [pc, #36]	; (1a0043cc <Chip_I2C_MasterStateHandler+0x2c>)
1a0043a6:	00e3      	lsls	r3, r4, #3
1a0043a8:	1b1b      	subs	r3, r3, r4
1a0043aa:	009a      	lsls	r2, r3, #2
1a0043ac:	1883      	adds	r3, r0, r2
1a0043ae:	6919      	ldr	r1, [r3, #16]
1a0043b0:	5880      	ldr	r0, [r0, r2]
1a0043b2:	f7ff ff1f 	bl	1a0041f4 <handleMasterXferState>
1a0043b6:	b940      	cbnz	r0, 1a0043ca <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a0043b8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a0043bc:	009a      	lsls	r2, r3, #2
1a0043be:	4b03      	ldr	r3, [pc, #12]	; (1a0043cc <Chip_I2C_MasterStateHandler+0x2c>)
1a0043c0:	4413      	add	r3, r2
1a0043c2:	689b      	ldr	r3, [r3, #8]
1a0043c4:	2102      	movs	r1, #2
1a0043c6:	4620      	mov	r0, r4
1a0043c8:	4798      	blx	r3
	}
}
1a0043ca:	bd10      	pop	{r4, pc}
1a0043cc:	10000094 	.word	0x10000094

1a0043d0 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a0043d0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0043d4:	0083      	lsls	r3, r0, #2
1a0043d6:	4a03      	ldr	r2, [pc, #12]	; (1a0043e4 <Chip_I2C_IsStateChanged+0x14>)
1a0043d8:	58d3      	ldr	r3, [r2, r3]
1a0043da:	6818      	ldr	r0, [r3, #0]
}
1a0043dc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a0043e0:	4770      	bx	lr
1a0043e2:	bf00      	nop
1a0043e4:	10000094 	.word	0x10000094

1a0043e8 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a0043e8:	2901      	cmp	r1, #1
1a0043ea:	d000      	beq.n	1a0043ee <Chip_I2C_EventHandlerPolling+0x6>
1a0043ec:	4770      	bx	lr
{
1a0043ee:	b538      	push	{r3, r4, r5, lr}
1a0043f0:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a0043f2:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0043f6:	009a      	lsls	r2, r3, #2
1a0043f8:	4b08      	ldr	r3, [pc, #32]	; (1a00441c <Chip_I2C_EventHandlerPolling+0x34>)
1a0043fa:	4413      	add	r3, r2
1a0043fc:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a0043fe:	7d2b      	ldrb	r3, [r5, #20]
1a004400:	b2db      	uxtb	r3, r3
1a004402:	2b04      	cmp	r3, #4
1a004404:	d108      	bne.n	1a004418 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a004406:	4620      	mov	r0, r4
1a004408:	f7ff ffe2 	bl	1a0043d0 <Chip_I2C_IsStateChanged>
1a00440c:	2800      	cmp	r0, #0
1a00440e:	d0f6      	beq.n	1a0043fe <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a004410:	4620      	mov	r0, r4
1a004412:	f7ff ffc5 	bl	1a0043a0 <Chip_I2C_MasterStateHandler>
1a004416:	e7f2      	b.n	1a0043fe <Chip_I2C_EventHandlerPolling+0x16>
}
1a004418:	bd38      	pop	{r3, r4, r5, pc}
1a00441a:	bf00      	nop
1a00441c:	10000094 	.word	0x10000094

1a004420 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004420:	4b03      	ldr	r3, [pc, #12]	; (1a004430 <Chip_SSP_GetClockIndex+0x10>)
1a004422:	4298      	cmp	r0, r3
1a004424:	d001      	beq.n	1a00442a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a004426:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a004428:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00442a:	20a5      	movs	r0, #165	; 0xa5
1a00442c:	4770      	bx	lr
1a00442e:	bf00      	nop
1a004430:	400c5000 	.word	0x400c5000

1a004434 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004434:	4b04      	ldr	r3, [pc, #16]	; (1a004448 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a004436:	4298      	cmp	r0, r3
1a004438:	d002      	beq.n	1a004440 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00443a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00443e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a004440:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a004444:	4770      	bx	lr
1a004446:	bf00      	nop
1a004448:	400c5000 	.word	0x400c5000

1a00444c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00444c:	6803      	ldr	r3, [r0, #0]
1a00444e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a004452:	0209      	lsls	r1, r1, #8
1a004454:	b289      	uxth	r1, r1
1a004456:	4319      	orrs	r1, r3
1a004458:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00445a:	6102      	str	r2, [r0, #16]
}
1a00445c:	4770      	bx	lr

1a00445e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00445e:	b570      	push	{r4, r5, r6, lr}
1a004460:	4606      	mov	r6, r0
1a004462:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004464:	f7ff ffe6 	bl	1a004434 <Chip_SSP_GetPeriphClockIndex>
1a004468:	f7ff fd20 	bl	1a003eac <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00446c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00446e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a004472:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a004474:	e000      	b.n	1a004478 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a004476:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a004478:	42ab      	cmp	r3, r5
1a00447a:	d90b      	bls.n	1a004494 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00447c:	1c4c      	adds	r4, r1, #1
1a00447e:	fb02 f304 	mul.w	r3, r2, r4
1a004482:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a004486:	429d      	cmp	r5, r3
1a004488:	d2f6      	bcs.n	1a004478 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00448a:	2cff      	cmp	r4, #255	; 0xff
1a00448c:	d9f3      	bls.n	1a004476 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00448e:	3202      	adds	r2, #2
				cr0_div = 0;
1a004490:	2100      	movs	r1, #0
1a004492:	e7f1      	b.n	1a004478 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a004494:	4630      	mov	r0, r6
1a004496:	f7ff ffd9 	bl	1a00444c <Chip_SSP_SetClockRate>
}
1a00449a:	bd70      	pop	{r4, r5, r6, pc}

1a00449c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a00449c:	b510      	push	{r4, lr}
1a00449e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0044a0:	f7ff ffbe 	bl	1a004420 <Chip_SSP_GetClockIndex>
1a0044a4:	f7ff fce8 	bl	1a003e78 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0044a8:	4620      	mov	r0, r4
1a0044aa:	f7ff ffc3 	bl	1a004434 <Chip_SSP_GetPeriphClockIndex>
1a0044ae:	f7ff fce3 	bl	1a003e78 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0044b2:	6863      	ldr	r3, [r4, #4]
1a0044b4:	f023 0304 	bic.w	r3, r3, #4
1a0044b8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0044ba:	6823      	ldr	r3, [r4, #0]
1a0044bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0044c0:	f043 0307 	orr.w	r3, r3, #7
1a0044c4:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0044c6:	4902      	ldr	r1, [pc, #8]	; (1a0044d0 <Chip_SSP_Init+0x34>)
1a0044c8:	4620      	mov	r0, r4
1a0044ca:	f7ff ffc8 	bl	1a00445e <Chip_SSP_SetBitRate>
}
1a0044ce:	bd10      	pop	{r4, pc}
1a0044d0:	000186a0 	.word	0x000186a0

1a0044d4 <ResetISR>:
void ResetISR(void) {
1a0044d4:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a0044d6:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0044d8:	4b18      	ldr	r3, [pc, #96]	; (1a00453c <ResetISR+0x68>)
1a0044da:	4a19      	ldr	r2, [pc, #100]	; (1a004540 <ResetISR+0x6c>)
1a0044dc:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0044de:	3304      	adds	r3, #4
1a0044e0:	4a18      	ldr	r2, [pc, #96]	; (1a004544 <ResetISR+0x70>)
1a0044e2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0044e4:	2300      	movs	r3, #0
1a0044e6:	e005      	b.n	1a0044f4 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0044e8:	4a17      	ldr	r2, [pc, #92]	; (1a004548 <ResetISR+0x74>)
1a0044ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0044ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0044f2:	3301      	adds	r3, #1
1a0044f4:	2b07      	cmp	r3, #7
1a0044f6:	d9f7      	bls.n	1a0044e8 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a0044f8:	b662      	cpsie	i
    SystemInit();
1a0044fa:	f7ff f88d 	bl	1a003618 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a0044fe:	4b13      	ldr	r3, [pc, #76]	; (1a00454c <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a004500:	e007      	b.n	1a004512 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a004502:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a004506:	689a      	ldr	r2, [r3, #8]
1a004508:	6859      	ldr	r1, [r3, #4]
1a00450a:	6818      	ldr	r0, [r3, #0]
1a00450c:	f7fb fe43 	bl	1a000196 <data_init>
        SectionLen = *SectionTableAddr++;
1a004510:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a004512:	4a0f      	ldr	r2, [pc, #60]	; (1a004550 <ResetISR+0x7c>)
1a004514:	4293      	cmp	r3, r2
1a004516:	d3f4      	bcc.n	1a004502 <ResetISR+0x2e>
1a004518:	e006      	b.n	1a004528 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a00451a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00451c:	6859      	ldr	r1, [r3, #4]
1a00451e:	f854 0b08 	ldr.w	r0, [r4], #8
1a004522:	f7fb fe47 	bl	1a0001b4 <bss_init>
        SectionLen = *SectionTableAddr++;
1a004526:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a004528:	4a0a      	ldr	r2, [pc, #40]	; (1a004554 <ResetISR+0x80>)
1a00452a:	4293      	cmp	r3, r2
1a00452c:	d3f5      	bcc.n	1a00451a <ResetISR+0x46>
    __libc_init_array();
1a00452e:	f000 fba1 	bl	1a004c74 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a004532:	f7ff f853 	bl	1a0035dc <Board_Init>
    main();
1a004536:	f7fc f891 	bl	1a00065c <main>
1a00453a:	e7fe      	b.n	1a00453a <ResetISR+0x66>
1a00453c:	40053100 	.word	0x40053100
1a004540:	10df1000 	.word	0x10df1000
1a004544:	01dff7ff 	.word	0x01dff7ff
1a004548:	e000e280 	.word	0xe000e280
1a00454c:	1a000114 	.word	0x1a000114
1a004550:	1a000150 	.word	0x1a000150
1a004554:	1a000178 	.word	0x1a000178

1a004558 <_init>:
void _init(void) {}
1a004558:	4770      	bx	lr
1a00455a:	Address 0x000000001a00455a is out of bounds.


1a00455c <__aeabi_drsub>:
1a00455c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a004560:	e002      	b.n	1a004568 <__adddf3>
1a004562:	bf00      	nop

1a004564 <__aeabi_dsub>:
1a004564:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a004568 <__adddf3>:
1a004568:	b530      	push	{r4, r5, lr}
1a00456a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00456e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a004572:	ea94 0f05 	teq	r4, r5
1a004576:	bf08      	it	eq
1a004578:	ea90 0f02 	teqeq	r0, r2
1a00457c:	bf1f      	itttt	ne
1a00457e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a004582:	ea55 0c02 	orrsne.w	ip, r5, r2
1a004586:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00458a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00458e:	f000 80e2 	beq.w	1a004756 <__adddf3+0x1ee>
1a004592:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a004596:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00459a:	bfb8      	it	lt
1a00459c:	426d      	neglt	r5, r5
1a00459e:	dd0c      	ble.n	1a0045ba <__adddf3+0x52>
1a0045a0:	442c      	add	r4, r5
1a0045a2:	ea80 0202 	eor.w	r2, r0, r2
1a0045a6:	ea81 0303 	eor.w	r3, r1, r3
1a0045aa:	ea82 0000 	eor.w	r0, r2, r0
1a0045ae:	ea83 0101 	eor.w	r1, r3, r1
1a0045b2:	ea80 0202 	eor.w	r2, r0, r2
1a0045b6:	ea81 0303 	eor.w	r3, r1, r3
1a0045ba:	2d36      	cmp	r5, #54	; 0x36
1a0045bc:	bf88      	it	hi
1a0045be:	bd30      	pophi	{r4, r5, pc}
1a0045c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0045c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0045c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0045cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0045d0:	d002      	beq.n	1a0045d8 <__adddf3+0x70>
1a0045d2:	4240      	negs	r0, r0
1a0045d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0045d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a0045dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0045e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0045e4:	d002      	beq.n	1a0045ec <__adddf3+0x84>
1a0045e6:	4252      	negs	r2, r2
1a0045e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0045ec:	ea94 0f05 	teq	r4, r5
1a0045f0:	f000 80a7 	beq.w	1a004742 <__adddf3+0x1da>
1a0045f4:	f1a4 0401 	sub.w	r4, r4, #1
1a0045f8:	f1d5 0e20 	rsbs	lr, r5, #32
1a0045fc:	db0d      	blt.n	1a00461a <__adddf3+0xb2>
1a0045fe:	fa02 fc0e 	lsl.w	ip, r2, lr
1a004602:	fa22 f205 	lsr.w	r2, r2, r5
1a004606:	1880      	adds	r0, r0, r2
1a004608:	f141 0100 	adc.w	r1, r1, #0
1a00460c:	fa03 f20e 	lsl.w	r2, r3, lr
1a004610:	1880      	adds	r0, r0, r2
1a004612:	fa43 f305 	asr.w	r3, r3, r5
1a004616:	4159      	adcs	r1, r3
1a004618:	e00e      	b.n	1a004638 <__adddf3+0xd0>
1a00461a:	f1a5 0520 	sub.w	r5, r5, #32
1a00461e:	f10e 0e20 	add.w	lr, lr, #32
1a004622:	2a01      	cmp	r2, #1
1a004624:	fa03 fc0e 	lsl.w	ip, r3, lr
1a004628:	bf28      	it	cs
1a00462a:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00462e:	fa43 f305 	asr.w	r3, r3, r5
1a004632:	18c0      	adds	r0, r0, r3
1a004634:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a004638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00463c:	d507      	bpl.n	1a00464e <__adddf3+0xe6>
1a00463e:	f04f 0e00 	mov.w	lr, #0
1a004642:	f1dc 0c00 	rsbs	ip, ip, #0
1a004646:	eb7e 0000 	sbcs.w	r0, lr, r0
1a00464a:	eb6e 0101 	sbc.w	r1, lr, r1
1a00464e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a004652:	d31b      	bcc.n	1a00468c <__adddf3+0x124>
1a004654:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a004658:	d30c      	bcc.n	1a004674 <__adddf3+0x10c>
1a00465a:	0849      	lsrs	r1, r1, #1
1a00465c:	ea5f 0030 	movs.w	r0, r0, rrx
1a004660:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a004664:	f104 0401 	add.w	r4, r4, #1
1a004668:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a00466c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a004670:	f080 809a 	bcs.w	1a0047a8 <__adddf3+0x240>
1a004674:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a004678:	bf08      	it	eq
1a00467a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00467e:	f150 0000 	adcs.w	r0, r0, #0
1a004682:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004686:	ea41 0105 	orr.w	r1, r1, r5
1a00468a:	bd30      	pop	{r4, r5, pc}
1a00468c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a004690:	4140      	adcs	r0, r0
1a004692:	eb41 0101 	adc.w	r1, r1, r1
1a004696:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00469a:	f1a4 0401 	sub.w	r4, r4, #1
1a00469e:	d1e9      	bne.n	1a004674 <__adddf3+0x10c>
1a0046a0:	f091 0f00 	teq	r1, #0
1a0046a4:	bf04      	itt	eq
1a0046a6:	4601      	moveq	r1, r0
1a0046a8:	2000      	moveq	r0, #0
1a0046aa:	fab1 f381 	clz	r3, r1
1a0046ae:	bf08      	it	eq
1a0046b0:	3320      	addeq	r3, #32
1a0046b2:	f1a3 030b 	sub.w	r3, r3, #11
1a0046b6:	f1b3 0220 	subs.w	r2, r3, #32
1a0046ba:	da0c      	bge.n	1a0046d6 <__adddf3+0x16e>
1a0046bc:	320c      	adds	r2, #12
1a0046be:	dd08      	ble.n	1a0046d2 <__adddf3+0x16a>
1a0046c0:	f102 0c14 	add.w	ip, r2, #20
1a0046c4:	f1c2 020c 	rsb	r2, r2, #12
1a0046c8:	fa01 f00c 	lsl.w	r0, r1, ip
1a0046cc:	fa21 f102 	lsr.w	r1, r1, r2
1a0046d0:	e00c      	b.n	1a0046ec <__adddf3+0x184>
1a0046d2:	f102 0214 	add.w	r2, r2, #20
1a0046d6:	bfd8      	it	le
1a0046d8:	f1c2 0c20 	rsble	ip, r2, #32
1a0046dc:	fa01 f102 	lsl.w	r1, r1, r2
1a0046e0:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0046e4:	bfdc      	itt	le
1a0046e6:	ea41 010c 	orrle.w	r1, r1, ip
1a0046ea:	4090      	lslle	r0, r2
1a0046ec:	1ae4      	subs	r4, r4, r3
1a0046ee:	bfa2      	ittt	ge
1a0046f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0046f4:	4329      	orrge	r1, r5
1a0046f6:	bd30      	popge	{r4, r5, pc}
1a0046f8:	ea6f 0404 	mvn.w	r4, r4
1a0046fc:	3c1f      	subs	r4, #31
1a0046fe:	da1c      	bge.n	1a00473a <__adddf3+0x1d2>
1a004700:	340c      	adds	r4, #12
1a004702:	dc0e      	bgt.n	1a004722 <__adddf3+0x1ba>
1a004704:	f104 0414 	add.w	r4, r4, #20
1a004708:	f1c4 0220 	rsb	r2, r4, #32
1a00470c:	fa20 f004 	lsr.w	r0, r0, r4
1a004710:	fa01 f302 	lsl.w	r3, r1, r2
1a004714:	ea40 0003 	orr.w	r0, r0, r3
1a004718:	fa21 f304 	lsr.w	r3, r1, r4
1a00471c:	ea45 0103 	orr.w	r1, r5, r3
1a004720:	bd30      	pop	{r4, r5, pc}
1a004722:	f1c4 040c 	rsb	r4, r4, #12
1a004726:	f1c4 0220 	rsb	r2, r4, #32
1a00472a:	fa20 f002 	lsr.w	r0, r0, r2
1a00472e:	fa01 f304 	lsl.w	r3, r1, r4
1a004732:	ea40 0003 	orr.w	r0, r0, r3
1a004736:	4629      	mov	r1, r5
1a004738:	bd30      	pop	{r4, r5, pc}
1a00473a:	fa21 f004 	lsr.w	r0, r1, r4
1a00473e:	4629      	mov	r1, r5
1a004740:	bd30      	pop	{r4, r5, pc}
1a004742:	f094 0f00 	teq	r4, #0
1a004746:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a00474a:	bf06      	itte	eq
1a00474c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a004750:	3401      	addeq	r4, #1
1a004752:	3d01      	subne	r5, #1
1a004754:	e74e      	b.n	1a0045f4 <__adddf3+0x8c>
1a004756:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00475a:	bf18      	it	ne
1a00475c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004760:	d029      	beq.n	1a0047b6 <__adddf3+0x24e>
1a004762:	ea94 0f05 	teq	r4, r5
1a004766:	bf08      	it	eq
1a004768:	ea90 0f02 	teqeq	r0, r2
1a00476c:	d005      	beq.n	1a00477a <__adddf3+0x212>
1a00476e:	ea54 0c00 	orrs.w	ip, r4, r0
1a004772:	bf04      	itt	eq
1a004774:	4619      	moveq	r1, r3
1a004776:	4610      	moveq	r0, r2
1a004778:	bd30      	pop	{r4, r5, pc}
1a00477a:	ea91 0f03 	teq	r1, r3
1a00477e:	bf1e      	ittt	ne
1a004780:	2100      	movne	r1, #0
1a004782:	2000      	movne	r0, #0
1a004784:	bd30      	popne	{r4, r5, pc}
1a004786:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00478a:	d105      	bne.n	1a004798 <__adddf3+0x230>
1a00478c:	0040      	lsls	r0, r0, #1
1a00478e:	4149      	adcs	r1, r1
1a004790:	bf28      	it	cs
1a004792:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a004796:	bd30      	pop	{r4, r5, pc}
1a004798:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a00479c:	bf3c      	itt	cc
1a00479e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0047a2:	bd30      	popcc	{r4, r5, pc}
1a0047a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0047a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0047ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0047b0:	f04f 0000 	mov.w	r0, #0
1a0047b4:	bd30      	pop	{r4, r5, pc}
1a0047b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0047ba:	bf1a      	itte	ne
1a0047bc:	4619      	movne	r1, r3
1a0047be:	4610      	movne	r0, r2
1a0047c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0047c4:	bf1c      	itt	ne
1a0047c6:	460b      	movne	r3, r1
1a0047c8:	4602      	movne	r2, r0
1a0047ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0047ce:	bf06      	itte	eq
1a0047d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a0047d4:	ea91 0f03 	teqeq	r1, r3
1a0047d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a0047dc:	bd30      	pop	{r4, r5, pc}
1a0047de:	bf00      	nop

1a0047e0 <__aeabi_ui2d>:
1a0047e0:	f090 0f00 	teq	r0, #0
1a0047e4:	bf04      	itt	eq
1a0047e6:	2100      	moveq	r1, #0
1a0047e8:	4770      	bxeq	lr
1a0047ea:	b530      	push	{r4, r5, lr}
1a0047ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0047f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0047f4:	f04f 0500 	mov.w	r5, #0
1a0047f8:	f04f 0100 	mov.w	r1, #0
1a0047fc:	e750      	b.n	1a0046a0 <__adddf3+0x138>
1a0047fe:	bf00      	nop

1a004800 <__aeabi_i2d>:
1a004800:	f090 0f00 	teq	r0, #0
1a004804:	bf04      	itt	eq
1a004806:	2100      	moveq	r1, #0
1a004808:	4770      	bxeq	lr
1a00480a:	b530      	push	{r4, r5, lr}
1a00480c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004810:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004814:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a004818:	bf48      	it	mi
1a00481a:	4240      	negmi	r0, r0
1a00481c:	f04f 0100 	mov.w	r1, #0
1a004820:	e73e      	b.n	1a0046a0 <__adddf3+0x138>
1a004822:	bf00      	nop

1a004824 <__aeabi_f2d>:
1a004824:	0042      	lsls	r2, r0, #1
1a004826:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a00482a:	ea4f 0131 	mov.w	r1, r1, rrx
1a00482e:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a004832:	bf1f      	itttt	ne
1a004834:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a004838:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a00483c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a004840:	4770      	bxne	lr
1a004842:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a004846:	bf08      	it	eq
1a004848:	4770      	bxeq	lr
1a00484a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00484e:	bf04      	itt	eq
1a004850:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a004854:	4770      	bxeq	lr
1a004856:	b530      	push	{r4, r5, lr}
1a004858:	f44f 7460 	mov.w	r4, #896	; 0x380
1a00485c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004860:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004864:	e71c      	b.n	1a0046a0 <__adddf3+0x138>
1a004866:	bf00      	nop

1a004868 <__aeabi_ul2d>:
1a004868:	ea50 0201 	orrs.w	r2, r0, r1
1a00486c:	bf08      	it	eq
1a00486e:	4770      	bxeq	lr
1a004870:	b530      	push	{r4, r5, lr}
1a004872:	f04f 0500 	mov.w	r5, #0
1a004876:	e00a      	b.n	1a00488e <__aeabi_l2d+0x16>

1a004878 <__aeabi_l2d>:
1a004878:	ea50 0201 	orrs.w	r2, r0, r1
1a00487c:	bf08      	it	eq
1a00487e:	4770      	bxeq	lr
1a004880:	b530      	push	{r4, r5, lr}
1a004882:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a004886:	d502      	bpl.n	1a00488e <__aeabi_l2d+0x16>
1a004888:	4240      	negs	r0, r0
1a00488a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00488e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004892:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004896:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00489a:	f43f aed8 	beq.w	1a00464e <__adddf3+0xe6>
1a00489e:	f04f 0203 	mov.w	r2, #3
1a0048a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0048a6:	bf18      	it	ne
1a0048a8:	3203      	addne	r2, #3
1a0048aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0048ae:	bf18      	it	ne
1a0048b0:	3203      	addne	r2, #3
1a0048b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0048b6:	f1c2 0320 	rsb	r3, r2, #32
1a0048ba:	fa00 fc03 	lsl.w	ip, r0, r3
1a0048be:	fa20 f002 	lsr.w	r0, r0, r2
1a0048c2:	fa01 fe03 	lsl.w	lr, r1, r3
1a0048c6:	ea40 000e 	orr.w	r0, r0, lr
1a0048ca:	fa21 f102 	lsr.w	r1, r1, r2
1a0048ce:	4414      	add	r4, r2
1a0048d0:	e6bd      	b.n	1a00464e <__adddf3+0xe6>
1a0048d2:	bf00      	nop

1a0048d4 <__aeabi_d2f>:
1a0048d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0048d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a0048dc:	bf24      	itt	cs
1a0048de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a0048e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a0048e6:	d90d      	bls.n	1a004904 <__aeabi_d2f+0x30>
1a0048e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a0048ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0048f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0048f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a0048f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a0048fc:	bf08      	it	eq
1a0048fe:	f020 0001 	biceq.w	r0, r0, #1
1a004902:	4770      	bx	lr
1a004904:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a004908:	d121      	bne.n	1a00494e <__aeabi_d2f+0x7a>
1a00490a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a00490e:	bfbc      	itt	lt
1a004910:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a004914:	4770      	bxlt	lr
1a004916:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00491a:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a00491e:	f1c2 0218 	rsb	r2, r2, #24
1a004922:	f1c2 0c20 	rsb	ip, r2, #32
1a004926:	fa10 f30c 	lsls.w	r3, r0, ip
1a00492a:	fa20 f002 	lsr.w	r0, r0, r2
1a00492e:	bf18      	it	ne
1a004930:	f040 0001 	orrne.w	r0, r0, #1
1a004934:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a004938:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a00493c:	fa03 fc0c 	lsl.w	ip, r3, ip
1a004940:	ea40 000c 	orr.w	r0, r0, ip
1a004944:	fa23 f302 	lsr.w	r3, r3, r2
1a004948:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a00494c:	e7cc      	b.n	1a0048e8 <__aeabi_d2f+0x14>
1a00494e:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a004952:	d107      	bne.n	1a004964 <__aeabi_d2f+0x90>
1a004954:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a004958:	bf1e      	ittt	ne
1a00495a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a00495e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a004962:	4770      	bxne	lr
1a004964:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a004968:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a00496c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a004970:	4770      	bx	lr
1a004972:	bf00      	nop

1a004974 <__aeabi_uldivmod>:
1a004974:	b953      	cbnz	r3, 1a00498c <__aeabi_uldivmod+0x18>
1a004976:	b94a      	cbnz	r2, 1a00498c <__aeabi_uldivmod+0x18>
1a004978:	2900      	cmp	r1, #0
1a00497a:	bf08      	it	eq
1a00497c:	2800      	cmpeq	r0, #0
1a00497e:	bf1c      	itt	ne
1a004980:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004984:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004988:	f000 b972 	b.w	1a004c70 <__aeabi_idiv0>
1a00498c:	f1ad 0c08 	sub.w	ip, sp, #8
1a004990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004994:	f000 f806 	bl	1a0049a4 <__udivmoddi4>
1a004998:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00499c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0049a0:	b004      	add	sp, #16
1a0049a2:	4770      	bx	lr

1a0049a4 <__udivmoddi4>:
1a0049a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0049a8:	9e08      	ldr	r6, [sp, #32]
1a0049aa:	4604      	mov	r4, r0
1a0049ac:	4688      	mov	r8, r1
1a0049ae:	2b00      	cmp	r3, #0
1a0049b0:	d14b      	bne.n	1a004a4a <__udivmoddi4+0xa6>
1a0049b2:	428a      	cmp	r2, r1
1a0049b4:	4615      	mov	r5, r2
1a0049b6:	d967      	bls.n	1a004a88 <__udivmoddi4+0xe4>
1a0049b8:	fab2 f282 	clz	r2, r2
1a0049bc:	b14a      	cbz	r2, 1a0049d2 <__udivmoddi4+0x2e>
1a0049be:	f1c2 0720 	rsb	r7, r2, #32
1a0049c2:	fa01 f302 	lsl.w	r3, r1, r2
1a0049c6:	fa20 f707 	lsr.w	r7, r0, r7
1a0049ca:	4095      	lsls	r5, r2
1a0049cc:	ea47 0803 	orr.w	r8, r7, r3
1a0049d0:	4094      	lsls	r4, r2
1a0049d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0049d6:	0c23      	lsrs	r3, r4, #16
1a0049d8:	fbb8 f7fe 	udiv	r7, r8, lr
1a0049dc:	fa1f fc85 	uxth.w	ip, r5
1a0049e0:	fb0e 8817 	mls	r8, lr, r7, r8
1a0049e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0049e8:	fb07 f10c 	mul.w	r1, r7, ip
1a0049ec:	4299      	cmp	r1, r3
1a0049ee:	d909      	bls.n	1a004a04 <__udivmoddi4+0x60>
1a0049f0:	18eb      	adds	r3, r5, r3
1a0049f2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0049f6:	f080 811b 	bcs.w	1a004c30 <__udivmoddi4+0x28c>
1a0049fa:	4299      	cmp	r1, r3
1a0049fc:	f240 8118 	bls.w	1a004c30 <__udivmoddi4+0x28c>
1a004a00:	3f02      	subs	r7, #2
1a004a02:	442b      	add	r3, r5
1a004a04:	1a5b      	subs	r3, r3, r1
1a004a06:	b2a4      	uxth	r4, r4
1a004a08:	fbb3 f0fe 	udiv	r0, r3, lr
1a004a0c:	fb0e 3310 	mls	r3, lr, r0, r3
1a004a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004a14:	fb00 fc0c 	mul.w	ip, r0, ip
1a004a18:	45a4      	cmp	ip, r4
1a004a1a:	d909      	bls.n	1a004a30 <__udivmoddi4+0x8c>
1a004a1c:	192c      	adds	r4, r5, r4
1a004a1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004a22:	f080 8107 	bcs.w	1a004c34 <__udivmoddi4+0x290>
1a004a26:	45a4      	cmp	ip, r4
1a004a28:	f240 8104 	bls.w	1a004c34 <__udivmoddi4+0x290>
1a004a2c:	3802      	subs	r0, #2
1a004a2e:	442c      	add	r4, r5
1a004a30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004a34:	eba4 040c 	sub.w	r4, r4, ip
1a004a38:	2700      	movs	r7, #0
1a004a3a:	b11e      	cbz	r6, 1a004a44 <__udivmoddi4+0xa0>
1a004a3c:	40d4      	lsrs	r4, r2
1a004a3e:	2300      	movs	r3, #0
1a004a40:	e9c6 4300 	strd	r4, r3, [r6]
1a004a44:	4639      	mov	r1, r7
1a004a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004a4a:	428b      	cmp	r3, r1
1a004a4c:	d909      	bls.n	1a004a62 <__udivmoddi4+0xbe>
1a004a4e:	2e00      	cmp	r6, #0
1a004a50:	f000 80eb 	beq.w	1a004c2a <__udivmoddi4+0x286>
1a004a54:	2700      	movs	r7, #0
1a004a56:	e9c6 0100 	strd	r0, r1, [r6]
1a004a5a:	4638      	mov	r0, r7
1a004a5c:	4639      	mov	r1, r7
1a004a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004a62:	fab3 f783 	clz	r7, r3
1a004a66:	2f00      	cmp	r7, #0
1a004a68:	d147      	bne.n	1a004afa <__udivmoddi4+0x156>
1a004a6a:	428b      	cmp	r3, r1
1a004a6c:	d302      	bcc.n	1a004a74 <__udivmoddi4+0xd0>
1a004a6e:	4282      	cmp	r2, r0
1a004a70:	f200 80fa 	bhi.w	1a004c68 <__udivmoddi4+0x2c4>
1a004a74:	1a84      	subs	r4, r0, r2
1a004a76:	eb61 0303 	sbc.w	r3, r1, r3
1a004a7a:	2001      	movs	r0, #1
1a004a7c:	4698      	mov	r8, r3
1a004a7e:	2e00      	cmp	r6, #0
1a004a80:	d0e0      	beq.n	1a004a44 <__udivmoddi4+0xa0>
1a004a82:	e9c6 4800 	strd	r4, r8, [r6]
1a004a86:	e7dd      	b.n	1a004a44 <__udivmoddi4+0xa0>
1a004a88:	b902      	cbnz	r2, 1a004a8c <__udivmoddi4+0xe8>
1a004a8a:	deff      	udf	#255	; 0xff
1a004a8c:	fab2 f282 	clz	r2, r2
1a004a90:	2a00      	cmp	r2, #0
1a004a92:	f040 808f 	bne.w	1a004bb4 <__udivmoddi4+0x210>
1a004a96:	1b49      	subs	r1, r1, r5
1a004a98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004a9c:	fa1f f885 	uxth.w	r8, r5
1a004aa0:	2701      	movs	r7, #1
1a004aa2:	fbb1 fcfe 	udiv	ip, r1, lr
1a004aa6:	0c23      	lsrs	r3, r4, #16
1a004aa8:	fb0e 111c 	mls	r1, lr, ip, r1
1a004aac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004ab0:	fb08 f10c 	mul.w	r1, r8, ip
1a004ab4:	4299      	cmp	r1, r3
1a004ab6:	d907      	bls.n	1a004ac8 <__udivmoddi4+0x124>
1a004ab8:	18eb      	adds	r3, r5, r3
1a004aba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a004abe:	d202      	bcs.n	1a004ac6 <__udivmoddi4+0x122>
1a004ac0:	4299      	cmp	r1, r3
1a004ac2:	f200 80cd 	bhi.w	1a004c60 <__udivmoddi4+0x2bc>
1a004ac6:	4684      	mov	ip, r0
1a004ac8:	1a59      	subs	r1, r3, r1
1a004aca:	b2a3      	uxth	r3, r4
1a004acc:	fbb1 f0fe 	udiv	r0, r1, lr
1a004ad0:	fb0e 1410 	mls	r4, lr, r0, r1
1a004ad4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a004ad8:	fb08 f800 	mul.w	r8, r8, r0
1a004adc:	45a0      	cmp	r8, r4
1a004ade:	d907      	bls.n	1a004af0 <__udivmoddi4+0x14c>
1a004ae0:	192c      	adds	r4, r5, r4
1a004ae2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004ae6:	d202      	bcs.n	1a004aee <__udivmoddi4+0x14a>
1a004ae8:	45a0      	cmp	r8, r4
1a004aea:	f200 80b6 	bhi.w	1a004c5a <__udivmoddi4+0x2b6>
1a004aee:	4618      	mov	r0, r3
1a004af0:	eba4 0408 	sub.w	r4, r4, r8
1a004af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a004af8:	e79f      	b.n	1a004a3a <__udivmoddi4+0x96>
1a004afa:	f1c7 0c20 	rsb	ip, r7, #32
1a004afe:	40bb      	lsls	r3, r7
1a004b00:	fa22 fe0c 	lsr.w	lr, r2, ip
1a004b04:	ea4e 0e03 	orr.w	lr, lr, r3
1a004b08:	fa01 f407 	lsl.w	r4, r1, r7
1a004b0c:	fa20 f50c 	lsr.w	r5, r0, ip
1a004b10:	fa21 f30c 	lsr.w	r3, r1, ip
1a004b14:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a004b18:	4325      	orrs	r5, r4
1a004b1a:	fbb3 f9f8 	udiv	r9, r3, r8
1a004b1e:	0c2c      	lsrs	r4, r5, #16
1a004b20:	fb08 3319 	mls	r3, r8, r9, r3
1a004b24:	fa1f fa8e 	uxth.w	sl, lr
1a004b28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a004b2c:	fb09 f40a 	mul.w	r4, r9, sl
1a004b30:	429c      	cmp	r4, r3
1a004b32:	fa02 f207 	lsl.w	r2, r2, r7
1a004b36:	fa00 f107 	lsl.w	r1, r0, r7
1a004b3a:	d90b      	bls.n	1a004b54 <__udivmoddi4+0x1b0>
1a004b3c:	eb1e 0303 	adds.w	r3, lr, r3
1a004b40:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004b44:	f080 8087 	bcs.w	1a004c56 <__udivmoddi4+0x2b2>
1a004b48:	429c      	cmp	r4, r3
1a004b4a:	f240 8084 	bls.w	1a004c56 <__udivmoddi4+0x2b2>
1a004b4e:	f1a9 0902 	sub.w	r9, r9, #2
1a004b52:	4473      	add	r3, lr
1a004b54:	1b1b      	subs	r3, r3, r4
1a004b56:	b2ad      	uxth	r5, r5
1a004b58:	fbb3 f0f8 	udiv	r0, r3, r8
1a004b5c:	fb08 3310 	mls	r3, r8, r0, r3
1a004b60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a004b64:	fb00 fa0a 	mul.w	sl, r0, sl
1a004b68:	45a2      	cmp	sl, r4
1a004b6a:	d908      	bls.n	1a004b7e <__udivmoddi4+0x1da>
1a004b6c:	eb1e 0404 	adds.w	r4, lr, r4
1a004b70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004b74:	d26b      	bcs.n	1a004c4e <__udivmoddi4+0x2aa>
1a004b76:	45a2      	cmp	sl, r4
1a004b78:	d969      	bls.n	1a004c4e <__udivmoddi4+0x2aa>
1a004b7a:	3802      	subs	r0, #2
1a004b7c:	4474      	add	r4, lr
1a004b7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004b82:	fba0 8902 	umull	r8, r9, r0, r2
1a004b86:	eba4 040a 	sub.w	r4, r4, sl
1a004b8a:	454c      	cmp	r4, r9
1a004b8c:	46c2      	mov	sl, r8
1a004b8e:	464b      	mov	r3, r9
1a004b90:	d354      	bcc.n	1a004c3c <__udivmoddi4+0x298>
1a004b92:	d051      	beq.n	1a004c38 <__udivmoddi4+0x294>
1a004b94:	2e00      	cmp	r6, #0
1a004b96:	d069      	beq.n	1a004c6c <__udivmoddi4+0x2c8>
1a004b98:	ebb1 050a 	subs.w	r5, r1, sl
1a004b9c:	eb64 0403 	sbc.w	r4, r4, r3
1a004ba0:	fa04 fc0c 	lsl.w	ip, r4, ip
1a004ba4:	40fd      	lsrs	r5, r7
1a004ba6:	40fc      	lsrs	r4, r7
1a004ba8:	ea4c 0505 	orr.w	r5, ip, r5
1a004bac:	e9c6 5400 	strd	r5, r4, [r6]
1a004bb0:	2700      	movs	r7, #0
1a004bb2:	e747      	b.n	1a004a44 <__udivmoddi4+0xa0>
1a004bb4:	f1c2 0320 	rsb	r3, r2, #32
1a004bb8:	fa20 f703 	lsr.w	r7, r0, r3
1a004bbc:	4095      	lsls	r5, r2
1a004bbe:	fa01 f002 	lsl.w	r0, r1, r2
1a004bc2:	fa21 f303 	lsr.w	r3, r1, r3
1a004bc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004bca:	4338      	orrs	r0, r7
1a004bcc:	0c01      	lsrs	r1, r0, #16
1a004bce:	fbb3 f7fe 	udiv	r7, r3, lr
1a004bd2:	fa1f f885 	uxth.w	r8, r5
1a004bd6:	fb0e 3317 	mls	r3, lr, r7, r3
1a004bda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004bde:	fb07 f308 	mul.w	r3, r7, r8
1a004be2:	428b      	cmp	r3, r1
1a004be4:	fa04 f402 	lsl.w	r4, r4, r2
1a004be8:	d907      	bls.n	1a004bfa <__udivmoddi4+0x256>
1a004bea:	1869      	adds	r1, r5, r1
1a004bec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004bf0:	d22f      	bcs.n	1a004c52 <__udivmoddi4+0x2ae>
1a004bf2:	428b      	cmp	r3, r1
1a004bf4:	d92d      	bls.n	1a004c52 <__udivmoddi4+0x2ae>
1a004bf6:	3f02      	subs	r7, #2
1a004bf8:	4429      	add	r1, r5
1a004bfa:	1acb      	subs	r3, r1, r3
1a004bfc:	b281      	uxth	r1, r0
1a004bfe:	fbb3 f0fe 	udiv	r0, r3, lr
1a004c02:	fb0e 3310 	mls	r3, lr, r0, r3
1a004c06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004c0a:	fb00 f308 	mul.w	r3, r0, r8
1a004c0e:	428b      	cmp	r3, r1
1a004c10:	d907      	bls.n	1a004c22 <__udivmoddi4+0x27e>
1a004c12:	1869      	adds	r1, r5, r1
1a004c14:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004c18:	d217      	bcs.n	1a004c4a <__udivmoddi4+0x2a6>
1a004c1a:	428b      	cmp	r3, r1
1a004c1c:	d915      	bls.n	1a004c4a <__udivmoddi4+0x2a6>
1a004c1e:	3802      	subs	r0, #2
1a004c20:	4429      	add	r1, r5
1a004c22:	1ac9      	subs	r1, r1, r3
1a004c24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004c28:	e73b      	b.n	1a004aa2 <__udivmoddi4+0xfe>
1a004c2a:	4637      	mov	r7, r6
1a004c2c:	4630      	mov	r0, r6
1a004c2e:	e709      	b.n	1a004a44 <__udivmoddi4+0xa0>
1a004c30:	4607      	mov	r7, r0
1a004c32:	e6e7      	b.n	1a004a04 <__udivmoddi4+0x60>
1a004c34:	4618      	mov	r0, r3
1a004c36:	e6fb      	b.n	1a004a30 <__udivmoddi4+0x8c>
1a004c38:	4541      	cmp	r1, r8
1a004c3a:	d2ab      	bcs.n	1a004b94 <__udivmoddi4+0x1f0>
1a004c3c:	ebb8 0a02 	subs.w	sl, r8, r2
1a004c40:	eb69 020e 	sbc.w	r2, r9, lr
1a004c44:	3801      	subs	r0, #1
1a004c46:	4613      	mov	r3, r2
1a004c48:	e7a4      	b.n	1a004b94 <__udivmoddi4+0x1f0>
1a004c4a:	4660      	mov	r0, ip
1a004c4c:	e7e9      	b.n	1a004c22 <__udivmoddi4+0x27e>
1a004c4e:	4618      	mov	r0, r3
1a004c50:	e795      	b.n	1a004b7e <__udivmoddi4+0x1da>
1a004c52:	4667      	mov	r7, ip
1a004c54:	e7d1      	b.n	1a004bfa <__udivmoddi4+0x256>
1a004c56:	4681      	mov	r9, r0
1a004c58:	e77c      	b.n	1a004b54 <__udivmoddi4+0x1b0>
1a004c5a:	3802      	subs	r0, #2
1a004c5c:	442c      	add	r4, r5
1a004c5e:	e747      	b.n	1a004af0 <__udivmoddi4+0x14c>
1a004c60:	f1ac 0c02 	sub.w	ip, ip, #2
1a004c64:	442b      	add	r3, r5
1a004c66:	e72f      	b.n	1a004ac8 <__udivmoddi4+0x124>
1a004c68:	4638      	mov	r0, r7
1a004c6a:	e708      	b.n	1a004a7e <__udivmoddi4+0xda>
1a004c6c:	4637      	mov	r7, r6
1a004c6e:	e6e9      	b.n	1a004a44 <__udivmoddi4+0xa0>

1a004c70 <__aeabi_idiv0>:
1a004c70:	4770      	bx	lr
1a004c72:	bf00      	nop

1a004c74 <__libc_init_array>:
1a004c74:	b570      	push	{r4, r5, r6, lr}
1a004c76:	4e0d      	ldr	r6, [pc, #52]	; (1a004cac <__libc_init_array+0x38>)
1a004c78:	4c0d      	ldr	r4, [pc, #52]	; (1a004cb0 <__libc_init_array+0x3c>)
1a004c7a:	1ba4      	subs	r4, r4, r6
1a004c7c:	10a4      	asrs	r4, r4, #2
1a004c7e:	2500      	movs	r5, #0
1a004c80:	42a5      	cmp	r5, r4
1a004c82:	d109      	bne.n	1a004c98 <__libc_init_array+0x24>
1a004c84:	4e0b      	ldr	r6, [pc, #44]	; (1a004cb4 <__libc_init_array+0x40>)
1a004c86:	4c0c      	ldr	r4, [pc, #48]	; (1a004cb8 <__libc_init_array+0x44>)
1a004c88:	f7ff fc66 	bl	1a004558 <_init>
1a004c8c:	1ba4      	subs	r4, r4, r6
1a004c8e:	10a4      	asrs	r4, r4, #2
1a004c90:	2500      	movs	r5, #0
1a004c92:	42a5      	cmp	r5, r4
1a004c94:	d105      	bne.n	1a004ca2 <__libc_init_array+0x2e>
1a004c96:	bd70      	pop	{r4, r5, r6, pc}
1a004c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004c9c:	4798      	blx	r3
1a004c9e:	3501      	adds	r5, #1
1a004ca0:	e7ee      	b.n	1a004c80 <__libc_init_array+0xc>
1a004ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004ca6:	4798      	blx	r3
1a004ca8:	3501      	adds	r5, #1
1a004caa:	e7f2      	b.n	1a004c92 <__libc_init_array+0x1e>
1a004cac:	1a0050c0 	.word	0x1a0050c0
1a004cb0:	1a0050c0 	.word	0x1a0050c0
1a004cb4:	1a0050c0 	.word	0x1a0050c0
1a004cb8:	1a0050c0 	.word	0x1a0050c0

1a004cbc <memcpy>:
1a004cbc:	b510      	push	{r4, lr}
1a004cbe:	1e43      	subs	r3, r0, #1
1a004cc0:	440a      	add	r2, r1
1a004cc2:	4291      	cmp	r1, r2
1a004cc4:	d100      	bne.n	1a004cc8 <memcpy+0xc>
1a004cc6:	bd10      	pop	{r4, pc}
1a004cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
1a004cd0:	e7f7      	b.n	1a004cc2 <memcpy+0x6>

1a004cd2 <memset>:
1a004cd2:	4402      	add	r2, r0
1a004cd4:	4603      	mov	r3, r0
1a004cd6:	4293      	cmp	r3, r2
1a004cd8:	d100      	bne.n	1a004cdc <memset+0xa>
1a004cda:	4770      	bx	lr
1a004cdc:	f803 1b01 	strb.w	r1, [r3], #1
1a004ce0:	e7f9      	b.n	1a004cd6 <memset+0x4>
1a004ce2:	ffff 796d 	vtbx.8	d23, {d15-d16}, d29
1a004ce6:	6154      	.short	0x6154
1a004ce8:	00006b73 	.word	0x00006b73
1a004cec:	6154796d 	.word	0x6154796d
1a004cf0:	6f646b73 	.word	0x6f646b73
1a004cf4:	00000073 	.word	0x00000073
1a004cf8:	65726154 	.word	0x65726154
1a004cfc:	00412061 	.word	0x00412061
1a004d00:	61666c41 	.word	0x61666c41
1a004d04:	000a0d21 	.word	0x000a0d21
1a004d08:	2055504d 	.word	0x2055504d
1a004d0c:	656e6f63 	.word	0x656e6f63
1a004d10:	64617463 	.word	0x64617463
1a004d14:	0a0d216f 	.word	0x0a0d216f
1a004d18:	00000000 	.word	0x00000000
1a004d1c:	2075704d 	.word	0x2075704d
1a004d20:	64206f6e 	.word	0x64206f6e
1a004d24:	63657465 	.word	0x63657465
1a004d28:	6f646174 	.word	0x6f646174
1a004d2c:	000a0d21 	.word	0x000a0d21
1a004d30:	61746542 	.word	0x61746542
1a004d34:	000a0d21 	.word	0x000a0d21
1a004d38:	6d6d6167 	.word	0x6d6d6167
1a004d3c:	0a0d2161 	.word	0x0a0d2161
1a004d40:	00000000 	.word	0x00000000
1a004d44:	61746f79 	.word	0x61746f79
1a004d48:	000a0d21 	.word	0x000a0d21
1a004d4c:	6f726947 	.word	0x6f726947
1a004d50:	706f6373 	.word	0x706f6373
1a004d54:	000a0d6f 	.word	0x000a0d6f
1a004d58:	203a5847 	.word	0x203a5847
1a004d5c:	00000020 	.word	0x00000020
1a004d60:	00000a0d 	.word	0x00000a0d
1a004d64:	203a5947 	.word	0x203a5947
1a004d68:	00000020 	.word	0x00000020
1a004d6c:	203a5a47 	.word	0x203a5a47
1a004d70:	ffff0020 	.word	0xffff0020
1a004d74:	454c4449 	.word	0x454c4449
1a004d78:	ffffff00 	.word	0xffffff00
1a004d7c:	51726d54 	.word	0x51726d54
1a004d80:	ffffff00 	.word	0xffffff00
1a004d84:	20726d54 	.word	0x20726d54
1a004d88:	00637653 	.word	0x00637653

1a004d8c <ultrasonicSensorsIrqMap>:
1a004d8c:	ff020100                                ....

1a004d90 <gpioPinsInit>:
1a004d90:	02000104 00050701 05010d03 04080100     ................
1a004da0:	02020002 02000304 00000403 04070002     ................
1a004db0:	030c0300 09050402 05040103 04030208     ................
1a004dc0:	04020305 06040504 0802000c 03000b06     ................
1a004dd0:	00090607 07060503 060f0504 03030004     ................
1a004de0:	02000404 00050404 06040502 04060200     ................
1a004df0:	0c050408 05040a04 0003010e 14010a00     ................
1a004e00:	010f0000 0d000012 00001101 0010010c     ................
1a004e10:	07070300 000f0300 01000001 00000000     ................
1a004e20:	000a0600 08060603 06100504 04030005     ................
1a004e30:	03000106 04090400 04010d05 010b0000     ................
1a004e40:	0200000f 00000001 00010104 02010800     ................
1a004e50:	01090000 09010006 05040002 04010200     ................
1a004e60:	02020105 02020504 0e00000a 01000b02     ................
1a004e70:	000c020b 00040c01 04000200 01020001     ................
1a004e80:	02000204 00030402 03070302 070b0300     ................
1a004e90:	0c030004 03000507 0006070d 01020e03     ................
1a004ea0:	04010504 06020006 02000504 00040405     ................
1a004eb0:	08040402 040c0504 0d050409 05040a04     ................
1a004ec0:	0005010e ffff0801 636b6974 69547265     ........tikcerTi
1a004ed0:	0072656d                                mer.

1a004ed4 <lpcUarts>:
1a004ed4:	40081000 06020406 00180205 40081000     ...@...........@
1a004ee4:	09070509 00180706 40082000 00000000     ......... .@....
1a004ef4:	00190000 400c1000 07060107 001a0602     .......@........
1a004f04:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004f14:	02020302 001b0204                       ........

1a004f1c <ExtRateIn>:
1a004f1c:	00000000                                ....

1a004f20 <GpioButtons>:
1a004f20:	08000400 09010900                       ........

1a004f28 <GpioLeds>:
1a004f28:	01050005 0e000205 0c010b01              ............

1a004f34 <GpioPorts>:
1a004f34:	03030003 0f050403 05031005 07030603     ................
1a004f44:	ffff0802                                ....

1a004f48 <OscRateIn>:
1a004f48:	00b71b00                                ....

1a004f4c <InitClkStates>:
1a004f4c:	00010308 00010307 01010f01              ............

1a004f58 <pinmuxing>:
1a004f58:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004f68:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004f78:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004f88:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004f98:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004fa8:	00d50301 00d50401 00160107 00560207     ..............V.
1a004fb8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004fc8:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a004fd8:	00b31201 00f01301 00b31401 00b60707     ................
1a004fe8:	00f20000 00b60100                       ........

1a004ff0 <UART_BClock>:
1a004ff0:	01a201c2 01620182                       ......b.

1a004ff8 <UART_PClock>:
1a004ff8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005008:	000000ff                                ....

1a00500c <periph_to_base>:
1a00500c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00501c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00502c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00503c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00504c:	01820013 00120182 01a201a2 01c20011     ................
1a00505c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00506c:	02220222 0223000d 001c0223              "."...#.#...

1a005078 <InitClkStates>:
1a005078:	00010100 00010909 0001090a 01010701     ................
1a005088:	00010902 00010906 0101090c 0001090d     ................
1a005098:	0001090e 0001090f 00010910 00010911     ................
1a0050a8:	00010912 00010913 00011114 00011119     ................
1a0050b8:	0001111a 0001111b                       ........
