
ProyectoFreeRTOS/out/ProyectoFreeRTOS.elf:     file format elf32-littlearm
ProyectoFreeRTOS/out/ProyectoFreeRTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a004f91

Program Header:
0x70000001 off    0x00015ba0 vaddr 0x1a005ba0 paddr 0x1a005ba0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002d1c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005ba8 memsz 0x00005ba8 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005ba8 align 2**16
         filesz 0x000000cc memsz 0x000000cc flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ba0  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  10000000  1a005ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
  6 .bss          00002c4c  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a005ba0  1a005ba0  00015ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000200cc  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
 17 .noinit       00000000  10002d1c  10002d1c  000200cc  2**2
                  CONTENTS
 18 .debug_info   00029f20  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00005cba  00000000  00000000  00049fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000bbca  00000000  00000000  0004fca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00001050  00000000  00000000  0005b870  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00001130  00000000  00000000  0005c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000f050  00000000  00000000  0005d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00014cb1  00000000  00000000  0006ca40  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002869c  00000000  00000000  000816f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000a9d8d  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000a9e0c  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002b70  00000000  00000000  000a9e44  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005ba0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002d1c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003a00 l     F .text	000000bc uartProcessIRQ
10002c9c l     O .bss	00000004 rxIsrCallbackUART0
10002ca0 l     O .bss	00000004 rxIsrCallbackUART2
10002ca4 l     O .bss	00000004 rxIsrCallbackUART3
10002ca8 l     O .bss	00000004 txIsrCallbackUART0
10002cac l     O .bss	00000004 txIsrCallbackUART2
10002cb0 l     O .bss	00000004 txIsrCallbackUART3
1a0059b4 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_blinky.c
00000000 l    df *ABS*	00000000 adaptacion_mpu9250.c
1a000ad0 l     F .text	00000080 Ampu9250InitializeControlStructure
1a000b50 l     F .text	00000034 Ampu9250ReadRegisters
1a000b84 l     F .text	00000020 Ampu9250WhoAmI
1a000ba4 l     F .text	00000048 Ampu9250WriteRegister
1a000bec l     F .text	00000058 Ampu9250ReadAK8963Registers
1a000c44 l     F .text	00000020 Ampu9250WhoAmIAK8963
1a000c64 l     F .text	00000078 Ampu9250WriteAK8963Register
1a000cdc l     F .text	00000094 Ampu9250SetGyroRange
1a000d70 l     F .text	000000f8 Ampu9250SetDlpfBandwidth
1a000e68 l     F .text	000000ac Ampu9250SetSrd
1a0011c0 l     F .text	00000158 Ampu9250CalibrateGyro
100000e0 l     O .bss	00000158 Acontrol
00000000 l    df *ABS*	00000000 heap_1.c
1000023c l     O .bss	00002000 ucHeap
10000238 l     O .bss	00000004 pucAlignedHeap.11323
1000223c l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a00166e l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a001680 l     F .text	0000001e prvIsQueueFull
1a00169e l     F .text	0000001a prvIsQueueEmpty
1a0016b8 l     F .text	00000076 prvCopyDataToQueue
1a00172e l     F .text	00000024 prvCopyDataFromQueue
1a001752 l     F .text	0000006e prvUnlockQueue
1a001844 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002240 l     O .bss	00000168 uxIdleTaskStack.10613
100023a8 l     O .bss	000005a0 uxTimerTaskStack.10620
10002948 l     O .bss	00000060 xIdleTaskTCB.10612
100029a8 l     O .bss	00000060 xTimerTaskTCB.10619
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0021cc l     F .text	0000002c prvResetNextTaskUnblockTime
1a0021f8 l     F .text	00000092 prvInitialiseNewTask
1a00228c l     F .text	00000068 prvInitialiseTaskLists
1a0022f4 l     F .text	000000ac prvAddNewTaskToReadyList
1a0023a0 l     F .text	00000038 prvDeleteTCB
1a0023d8 l     F .text	0000004c prvCheckTasksWaitingTermination
1a002424 l     F .text	00000028 prvIdleTask
1a00244c l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002a0c l     O .bss	00000004 pxDelayedTaskList
10002a10 l     O .bss	00000004 pxOverflowDelayedTaskList
10002a14 l     O .bss	0000008c pxReadyTasksLists
10002aa0 l     O .bss	00000004 uxCurrentNumberOfTasks
10002aa4 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002aa8 l     O .bss	00000004 uxPendedTicks
10002aac l     O .bss	00000004 uxSchedulerSuspended
10002ab0 l     O .bss	00000004 uxTaskNumber
10002ab4 l     O .bss	00000004 uxTopReadyPriority
10002ab8 l     O .bss	00000014 xDelayedTaskList1
10002acc l     O .bss	00000014 xDelayedTaskList2
10002ae0 l     O .bss	00000004 xNextTaskUnblockTime
10002ae4 l     O .bss	00000004 xNumOfOverflows
10002ae8 l     O .bss	00000014 xPendingReadyList
10002afc l     O .bss	00000004 xSchedulerRunning
10002b00 l     O .bss	00000014 xSuspendedTaskList
10002b14 l     O .bss	00000014 xTasksWaitingTermination
10002b28 l     O .bss	00000004 xTickCount
10002b2c l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002e2c l     F .text	00000020 prvGetNextExpireTime
1a002e4c l     F .text	00000048 prvInsertTimerInActiveList
1a002e94 l     F .text	00000070 prvCheckForValidListAndQueue
1a002f04 l     F .text	00000040 prvInitialiseNewTimer
1a0032d4 l     F .text	00000016 prvTimerTask
1a003060 l     F .text	00000078 prvSwitchTimerLists
1a0030d8 l     F .text	0000002c prvSampleTimeNow
1a003104 l     F .text	00000060 prvProcessExpiredTimer
1a003164 l     F .text	00000074 prvProcessTimerOrBlockTask
1a0031d8 l     F .text	000000fc prvProcessReceivedCommands
10002b30 l     O .bss	00000004 pxCurrentTimerList
10002b34 l     O .bss	00000004 pxOverflowTimerList
10002b38 l     O .bss	000000a0 ucStaticTimerQueueStorage.11713
10002bd8 l     O .bss	00000014 xActiveTimerList1
10002bec l     O .bss	00000014 xActiveTimerList2
10002c00 l     O .bss	00000004 xLastTime.11662
10002c04 l     O .bss	00000050 xStaticTimerQueue.11712
10002c54 l     O .bss	00000004 xTimerQueue
10002c58 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a0032ec l     F .text	00000040 prvTaskExitError
1a00332c l     F .text	00000022 prvPortStartFirstTask
1a003354 l     F .text	0000000e vPortEnableVFP
1a0033c0 l       .text	00000000 pxCurrentTCBConst2
1a0034a0 l       .text	00000000 pxCurrentTCBConst
10002c5c l     O .bss	00000001 ucMaxSysCallPriority
10002c60 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_dac.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a0036e4 l     F .text	00000010 clearInterrupt
1a0036f4 l     F .text	0000005c serveInterrupt
1000000c l     O .data	00000048 ultrasonicSensors
1a00586c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00375c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10002c6c l     O .bss	00000030 tickerObject.11711
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a003bac l     F .text	00000030 i2cHardwareInit
1a003bdc l     F .text	0000003c i2cHardwareRead
1a003c18 l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a003ca2 l     F .text	00000002 errorOcurred
1a003ca4 l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a003ea4 l     F .text	00000044 Board_LED_Init
1a003ee8 l     F .text	00000040 Board_TEC_Init
1a003f28 l     F .text	00000040 Board_GPIO_Init
1a003f68 l     F .text	00000038 Board_SPI_Init
1a003fa0 l     F .text	00000024 Board_I2C_Init
1a003fc4 l     F .text	00000030 Board_ADC_Init
1a005a00 l     O .text	00000008 GpioButtons
1a005a08 l     O .text	0000000c GpioLeds
1a005a14 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005a2c l     O .text	0000000c InitClkStates
1a005a38 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 dac_18xx_43xx.c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a00416c l     F .text	0000002c Chip_UART_GetIndex
1a005ad0 l     O .text	00000008 UART_BClock
1a005ad8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a004314 l     F .text	00000014 Chip_ADC_GetClockIndex
1a004328 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0043f0 l     F .text	000000a4 pll_calc_divs
1a004494 l     F .text	0000010c pll_get_frac
1a0045a0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a004814 l     F .text	00000022 Chip_Clock_GetDivRate
10002cb4 l     O .bss	00000008 audio_usb_pll_freq
1a005aec l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005b58 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a004edc l     F .text	00000014 Chip_SSP_GetClockIndex
1a004ef0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a005ba0 l       .bss_RAM5	00000000 __init_array_end
1a005ba0 l       .bss_RAM5	00000000 __preinit_array_end
1a005ba0 l       .bss_RAM5	00000000 __init_array_start
1a005ba0 l       .bss_RAM5	00000000 __preinit_array_start
1a004638 g     F .text	0000001c Chip_Clock_GetDividerSource
1a004c04 g     F .text	0000000e Chip_I2CM_Xfer
1a003d28 g     F .text	00000044 TIMER2_IRQHandler
1a003c54 g     F .text	0000000e i2cInit
1a00018e  w    F .text	00000002 DebugMon_Handler
1a000194  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000194  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000194  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a003408 g     F .text	0000002c vPortExitCritical
1a005334 g     F .text	0000005a .hidden __floatdidf
1a000194  w    F .text	00000002 I2C0_IRQHandler
10002c64 g     O .bss	00000004 callBackFuncParams
1a000f14 g     F .text	00000288 Ampu9250Read
1a000184  w    F .text	00000002 HardFault_Handler
1a0020b4 g     F .text	00000052 vQueueWaitForMessageRestricted
1a004cb0 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a0043ce g     F .text	0000000c Chip_ADC_SetResolution
1a001318 g     F .text	000002ac Ampu9250Init
1a0034a4 g     F .text	0000002c SysTick_Handler
1a0041ec g     F .text	00000040 Chip_UART_SetBaud
1a000194  w    F .text	00000002 SDIO_IRQHandler
1a000194  w    F .text	00000002 ATIMER_IRQHandler
1a003440 g     F .text	00000064 PendSV_Handler
1a001ac0 g     F .text	000000cc xQueueGenericSendFromISR
1a000182  w    F .text	00000002 NMI_Handler
1a005ba8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000194  w    F .text	00000002 I2C1_IRQHandler
1a000194  w    F .text	00000002 UART1_IRQHandler
1a000194  w    F .text	00000002 GPIO5_IRQHandler
1a000194  w    F .text	00000002 CAN1_IRQHandler
1a003c62 g     F .text	00000028 i2cRead
10002a08 g     O .bss	00000004 pxCurrentTCB
1a000714 g     F .text	00000050 Debounce
53ff28cc g       *ABS*	00000000 __valid_user_code_checksum
1a005ba8 g       .ARM.exidx	00000000 _etext
1a000194  w    F .text	00000002 USB1_IRQHandler
1a000194  w    F .text	00000002 I2S0_IRQHandler
1a002b24 g     F .text	00000018 vTaskInternalSetTimeOutState
1a003d6c g     F .text	00000044 TIMER3_IRQHandler
1a0048b6 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001b4 g     F .text	00000012 bss_init
1a003508 g     F .text	00000110 xPortStartScheduler
1a005778 g     F .text	00000016 memcpy
1a002a30 g     F .text	00000030 vTaskPlaceOnEventList
1a000194  w    F .text	00000002 SGPIO_IRQHandler
1a0052bc g     F .text	00000022 .hidden __floatsidf
1a0034d0  w    F .text	00000038 vPortSetupTimerInterrupt
1a004e5c g     F .text	00000030 Chip_I2C_MasterStateHandler
1a005430 g     F .text	00000000 .hidden __aeabi_uldivmod
10002d1c g       .noinit	00000000 _noinit
1a001658 g     F .text	00000016 vPortFree
1a003b7e g     F .text	00000018 uartWriteString
10002d18 g     O .bss	00000004 SystemCoreClock
1a004198 g     F .text	00000054 Chip_UART_Init
1a001d98 g     F .text	0000019c xQueueSemaphoreTake
1a00412a g     F .text	00000010 Chip_DAC_UpdateValue
1a000194  w    F .text	00000002 ADC0_IRQHandler
1a00397c g     F .text	00000038 tickerCallback
1a003618 g     F .text	0000005c vPortValidateInterruptPriority
10002cbc g     O .bss	00000004 Seleccion
1a00018a  w    F .text	00000002 UsageFault_Handler
1a004968 g     F .text	0000004c Chip_Clock_GetRate
1a002122 g     F .text	00000018 vListInsertEnd
1a000194  w    F .text	00000002 GPIO6_IRQHandler
10002d08 g     O .bss	00000008 tickCounter
1a0040a8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00529c g     F .text	0000001e .hidden __aeabi_ui2d
1a004e2c g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a005460 g     F .text	000002cc .hidden __udivmoddi4
1a005018 g     F .text	00000000 .hidden __aeabi_drsub
1a0059fc g     O .text	00000004 ExtRateIn
1a000194  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00211c g     F .text	00000006 vListInitialiseItem
1a000764 g     F .text	0000012c tareaD
1a000a84 g     F .text	0000004c GPIO1_IRQHandler
1a001c40 g     F .text	00000158 xQueueReceive
10002cc4 g     O .bss	00000040 xQueueRegistry
1a0052e0 g     F .text	00000042 .hidden __extendsfdf2
1a0021b0 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a000194  w    F .text	00000002 SSP0_IRQHandler
1a005024 g     F .text	00000276 .hidden __adddf3
1a005ba0 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0008cc g     F .text	00000060 initIRQ
1a005730 g     F .text	00000048 __libc_init_array
1a00529c g     F .text	0000001e .hidden __floatunsidf
1a000194  w    F .text	00000002 ADC1_IRQHandler
1a0015e8 g     F .text	00000070 pvPortMalloc
1a004018 g     F .text	0000003c Board_Init
1a005014 g     F .text	00000002 _init
1a002106 g     F .text	00000016 vListInitialise
1a0011b4 g     F .text	0000000c Ampu9250GetGyroZ_rads
1a000114 g       .text	00000000 __data_section_table
1a005390 g     F .text	0000009e .hidden __aeabi_d2f
1a002660 g     F .text	0000000c xTaskGetTickCount
1a001944 g     F .text	0000017c xQueueGenericSend
1a000194  w    F .text	00000002 RTC_IRQHandler
10002d1c g       .bss	00000000 _ebss
1a003ca8 g     F .text	00000040 TIMER0_IRQHandler
1a0039b4 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000194  w    F .text	00000002 SPI_IRQHandler
1a004c12 g     F .text	00000024 Chip_I2CM_XferBlocking
1a004df4 g     F .text	00000038 Chip_I2C_SetClockRate
1a002ca0 g     F .text	000000b0 xTaskPriorityDisinherit
1a000194  w    F .text	00000002 LCD_IRQHandler
1a0045ec g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002a98 g     F .text	0000008c xTaskRemoveFromEventList
1a0021ca g     F .text	00000002 vApplicationMallocFailedHook
1a005024 g     F .text	00000276 .hidden __aeabi_dadd
1a000196 g     F .text	0000001e data_init
1a000300 g     F .text	00000378 tareaA
1a001f34 g     F .text	00000158 xQueuePeek
1a0011a8 g     F .text	0000000c Ampu9250GetGyroY_rads
1a005324 g     F .text	0000006a .hidden __aeabi_ul2d
1a003ce8 g     F .text	00000040 TIMER1_IRQHandler
1a004dd0 g     F .text	00000024 Chip_I2C_Init
1a003b96 g     F .text	0000000a UART2_IRQHandler
1a0047a8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a005870 g     O .text	00000136 gpioPinsInit
1a003b64 g     F .text	0000001a uartWriteByte
1a002e10 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a004f08 g     F .text	00000012 Chip_SSP_SetClockRate
1a003750 g     F .text	0000000a GPIO2_IRQHandler
1a002b3c g     F .text	00000080 xTaskCheckForTimeOut
1a004890 g     F .text	00000026 Chip_Clock_GetBaseClock
1a002be8 g     F .text	000000b8 xTaskPriorityInherit
1a00119c g     F .text	0000000c Ampu9250GetGyroX_rads
100000d0 g       .bss	00000000 _bss
1a004152 g     F .text	0000001a Chip_DAC_Init
1a00439c g     F .text	00000032 Chip_ADC_SetSampleRate
1a005020 g     F .text	0000027a .hidden __aeabi_dsub
1a002650 g     F .text	00000010 vTaskSuspendAll
1a005324 g     F .text	0000006a .hidden __floatundidf
1a000194  w    F .text	00000002 I2S1_IRQHandler
1a004f1a g     F .text	0000003e Chip_SSP_SetBitRate
1a00216e g     F .text	00000028 uxListRemove
1a004c8c g     F .text	00000002 Chip_GPIO_Init
1a005a28 g     O .text	00000004 OscRateIn
1a003ae8 g     F .text	0000007c uartInit
1a0024e4 g     F .text	00000072 xTaskCreateStatic
10002d1c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a002968 g     F .text	000000c8 vTaskSwitchContext
1a000194  w    F .text	00000002 SSP1_IRQHandler
1a001866 g     F .text	00000090 xQueueGenericCreateStatic
1a002a60 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a0052bc g     F .text	00000022 .hidden __aeabi_i2d
1a003790 g     F .text	00000194 gpioInit
1a002198 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002ff4 g     F .text	0000006c xTimerGenericCommand
1a0021c8 g     F .text	00000002 vApplicationStackOverflowHook
1a00572c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a000194  w    F .text	00000002 USB0_IRQHandler
1a004934 g     F .text	00000034 Chip_Clock_Disable
1a000194  w    F .text	00000002 GPIO3_IRQHandler
1a004e8c g     F .text	00000018 Chip_I2C_IsStateChanged
1a000194  w    F .text	00000002 SCT_IRQHandler
1a004654 g     F .text	0000001c Chip_Clock_GetDividerDivisor
100000d8 g     O .bss	00000004 xSemaphoreTEC1R
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00578e g     F .text	00000010 memset
1a000186  w    F .text	00000002 MemManage_Handler
1a00092c g     F .text	0000010c main
1a000194  w    F .text	00000002 WDT_IRQHandler
1a00213a g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a0033a0 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a002f44 g     F .text	00000064 xTimerCreateTimerTask
1a005390 g     F .text	0000009e .hidden __truncdfsf2
1a005334 g     F .text	0000005a .hidden __aeabi_l2d
1a003abc g     F .text	00000018 uartTxReady
1a002878 g     F .text	000000a4 vTaskDelayUntil
1a000194  w    F .text	00000002 GPIO7_IRQHandler
1a0048c4 g     F .text	0000003c Chip_Clock_EnableOpts
1a0015d0 g     F .text	0000000c Ampu9250GetMagY_uT
1a0018f6 g     F .text	0000004e xQueueGenericCreate
1a004120 g     F .text	0000000a Chip_DAC_DeInit
100000d4 g     O .bss	00000004 xSemaphoreTEC1F
1a004670 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a004c38 g     F .text	00000054 fpuInit
1a004728 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a004054 g     F .text	0000001c SystemInit
1a000194  w    F .text	00000002 SPIFI_IRQHandler
1a000194  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003924 g     F .text	00000056 gpioWrite
1a002784 g     F .text	000000f4 xTaskResumeAll
1a0025bc g     F .text	00000094 vTaskStartScheduler
1a00435c g     F .text	00000040 Chip_ADC_Init
1a004070 g     F .text	00000038 Board_SetupMuxing
1a00422c g     F .text	000000e8 Chip_UART_SetBaudFDR
10002d10 g     O .bss	00000008 tickRateMS
1a000194  w    F .text	00000002 ETH_IRQHandler
10002c68 g     O .bss	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a003674 g     F .text	00000034 dacInit
1a000678 g     F .text	0000009c tareaB
1a003ad4 g     F .text	00000014 uartTxWrite
1a000194  w    F .text	00000002 CAN0_IRQHandler
1a004b08 g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a002bbc g     F .text	0000000c vTaskMissedYield
10002cc0 g     O .bss	00000004 Buffer
10002d1c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a004f58 g     F .text	00000038 Chip_SSP_Init
1a004ea4 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a00208c g     F .text	00000028 vQueueAddToRegistry
1a000194  w    F .text	00000002 GINT0_IRQHandler
1a00266c g     F .text	00000118 xTaskIncrementTick
1a00413a g     F .text	00000018 Chip_DAC_SetBias
1a000194  w    F .text	00000002 DAC_IRQHandler
1a003c8a g     F .text	00000018 i2cWrite
1a003ff4 g     F .text	00000024 Board_Debug_Init
1a0017c0 g     F .text	00000084 xQueueGenericReset
100000cc g       .data	00000000 _edata
1a0036a8 g     F .text	00000020 dacWrite
1a0015dc g     F .text	0000000c Ampu9250GetMagZ_uT
1a004c90 g     F .text	00000020 Chip_I2C_EventHandler
1a000194  w    F .text	00000002 M0SUB_IRQHandler
1a002556 g     F .text	00000066 xTaskCreate
1a0049b4 g     F .text	00000154 Chip_SetupCoreClock
100000d0 g     O .bss	00000004 xSemaphoreD1
1a000a38 g     F .text	0000004c GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a004f90 g     F .text	00000084 ResetISR
1a0043dc g     F .text	00000014 SystemCoreClockUpdate
1a000194  w    F .text	00000002 DMA_IRQHandler
1a00291c g     F .text	0000004c vTaskDelay
1a000194  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002bc8 g     F .text	00000020 xTaskGetSchedulerState
1a002d50 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a00572c  w    F .text	00000002 .hidden __aeabi_idiv0
1a0015c4 g     F .text	0000000c Ampu9250GetMagX_uT
1a000188  w    F .text	00000002 BusFault_Handler
1a003368 g     F .text	0000002c pxPortInitialiseStack
1a004900 g     F .text	00000034 Chip_Clock_Enable
1a003ba0 g     F .text	0000000a UART3_IRQHandler
1a000194  w    F .text	00000002 MCPWM_IRQHandler
1a002fa8 g     F .text	0000004c xTimerCreateStatic
1a000194  w    F .text	00000002 M0APP_IRQHandler
1a0052e0 g     F .text	00000042 .hidden __aeabi_f2d
1a003db0 g     F .text	000000f4 boardInit
1a0033c4 g     F .text	00000044 vPortEnterCritical
1a000890 g     F .text	0000003c tareaC
1a005020 g     F .text	0000027a .hidden __subdf3
1a000194  w    F .text	00000002 GINT1_IRQHandler
1a004838 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0036c8 g     F .text	0000001c cyclesCounterInit
1a000194  w    F .text	00000002 GPIO4_IRQHandler
1a001b8c g     F .text	000000b2 xQueueGiveFromISR
1a004114 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 91 4f 00 1a 83 01 00 1a 85 01 00 1a     .....O..........
1a000010:	87 01 00 1a 89 01 00 1a 8b 01 00 1a cc 28 ff 53     .............(.S
	...
1a00002c:	a1 33 00 1a 8f 01 00 1a 00 00 00 00 41 34 00 1a     .3..........A4..
1a00003c:	a5 34 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     .4..............
1a00004c:	00 00 00 00 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00005c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00006c:	95 01 00 1a a9 3c 00 1a e9 3c 00 1a 29 3d 00 1a     .....<...<..)=..
1a00007c:	6d 3d 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     m=..............
1a00008c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00009c:	95 01 00 1a 79 01 00 1a 95 01 00 1a 97 3b 00 1a     ....y........;..
1a0000ac:	a1 3b 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     .;..............
1a0000bc:	95 01 00 1a 39 0a 00 1a 85 0a 00 1a 51 37 00 1a     ....9.......Q7..
1a0000cc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000dc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000ec:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a0000fc:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a00010c:	95 01 00 1a 95 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a005ba8 	.word	0x1a005ba8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000cc 	.word	0x000000cc
1a000120:	1a005ba8 	.word	0x1a005ba8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005ba8 	.word	0x1a005ba8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005ba8 	.word	0x1a005ba8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005ba8 	.word	0x1a005ba8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	00002c4c 	.word	0x00002c4c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f003 fc40 	bl	1a003a00 <uartProcessIRQ>
}
1a000180:	bd08      	pop	{r3, pc}

1a000182 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <NMI_Handler>

1a000184 <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <HardFault_Handler>

1a000186 <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <MemManage_Handler>

1a000188 <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <BusFault_Handler>

1a00018a <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a00018a:	e7fe      	b.n	1a00018a <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a00018c:	e7fe      	b.n	1a00018c <UsageFault_Handler+0x2>

1a00018e <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a00018e:	e7fe      	b.n	1a00018e <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000190:	e7fe      	b.n	1a000190 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000192:	e7fe      	b.n	1a000192 <DebugMon_Handler+0x4>

1a000194 <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a000194:	e7fe      	b.n	1a000194 <ADC0_IRQHandler>

1a000196 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	2300      	movs	r3, #0
1a000198:	4293      	cmp	r3, r2
1a00019a:	d20a      	bcs.n	1a0001b2 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00019c:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a00019e:	6804      	ldr	r4, [r0, #0]
1a0001a0:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001a4:	3004      	adds	r0, #4
1a0001a6:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	4293      	cmp	r3, r2
1a0001aa:	d3f8      	bcc.n	1a00019e <data_init+0x8>
}
1a0001ac:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b0:	4770      	bx	lr
1a0001b2:	4770      	bx	lr

1a0001b4 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	2300      	movs	r3, #0
1a0001b6:	e003      	b.n	1a0001c0 <bss_init+0xc>
        *pulDest++ = 0;
1a0001b8:	2200      	movs	r2, #0
1a0001ba:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001be:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c0:	428b      	cmp	r3, r1
1a0001c2:	d3f9      	bcc.n	1a0001b8 <bss_init+0x4>
}
1a0001c4:	4770      	bx	lr
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <tareaA>:
	portEND_SWITCHING_ISR(xSwitchRequired);
}


//
void tareaA( void* taskParmPtr ){
1a000300:	b570      	push	{r4, r5, r6, lr}
1a000302:	ed2d 8b04 	vpush	{d8-d9}
1a000306:	b084      	sub	sp, #16
	int i=0, d=6;
	uint8_t erre[d];
	uint8_t a=0;


	Seleccion=xQueueCreate( 2, sizeof( int ) );
1a000308:	2200      	movs	r2, #0
1a00030a:	2104      	movs	r1, #4
1a00030c:	2002      	movs	r0, #2
1a00030e:	f001 faf2 	bl	1a0018f6 <xQueueGenericCreate>
1a000312:	4bca      	ldr	r3, [pc, #808]	; (1a00063c <tareaA+0x33c>)
1a000314:	6018      	str	r0, [r3, #0]

	erre[d]=0;
1a000316:	2000      	movs	r0, #0
1a000318:	f88d 000e 	strb.w	r0, [sp, #14]
	int len,j,temp, show;

	//void dacConfig( dacConfig_t config );
	//void dacWrite( dacMap_t analogOutput, uint16_t value );
	dacConfig( DAC_ENABLE );
1a00031c:	f003 f9aa 	bl	1a003674 <dacInit>
	//chptr = (unsigned char*) malloc(4 * sizeof(char));

	int ipart =000;

	//uartWriteString( UART_USB, "Alfa!\r\n" );
	status = Ampu9250Init( addr );
1a000320:	2068      	movs	r0, #104	; 0x68
1a000322:	f000 fff9 	bl	1a001318 <Ampu9250Init>
	if(status){uartWriteString( UART_USB, "MPU conectado!\r\n" );
1a000326:	b128      	cbz	r0, 1a000334 <tareaA+0x34>
1a000328:	49c5      	ldr	r1, [pc, #788]	; (1a000640 <tareaA+0x340>)
1a00032a:	2003      	movs	r0, #3
1a00032c:	f003 fc27 	bl	1a003b7e <uartWriteString>
void tareaA( void* taskParmPtr ){
1a000330:	2400      	movs	r4, #0
1a000332:	e149      	b.n	1a0005c8 <tareaA+0x2c8>
	}else{uartWriteString( UART_USB, "Mpu no detectado!\r\n" );	}
1a000334:	49c3      	ldr	r1, [pc, #780]	; (1a000644 <tareaA+0x344>)
1a000336:	2003      	movs	r0, #3
1a000338:	f003 fc21 	bl	1a003b7e <uartWriteString>
1a00033c:	e7f8      	b.n	1a000330 <tareaA+0x30>


    ///////////

    	if(xSemaphoreTake( xSemaphoreD1, 1/portTICK_RATE_MS) == pdTRUE){
    		a++;
1a00033e:	3401      	adds	r4, #1
1a000340:	b2e4      	uxtb	r4, r4
1a000342:	e16c      	b.n	1a00061e <tareaA+0x31e>

    	///////////


switch (a){
case 1:	show=x;			break;
1a000344:	eefd 7ae8 	vcvt.s32.f32	s15, s17
1a000348:	edcd 7a01 	vstr	s15, [sp, #4]
case 3:	show=z;			break;
default:show=x,a=1;		break;

};

	xQueueSend(Seleccion, ( void * ) &show, portMAX_DELAY);
1a00034c:	2300      	movs	r3, #0
1a00034e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000352:	a901      	add	r1, sp, #4
1a000354:	48b9      	ldr	r0, [pc, #740]	; (1a00063c <tareaA+0x33c>)
1a000356:	6800      	ldr	r0, [r0, #0]
1a000358:	f001 faf4 	bl	1a001944 <xQueueGenericSend>
    dacWrite( DAC, show); //
1a00035c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
1a000360:	2042      	movs	r0, #66	; 0x42
1a000362:	f003 f9a1 	bl	1a0036a8 <dacWrite>


    ipart = (int) x;
1a000366:	eefd 7ae8 	vcvt.s32.f32	s15, s17
1a00036a:	ee17 1a90 	vmov	r1, s15
    i=0;
1a00036e:	2200      	movs	r2, #0
    while (ipart>0)
1a000370:	e01b      	b.n	1a0003aa <tareaA+0xaa>
case 2:	show=y;			break;
1a000372:	eefd 7ac9 	vcvt.s32.f32	s15, s18
1a000376:	edcd 7a01 	vstr	s15, [sp, #4]
1a00037a:	e7e7      	b.n	1a00034c <tareaA+0x4c>
case 3:	show=z;			break;
1a00037c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
1a000380:	edcd 7a01 	vstr	s15, [sp, #4]
1a000384:	e7e2      	b.n	1a00034c <tareaA+0x4c>
      {
    erre[i++] =(ipart%10) + '0';
1a000386:	48b0      	ldr	r0, [pc, #704]	; (1a000648 <tareaA+0x348>)
1a000388:	fb80 3001 	smull	r3, r0, r0, r1
1a00038c:	17cb      	asrs	r3, r1, #31
1a00038e:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
1a000392:	461d      	mov	r5, r3
1a000394:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000398:	0058      	lsls	r0, r3, #1
1a00039a:	1a0b      	subs	r3, r1, r0
1a00039c:	3330      	adds	r3, #48	; 0x30
1a00039e:	a904      	add	r1, sp, #16
1a0003a0:	4411      	add	r1, r2
1a0003a2:	f801 3c08 	strb.w	r3, [r1, #-8]
   	ipart = ipart/10;
1a0003a6:	4629      	mov	r1, r5
    erre[i++] =(ipart%10) + '0';
1a0003a8:	3201      	adds	r2, #1
    while (ipart>0)
1a0003aa:	2900      	cmp	r1, #0
1a0003ac:	dceb      	bgt.n	1a000386 <tareaA+0x86>
1a0003ae:	e005      	b.n	1a0003bc <tareaA+0xbc>
     }

    while (i < d) {
    	erre[i++] = '0';}
1a0003b0:	ab04      	add	r3, sp, #16
1a0003b2:	4413      	add	r3, r2
1a0003b4:	2130      	movs	r1, #48	; 0x30
1a0003b6:	f803 1c08 	strb.w	r1, [r3, #-8]
1a0003ba:	3201      	adds	r2, #1
    while (i < d) {
1a0003bc:	2a05      	cmp	r2, #5
1a0003be:	ddf7      	ble.n	1a0003b0 <tareaA+0xb0>

    len=sizeof(erre);
    i=0;
    j=len-1;
1a0003c0:	2205      	movs	r2, #5
    i=0;
1a0003c2:	2300      	movs	r3, #0
1a0003c4:	e00c      	b.n	1a0003e0 <tareaA+0xe0>

    while (i<j)
    {
    	temp = erre[i];
1a0003c6:	a904      	add	r1, sp, #16
1a0003c8:	18c8      	adds	r0, r1, r3
1a0003ca:	f810 5c08 	ldrb.w	r5, [r0, #-8]
    	erre[i] = erre[j];
1a0003ce:	4411      	add	r1, r2
1a0003d0:	f811 6c08 	ldrb.w	r6, [r1, #-8]
1a0003d4:	f800 6c08 	strb.w	r6, [r0, #-8]
    	erre[j] = temp;
1a0003d8:	f801 5c08 	strb.w	r5, [r1, #-8]
    	i++; j--;
1a0003dc:	3301      	adds	r3, #1
1a0003de:	3a01      	subs	r2, #1
    while (i<j)
1a0003e0:	4293      	cmp	r3, r2
1a0003e2:	dbf0      	blt.n	1a0003c6 <tareaA+0xc6>
    }



    uartWriteString( UART_USB, "Giroscopo\r\n");
1a0003e4:	4999      	ldr	r1, [pc, #612]	; (1a00064c <tareaA+0x34c>)
1a0003e6:	2003      	movs	r0, #3
1a0003e8:	f003 fbc9 	bl	1a003b7e <uartWriteString>

    uartWriteString( UART_USB, "uT*10 X:  ");
1a0003ec:	4998      	ldr	r1, [pc, #608]	; (1a000650 <tareaA+0x350>)
1a0003ee:	2003      	movs	r0, #3
1a0003f0:	f003 fbc5 	bl	1a003b7e <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a0003f4:	4e97      	ldr	r6, [pc, #604]	; (1a000654 <tareaA+0x354>)
1a0003f6:	4631      	mov	r1, r6
1a0003f8:	2003      	movs	r0, #3
1a0003fa:	f003 fbc0 	bl	1a003b7e <uartWriteString>
	erre[d]=0;
1a0003fe:	2500      	movs	r5, #0
1a000400:	f88d 500e 	strb.w	r5, [sp, #14]
	uartWriteString( UART_USB, erre );
1a000404:	a902      	add	r1, sp, #8
1a000406:	2003      	movs	r0, #3
1a000408:	f003 fbb9 	bl	1a003b7e <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a00040c:	4631      	mov	r1, r6
1a00040e:	2003      	movs	r0, #3
1a000410:	f003 fbb5 	bl	1a003b7e <uartWriteString>

//
    ipart = (int)y;
1a000414:	eefd 7ac9 	vcvt.s32.f32	s15, s18
1a000418:	ee17 1a90 	vmov	r1, s15
    i=0;
1a00041c:	462a      	mov	r2, r5
    while (ipart>0)
1a00041e:	e011      	b.n	1a000444 <tareaA+0x144>
      {
    erre[i++] =(ipart%10) + '0';
1a000420:	4889      	ldr	r0, [pc, #548]	; (1a000648 <tareaA+0x348>)
1a000422:	fb80 3001 	smull	r3, r0, r0, r1
1a000426:	17cb      	asrs	r3, r1, #31
1a000428:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
1a00042c:	461d      	mov	r5, r3
1a00042e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000432:	0058      	lsls	r0, r3, #1
1a000434:	1a0b      	subs	r3, r1, r0
1a000436:	3330      	adds	r3, #48	; 0x30
1a000438:	a904      	add	r1, sp, #16
1a00043a:	4411      	add	r1, r2
1a00043c:	f801 3c08 	strb.w	r3, [r1, #-8]
   	ipart = ipart/10;
1a000440:	4629      	mov	r1, r5
    erre[i++] =(ipart%10) + '0';
1a000442:	3201      	adds	r2, #1
    while (ipart>0)
1a000444:	2900      	cmp	r1, #0
1a000446:	dceb      	bgt.n	1a000420 <tareaA+0x120>
1a000448:	e005      	b.n	1a000456 <tareaA+0x156>
     }

    while (i < d) {
    	erre[i++] = '0';}
1a00044a:	ab04      	add	r3, sp, #16
1a00044c:	4413      	add	r3, r2
1a00044e:	2130      	movs	r1, #48	; 0x30
1a000450:	f803 1c08 	strb.w	r1, [r3, #-8]
1a000454:	3201      	adds	r2, #1
    while (i < d) {
1a000456:	2a05      	cmp	r2, #5
1a000458:	ddf7      	ble.n	1a00044a <tareaA+0x14a>

    len=sizeof(erre);
    i=0;
    j=len-1;
1a00045a:	2205      	movs	r2, #5
    i=0;
1a00045c:	2300      	movs	r3, #0
1a00045e:	e00c      	b.n	1a00047a <tareaA+0x17a>

    while (i<j)
    {
    	temp = erre[i];
1a000460:	a904      	add	r1, sp, #16
1a000462:	18c8      	adds	r0, r1, r3
1a000464:	f810 5c08 	ldrb.w	r5, [r0, #-8]
    	erre[i] = erre[j];
1a000468:	4411      	add	r1, r2
1a00046a:	f811 6c08 	ldrb.w	r6, [r1, #-8]
1a00046e:	f800 6c08 	strb.w	r6, [r0, #-8]
    	erre[j] = temp;
1a000472:	f801 5c08 	strb.w	r5, [r1, #-8]
    	i++; j--;
1a000476:	3301      	adds	r3, #1
1a000478:	3a01      	subs	r2, #1
    while (i<j)
1a00047a:	4293      	cmp	r3, r2
1a00047c:	dbf0      	blt.n	1a000460 <tareaA+0x160>
    }

//
    uartWriteString( UART_USB, "uT*10 Y:  ");
1a00047e:	4976      	ldr	r1, [pc, #472]	; (1a000658 <tareaA+0x358>)
1a000480:	2003      	movs	r0, #3
1a000482:	f003 fb7c 	bl	1a003b7e <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a000486:	4e73      	ldr	r6, [pc, #460]	; (1a000654 <tareaA+0x354>)
1a000488:	4631      	mov	r1, r6
1a00048a:	2003      	movs	r0, #3
1a00048c:	f003 fb77 	bl	1a003b7e <uartWriteString>
	erre[d]=0;
1a000490:	2500      	movs	r5, #0
1a000492:	f88d 500e 	strb.w	r5, [sp, #14]
	uartWriteString( UART_USB, erre );
1a000496:	a902      	add	r1, sp, #8
1a000498:	2003      	movs	r0, #3
1a00049a:	f003 fb70 	bl	1a003b7e <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a00049e:	4631      	mov	r1, r6
1a0004a0:	2003      	movs	r0, #3
1a0004a2:	f003 fb6c 	bl	1a003b7e <uartWriteString>
//
    ipart = (int)z;
1a0004a6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
1a0004aa:	ee17 1a90 	vmov	r1, s15
    i=0;
1a0004ae:	462a      	mov	r2, r5
    while (ipart>0)
1a0004b0:	e011      	b.n	1a0004d6 <tareaA+0x1d6>
      {

    erre[i++] =(ipart%10) + '0';
1a0004b2:	4865      	ldr	r0, [pc, #404]	; (1a000648 <tareaA+0x348>)
1a0004b4:	fb80 3001 	smull	r3, r0, r0, r1
1a0004b8:	17cb      	asrs	r3, r1, #31
1a0004ba:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
1a0004be:	461d      	mov	r5, r3
1a0004c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0004c4:	0058      	lsls	r0, r3, #1
1a0004c6:	1a0b      	subs	r3, r1, r0
1a0004c8:	3330      	adds	r3, #48	; 0x30
1a0004ca:	a904      	add	r1, sp, #16
1a0004cc:	4411      	add	r1, r2
1a0004ce:	f801 3c08 	strb.w	r3, [r1, #-8]
   	ipart = ipart/10;
1a0004d2:	4629      	mov	r1, r5
    erre[i++] =(ipart%10) + '0';
1a0004d4:	3201      	adds	r2, #1
    while (ipart>0)
1a0004d6:	2900      	cmp	r1, #0
1a0004d8:	dceb      	bgt.n	1a0004b2 <tareaA+0x1b2>
1a0004da:	e005      	b.n	1a0004e8 <tareaA+0x1e8>
     }

    while (i < d) {
    	erre[i++] = '0';}
1a0004dc:	ab04      	add	r3, sp, #16
1a0004de:	4413      	add	r3, r2
1a0004e0:	2130      	movs	r1, #48	; 0x30
1a0004e2:	f803 1c08 	strb.w	r1, [r3, #-8]
1a0004e6:	3201      	adds	r2, #1
    while (i < d) {
1a0004e8:	2a05      	cmp	r2, #5
1a0004ea:	ddf7      	ble.n	1a0004dc <tareaA+0x1dc>

    len=sizeof(erre);
    i=0;
    j=len-1;
1a0004ec:	2205      	movs	r2, #5
    i=0;
1a0004ee:	2300      	movs	r3, #0
1a0004f0:	e00c      	b.n	1a00050c <tareaA+0x20c>

    while (i<j)
    {
    	temp = erre[i];
1a0004f2:	a904      	add	r1, sp, #16
1a0004f4:	18c8      	adds	r0, r1, r3
1a0004f6:	f810 5c08 	ldrb.w	r5, [r0, #-8]
    	erre[i] = erre[j];
1a0004fa:	4411      	add	r1, r2
1a0004fc:	f811 6c08 	ldrb.w	r6, [r1, #-8]
1a000500:	f800 6c08 	strb.w	r6, [r0, #-8]
    	erre[j] = temp;
1a000504:	f801 5c08 	strb.w	r5, [r1, #-8]
    	i++; j--;
1a000508:	3301      	adds	r3, #1
1a00050a:	3a01      	subs	r2, #1
    while (i<j)
1a00050c:	4293      	cmp	r3, r2
1a00050e:	dbf0      	blt.n	1a0004f2 <tareaA+0x1f2>
    }
//
    uartWriteString( UART_USB, "uT*10 Z:  ");
1a000510:	4952      	ldr	r1, [pc, #328]	; (1a00065c <tareaA+0x35c>)
1a000512:	2003      	movs	r0, #3
1a000514:	f003 fb33 	bl	1a003b7e <uartWriteString>
    uartWriteString( UART_USB, "\r\n" );
1a000518:	494e      	ldr	r1, [pc, #312]	; (1a000654 <tareaA+0x354>)
1a00051a:	2003      	movs	r0, #3
1a00051c:	f003 fb2f 	bl	1a003b7e <uartWriteString>
	erre[d]=0;
1a000520:	2500      	movs	r5, #0
1a000522:	f88d 500e 	strb.w	r5, [sp, #14]
  	uartWriteString( UART_USB, erre );
1a000526:	a902      	add	r1, sp, #8
1a000528:	2003      	movs	r0, #3
1a00052a:	f003 fb28 	bl	1a003b7e <uartWriteString>
   	uartWriteString( UART_USB, "\r\n\r\n" );
1a00052e:	494c      	ldr	r1, [pc, #304]	; (1a000660 <tareaA+0x360>)
1a000530:	2003      	movs	r0, #3
1a000532:	f003 fb24 	bl	1a003b7e <uartWriteString>

//
    ipart = show;
1a000536:	9901      	ldr	r1, [sp, #4]
    i=0;
1a000538:	462a      	mov	r2, r5
    while (ipart>0)
1a00053a:	e011      	b.n	1a000560 <tareaA+0x260>
      {

    erre[i++] =(ipart%10) + '0';
1a00053c:	4842      	ldr	r0, [pc, #264]	; (1a000648 <tareaA+0x348>)
1a00053e:	fb80 3001 	smull	r3, r0, r0, r1
1a000542:	17cb      	asrs	r3, r1, #31
1a000544:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
1a000548:	461d      	mov	r5, r3
1a00054a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00054e:	0058      	lsls	r0, r3, #1
1a000550:	1a0b      	subs	r3, r1, r0
1a000552:	3330      	adds	r3, #48	; 0x30
1a000554:	a904      	add	r1, sp, #16
1a000556:	4411      	add	r1, r2
1a000558:	f801 3c08 	strb.w	r3, [r1, #-8]
   	ipart = ipart/10;
1a00055c:	4629      	mov	r1, r5
    erre[i++] =(ipart%10) + '0';
1a00055e:	3201      	adds	r2, #1
    while (ipart>0)
1a000560:	2900      	cmp	r1, #0
1a000562:	dceb      	bgt.n	1a00053c <tareaA+0x23c>
1a000564:	e005      	b.n	1a000572 <tareaA+0x272>
     }

    while (i < d) {
    	erre[i++] = '0';}
1a000566:	ab04      	add	r3, sp, #16
1a000568:	4413      	add	r3, r2
1a00056a:	2130      	movs	r1, #48	; 0x30
1a00056c:	f803 1c08 	strb.w	r1, [r3, #-8]
1a000570:	3201      	adds	r2, #1
    while (i < d) {
1a000572:	2a05      	cmp	r2, #5
1a000574:	ddf7      	ble.n	1a000566 <tareaA+0x266>

    len=sizeof(erre);
    i=0;
    j=len-1;
1a000576:	2205      	movs	r2, #5
    i=0;
1a000578:	2300      	movs	r3, #0
1a00057a:	e00c      	b.n	1a000596 <tareaA+0x296>

    while (i<j)
    {
    	temp = erre[i];
1a00057c:	a904      	add	r1, sp, #16
1a00057e:	18c8      	adds	r0, r1, r3
1a000580:	f810 5c08 	ldrb.w	r5, [r0, #-8]
    	erre[i] = erre[j];
1a000584:	4411      	add	r1, r2
1a000586:	f811 6c08 	ldrb.w	r6, [r1, #-8]
1a00058a:	f800 6c08 	strb.w	r6, [r0, #-8]
    	erre[j] = temp;
1a00058e:	f801 5c08 	strb.w	r5, [r1, #-8]
    	i++; j--;
1a000592:	3301      	adds	r3, #1
1a000594:	3a01      	subs	r2, #1
    while (i<j)
1a000596:	4293      	cmp	r3, r2
1a000598:	dbf0      	blt.n	1a00057c <tareaA+0x27c>
    }

//

   	uartWriteString( UART_USB, "Mostrando:  ");
1a00059a:	4932      	ldr	r1, [pc, #200]	; (1a000664 <tareaA+0x364>)
1a00059c:	2003      	movs	r0, #3
1a00059e:	f003 faee 	bl	1a003b7e <uartWriteString>
   	uartWriteString( UART_USB, "\r\n" );
1a0005a2:	492c      	ldr	r1, [pc, #176]	; (1a000654 <tareaA+0x354>)
1a0005a4:	2003      	movs	r0, #3
1a0005a6:	f003 faea 	bl	1a003b7e <uartWriteString>
   	erre[d]=0;
1a0005aa:	2300      	movs	r3, #0
1a0005ac:	f88d 300e 	strb.w	r3, [sp, #14]
   	uartWriteString( UART_USB, erre );
1a0005b0:	a902      	add	r1, sp, #8
1a0005b2:	2003      	movs	r0, #3
1a0005b4:	f003 fae3 	bl	1a003b7e <uartWriteString>
   	uartWriteString( UART_USB, "\r\n\r\n" );
1a0005b8:	4929      	ldr	r1, [pc, #164]	; (1a000660 <tareaA+0x360>)
1a0005ba:	2003      	movs	r0, #3
1a0005bc:	f003 fadf 	bl	1a003b7e <uartWriteString>



   	vTaskDelayUntil(&xLastWakeTime, nett);
1a0005c0:	21c8      	movs	r1, #200	; 0xc8
1a0005c2:	4668      	mov	r0, sp
1a0005c4:	f002 f958 	bl	1a002878 <vTaskDelayUntil>
		portTickType xLastWakeTime = xTaskGetTickCount();
1a0005c8:	f002 f84a 	bl	1a002660 <xTaskGetTickCount>
1a0005cc:	9000      	str	r0, [sp, #0]
	Ampu9250Read();
1a0005ce:	f000 fca1 	bl	1a000f14 <Ampu9250Read>
	x=Ampu9250GetMagX_uT()*10;
1a0005d2:	f000 fff7 	bl	1a0015c4 <Ampu9250GetMagX_uT>
1a0005d6:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
1a0005da:	ee60 8a08 	vmul.f32	s17, s0, s16
    y=Ampu9250GetMagY_uT()*10;
1a0005de:	f000 fff7 	bl	1a0015d0 <Ampu9250GetMagY_uT>
1a0005e2:	ee20 9a08 	vmul.f32	s18, s0, s16
    z=Ampu9250GetMagZ_uT()*10;
1a0005e6:	f000 fff9 	bl	1a0015dc <Ampu9250GetMagZ_uT>
1a0005ea:	ee20 8a08 	vmul.f32	s16, s0, s16
    x=x+250+11;
1a0005ee:	eddf 7a1e 	vldr	s15, [pc, #120]	; 1a000668 <tareaA+0x368>
1a0005f2:	ee78 8aa7 	vadd.f32	s17, s17, s15
1a0005f6:	eef2 7a06 	vmov.f32	s15, #38	; 0x41300000  11.0
1a0005fa:	ee78 8aa7 	vadd.f32	s17, s17, s15
    y=y-490;
1a0005fe:	eddf 7a1b 	vldr	s15, [pc, #108]	; 1a00066c <tareaA+0x36c>
1a000602:	ee39 9a67 	vsub.f32	s18, s18, s15
    z=z+211;
1a000606:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 1a000670 <tareaA+0x370>
1a00060a:	ee38 8a00 	vadd.f32	s16, s16, s0
    	if(xSemaphoreTake( xSemaphoreD1, 1/portTICK_RATE_MS) == pdTRUE){
1a00060e:	2101      	movs	r1, #1
1a000610:	4b18      	ldr	r3, [pc, #96]	; (1a000674 <tareaA+0x374>)
1a000612:	6818      	ldr	r0, [r3, #0]
1a000614:	f001 fbc0 	bl	1a001d98 <xQueueSemaphoreTake>
1a000618:	2801      	cmp	r0, #1
1a00061a:	f43f ae90 	beq.w	1a00033e <tareaA+0x3e>
switch (a){
1a00061e:	2c02      	cmp	r4, #2
1a000620:	f43f aea7 	beq.w	1a000372 <tareaA+0x72>
1a000624:	2c03      	cmp	r4, #3
1a000626:	f43f aea9 	beq.w	1a00037c <tareaA+0x7c>
1a00062a:	2c01      	cmp	r4, #1
1a00062c:	f43f ae8a 	beq.w	1a000344 <tareaA+0x44>
default:show=x,a=1;		break;
1a000630:	eefd 7ae8 	vcvt.s32.f32	s15, s17
1a000634:	edcd 7a01 	vstr	s15, [sp, #4]
1a000638:	2401      	movs	r4, #1
1a00063a:	e687      	b.n	1a00034c <tareaA+0x4c>
1a00063c:	10002cbc 	.word	0x10002cbc
1a000640:	1a0057e0 	.word	0x1a0057e0
1a000644:	1a0057f4 	.word	0x1a0057f4
1a000648:	66666667 	.word	0x66666667
1a00064c:	1a005808 	.word	0x1a005808
1a000650:	1a005814 	.word	0x1a005814
1a000654:	1a005820 	.word	0x1a005820
1a000658:	1a005824 	.word	0x1a005824
1a00065c:	1a005830 	.word	0x1a005830
1a000660:	1a00583c 	.word	0x1a00583c
1a000664:	1a005844 	.word	0x1a005844
1a000668:	437a0000 	.word	0x437a0000
1a00066c:	43f50000 	.word	0x43f50000
1a000670:	43530000 	.word	0x43530000
1a000674:	100000d0 	.word	0x100000d0

1a000678 <tareaB>:
	}
}

//
void tareaB( void* taskParmPtr )
{
1a000678:	b510      	push	{r4, lr}
1a00067a:	b082      	sub	sp, #8
   // ---------- CONFIGURACIONES ------------------------------
	Buffer=xQueueCreate( 3, sizeof( portTickType ) );
1a00067c:	2200      	movs	r2, #0
1a00067e:	2104      	movs	r1, #4
1a000680:	2003      	movs	r0, #3
1a000682:	f001 f938 	bl	1a0018f6 <xQueueGenericCreate>
1a000686:	4b20      	ldr	r3, [pc, #128]	; (1a000708 <tareaB+0x90>)
1a000688:	6018      	str	r0, [r3, #0]
	portTickType LastFlankF=0/portTICK_RATE_MS;
	portTickType FlankF = xTaskGetTickCount();
1a00068a:	f001 ffe9 	bl	1a002660 <xTaskGetTickCount>
1a00068e:	9001      	str	r0, [sp, #4]
	portTickType LastFlankF=0/portTICK_RATE_MS;
1a000690:	2400      	movs	r4, #0
1a000692:	e019      	b.n	1a0006c8 <tareaB+0x50>

				portTickType now = 39 / portTICK_RATE_MS;
		 		portTickType xLastWakeTime = xTaskGetTickCount();

	 		if ( xSemaphoreTake( xSemaphoreTEC1F, portMAX_DELAY) == pdTRUE) {	//Manejo de Flanco Bajada
	 								FlankF=xTaskGetTickCount();
1a000694:	f001 ffe4 	bl	1a002660 <xTaskGetTickCount>
1a000698:	9001      	str	r0, [sp, #4]
	 								gpioWrite(LEDR,0);
1a00069a:	2100      	movs	r1, #0
1a00069c:	2028      	movs	r0, #40	; 0x28
1a00069e:	f003 f941 	bl	1a003924 <gpioWrite>
	 								if((FlankF-LastFlankF)>(40/portTICK_RATE_MS))	//40 milisegundos del anterior Flanco
1a0006a2:	9b01      	ldr	r3, [sp, #4]
1a0006a4:	1b1b      	subs	r3, r3, r4
1a0006a6:	2b28      	cmp	r3, #40	; 0x28
1a0006a8:	d801      	bhi.n	1a0006ae <tareaB+0x36>
	 								{	xQueueSend(Buffer, ( void * ) &FlankF, portMAX_DELAY);
	 									//gpioWrite(LEDR,1);
	 								}
	 			 					//vTaskDelay(5/ portTICK_RATE_MS  );
	 			 					LastFlankF=FlankF;
1a0006aa:	9c01      	ldr	r4, [sp, #4]
1a0006ac:	e017      	b.n	1a0006de <tareaB+0x66>
	 								{	xQueueSend(Buffer, ( void * ) &FlankF, portMAX_DELAY);
1a0006ae:	2300      	movs	r3, #0
1a0006b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0006b4:	a901      	add	r1, sp, #4
1a0006b6:	4814      	ldr	r0, [pc, #80]	; (1a000708 <tareaB+0x90>)
1a0006b8:	6800      	ldr	r0, [r0, #0]
1a0006ba:	f001 f943 	bl	1a001944 <xQueueGenericSend>
1a0006be:	e7f4      	b.n	1a0006aa <tareaB+0x32>
	 		xLastWakeTime = xTaskGetTickCount();

	 		if ( xSemaphoreTake( xSemaphoreTEC1R, portMAX_DELAY) == pdTRUE) {	//Manejo de Flanco de Subida
	 							gpioWrite(LEDR,0);
	 						}
	 		vTaskDelayUntil(&xLastWakeTime, now);
1a0006c0:	2127      	movs	r1, #39	; 0x27
1a0006c2:	4668      	mov	r0, sp
1a0006c4:	f002 f8d8 	bl	1a002878 <vTaskDelayUntil>
		 		portTickType xLastWakeTime = xTaskGetTickCount();
1a0006c8:	f001 ffca 	bl	1a002660 <xTaskGetTickCount>
1a0006cc:	9000      	str	r0, [sp, #0]
	 		if ( xSemaphoreTake( xSemaphoreTEC1F, portMAX_DELAY) == pdTRUE) {	//Manejo de Flanco Bajada
1a0006ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0006d2:	4b0e      	ldr	r3, [pc, #56]	; (1a00070c <tareaB+0x94>)
1a0006d4:	6818      	ldr	r0, [r3, #0]
1a0006d6:	f001 fb5f 	bl	1a001d98 <xQueueSemaphoreTake>
1a0006da:	2801      	cmp	r0, #1
1a0006dc:	d0da      	beq.n	1a000694 <tareaB+0x1c>
	 		vTaskDelayUntil(&xLastWakeTime, now);
1a0006de:	2127      	movs	r1, #39	; 0x27
1a0006e0:	4668      	mov	r0, sp
1a0006e2:	f002 f8c9 	bl	1a002878 <vTaskDelayUntil>
	 		xLastWakeTime = xTaskGetTickCount();
1a0006e6:	f001 ffbb 	bl	1a002660 <xTaskGetTickCount>
1a0006ea:	9000      	str	r0, [sp, #0]
	 		if ( xSemaphoreTake( xSemaphoreTEC1R, portMAX_DELAY) == pdTRUE) {	//Manejo de Flanco de Subida
1a0006ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0006f0:	4b07      	ldr	r3, [pc, #28]	; (1a000710 <tareaB+0x98>)
1a0006f2:	6818      	ldr	r0, [r3, #0]
1a0006f4:	f001 fb50 	bl	1a001d98 <xQueueSemaphoreTake>
1a0006f8:	2801      	cmp	r0, #1
1a0006fa:	d1e1      	bne.n	1a0006c0 <tareaB+0x48>
	 							gpioWrite(LEDR,0);
1a0006fc:	2100      	movs	r1, #0
1a0006fe:	2028      	movs	r0, #40	; 0x28
1a000700:	f003 f910 	bl	1a003924 <gpioWrite>
1a000704:	e7dc      	b.n	1a0006c0 <tareaB+0x48>
1a000706:	bf00      	nop
1a000708:	10002cc0 	.word	0x10002cc0
1a00070c:	100000d4 	.word	0x100000d4
1a000710:	100000d8 	.word	0x100000d8

1a000714 <Debounce>:
//				|	|_|   |_	|  _|
//	____________|	 			|_|
//

void Debounce(void * taskParmPtr)	//Task creada para hacer antirrebote
{	uint8_t a=0;
1a000714:	b510      	push	{r4, lr}
1a000716:	b082      	sub	sp, #8
	portTickType Rec=100;
1a000718:	2364      	movs	r3, #100	; 0x64
1a00071a:	9301      	str	r3, [sp, #4]
{	uint8_t a=0;
1a00071c:	2400      	movs	r4, #0


	while (1) {

		if(Buffer != 0 ){
1a00071e:	4b0f      	ldr	r3, [pc, #60]	; (1a00075c <Debounce+0x48>)
1a000720:	6818      	ldr	r0, [r3, #0]
1a000722:	2800      	cmp	r0, #0
1a000724:	d0fb      	beq.n	1a00071e <Debounce+0xa>
			if (xQueueReceive(Buffer, &Rec, 10/portTICK_RATE_MS)){
1a000726:	220a      	movs	r2, #10
1a000728:	a901      	add	r1, sp, #4
1a00072a:	f001 fa89 	bl	1a001c40 <xQueueReceive>
1a00072e:	b100      	cbz	r0, 1a000732 <Debounce+0x1e>
				a=1;
1a000730:	2401      	movs	r4, #1
				}
			if((xTaskGetTickCount()-Rec)<(40/portTICK_RATE_MS)){
1a000732:	f001 ff95 	bl	1a002660 <xTaskGetTickCount>
1a000736:	9b01      	ldr	r3, [sp, #4]
1a000738:	1ac0      	subs	r0, r0, r3
1a00073a:	2827      	cmp	r0, #39	; 0x27
1a00073c:	d9ef      	bls.n	1a00071e <Debounce+0xa>
				//gpioWrite(LEDG,0);
				//gpioWrite(LEDR,1);
				}
			else{
				if(a){
1a00073e:	2c00      	cmp	r4, #0
1a000740:	d0ed      	beq.n	1a00071e <Debounce+0xa>
				gpioWrite(LEDR,1);
1a000742:	2101      	movs	r1, #1
1a000744:	2028      	movs	r0, #40	; 0x28
1a000746:	f003 f8ed 	bl	1a003924 <gpioWrite>
				xSemaphoreGive( xSemaphoreD1 );
1a00074a:	2300      	movs	r3, #0
1a00074c:	461a      	mov	r2, r3
1a00074e:	4619      	mov	r1, r3
1a000750:	4803      	ldr	r0, [pc, #12]	; (1a000760 <Debounce+0x4c>)
1a000752:	6800      	ldr	r0, [r0, #0]
1a000754:	f001 f8f6 	bl	1a001944 <xQueueGenericSend>
				//gpioWrite(LEDR,0);
				a=0;}
1a000758:	2400      	movs	r4, #0
1a00075a:	e7e0      	b.n	1a00071e <Debounce+0xa>
1a00075c:	10002cc0 	.word	0x10002cc0
1a000760:	100000d0 	.word	0x100000d0

1a000764 <tareaD>:
	};
}

//
//
void tareaD( void* taskParmPtr ){
1a000764:	b500      	push	{lr}
1a000766:	b083      	sub	sp, #12
	int a=0;
1a000768:	2300      	movs	r3, #0
1a00076a:	9301      	str	r3, [sp, #4]
1a00076c:	e00e      	b.n	1a00078c <tareaD+0x28>
				if (xQueueReceive(Seleccion, &a, portMAX_DELAY)){


					///
					if (a==600){
						a=0;
1a00076e:	2300      	movs	r3, #0
1a000770:	9301      	str	r3, [sp, #4]
1a000772:	e01a      	b.n	1a0007aa <tareaD+0x46>
					}

					if(a<60){
						gpioWrite(LED1,0);
1a000774:	2100      	movs	r1, #0
1a000776:	202b      	movs	r0, #43	; 0x2b
1a000778:	f003 f8d4 	bl	1a003924 <gpioWrite>
						gpioWrite(LED2,0);
1a00077c:	2100      	movs	r1, #0
1a00077e:	202c      	movs	r0, #44	; 0x2c
1a000780:	f003 f8d0 	bl	1a003924 <gpioWrite>
						gpioWrite(LED3,0);
1a000784:	2100      	movs	r1, #0
1a000786:	202d      	movs	r0, #45	; 0x2d
1a000788:	f003 f8cc 	bl	1a003924 <gpioWrite>
		if(Seleccion != 0 ){
1a00078c:	4b3f      	ldr	r3, [pc, #252]	; (1a00088c <tareaD+0x128>)
1a00078e:	6818      	ldr	r0, [r3, #0]
1a000790:	2800      	cmp	r0, #0
1a000792:	d0fb      	beq.n	1a00078c <tareaD+0x28>
				if (xQueueReceive(Seleccion, &a, portMAX_DELAY)){
1a000794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000798:	a901      	add	r1, sp, #4
1a00079a:	f001 fa51 	bl	1a001c40 <xQueueReceive>
1a00079e:	2800      	cmp	r0, #0
1a0007a0:	d0f4      	beq.n	1a00078c <tareaD+0x28>
					if (a==600){
1a0007a2:	9b01      	ldr	r3, [sp, #4]
1a0007a4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
1a0007a8:	d0e1      	beq.n	1a00076e <tareaD+0xa>
					if(a<60){
1a0007aa:	9b01      	ldr	r3, [sp, #4]
1a0007ac:	2b3b      	cmp	r3, #59	; 0x3b
1a0007ae:	dde1      	ble.n	1a000774 <tareaD+0x10>
					}
					else if(a<120){
1a0007b0:	2b77      	cmp	r3, #119	; 0x77
1a0007b2:	dd1c      	ble.n	1a0007ee <tareaD+0x8a>
						gpioWrite(LED1,1);
						gpioWrite(LED2,0);
						gpioWrite(LED3,0);
					}
					else if(a<180){
1a0007b4:	2bb3      	cmp	r3, #179	; 0xb3
1a0007b6:	dd27      	ble.n	1a000808 <tareaD+0xa4>
					gpioWrite(LED1,0);
					gpioWrite(LED2,1);
					gpioWrite(LED3,0);
					}
					//
					else if(a<240){
1a0007b8:	2bef      	cmp	r3, #239	; 0xef
1a0007ba:	dd32      	ble.n	1a000822 <tareaD+0xbe>
					gpioWrite(LED1,1);
					gpioWrite(LED2,1);
					gpioWrite(LED3,0);
					}
					else if(a<300){
1a0007bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
1a0007c0:	db3c      	blt.n	1a00083c <tareaD+0xd8>
					gpioWrite(LED1,0);
					gpioWrite(LED2,0);
					gpioWrite(LED3,1);
					}
					else if(a<360){
1a0007c2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
1a0007c6:	db46      	blt.n	1a000856 <tareaD+0xf2>
					gpioWrite(LED1,1);
					gpioWrite(LED2,0);
					gpioWrite(LED3,1);
					}
					else if(a<420){
1a0007c8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
1a0007cc:	db50      	blt.n	1a000870 <tareaD+0x10c>
					gpioWrite(LED1,0);
					gpioWrite(LED2,1);
					gpioWrite(LED3,1);
					}
					else if(a<880){
1a0007ce:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
1a0007d2:	dadb      	bge.n	1a00078c <tareaD+0x28>
					gpioWrite(LED1,1);
1a0007d4:	2101      	movs	r1, #1
1a0007d6:	202b      	movs	r0, #43	; 0x2b
1a0007d8:	f003 f8a4 	bl	1a003924 <gpioWrite>
					gpioWrite(LED2,1);
1a0007dc:	2101      	movs	r1, #1
1a0007de:	202c      	movs	r0, #44	; 0x2c
1a0007e0:	f003 f8a0 	bl	1a003924 <gpioWrite>
					gpioWrite(LED3,1);
1a0007e4:	2101      	movs	r1, #1
1a0007e6:	202d      	movs	r0, #45	; 0x2d
1a0007e8:	f003 f89c 	bl	1a003924 <gpioWrite>
1a0007ec:	e7ce      	b.n	1a00078c <tareaD+0x28>
						gpioWrite(LED1,1);
1a0007ee:	2101      	movs	r1, #1
1a0007f0:	202b      	movs	r0, #43	; 0x2b
1a0007f2:	f003 f897 	bl	1a003924 <gpioWrite>
						gpioWrite(LED2,0);
1a0007f6:	2100      	movs	r1, #0
1a0007f8:	202c      	movs	r0, #44	; 0x2c
1a0007fa:	f003 f893 	bl	1a003924 <gpioWrite>
						gpioWrite(LED3,0);
1a0007fe:	2100      	movs	r1, #0
1a000800:	202d      	movs	r0, #45	; 0x2d
1a000802:	f003 f88f 	bl	1a003924 <gpioWrite>
1a000806:	e7c1      	b.n	1a00078c <tareaD+0x28>
					gpioWrite(LED1,0);
1a000808:	2100      	movs	r1, #0
1a00080a:	202b      	movs	r0, #43	; 0x2b
1a00080c:	f003 f88a 	bl	1a003924 <gpioWrite>
					gpioWrite(LED2,1);
1a000810:	2101      	movs	r1, #1
1a000812:	202c      	movs	r0, #44	; 0x2c
1a000814:	f003 f886 	bl	1a003924 <gpioWrite>
					gpioWrite(LED3,0);
1a000818:	2100      	movs	r1, #0
1a00081a:	202d      	movs	r0, #45	; 0x2d
1a00081c:	f003 f882 	bl	1a003924 <gpioWrite>
1a000820:	e7b4      	b.n	1a00078c <tareaD+0x28>
					gpioWrite(LED1,1);
1a000822:	2101      	movs	r1, #1
1a000824:	202b      	movs	r0, #43	; 0x2b
1a000826:	f003 f87d 	bl	1a003924 <gpioWrite>
					gpioWrite(LED2,1);
1a00082a:	2101      	movs	r1, #1
1a00082c:	202c      	movs	r0, #44	; 0x2c
1a00082e:	f003 f879 	bl	1a003924 <gpioWrite>
					gpioWrite(LED3,0);
1a000832:	2100      	movs	r1, #0
1a000834:	202d      	movs	r0, #45	; 0x2d
1a000836:	f003 f875 	bl	1a003924 <gpioWrite>
1a00083a:	e7a7      	b.n	1a00078c <tareaD+0x28>
					gpioWrite(LED1,0);
1a00083c:	2100      	movs	r1, #0
1a00083e:	202b      	movs	r0, #43	; 0x2b
1a000840:	f003 f870 	bl	1a003924 <gpioWrite>
					gpioWrite(LED2,0);
1a000844:	2100      	movs	r1, #0
1a000846:	202c      	movs	r0, #44	; 0x2c
1a000848:	f003 f86c 	bl	1a003924 <gpioWrite>
					gpioWrite(LED3,1);
1a00084c:	2101      	movs	r1, #1
1a00084e:	202d      	movs	r0, #45	; 0x2d
1a000850:	f003 f868 	bl	1a003924 <gpioWrite>
1a000854:	e79a      	b.n	1a00078c <tareaD+0x28>
					gpioWrite(LED1,1);
1a000856:	2101      	movs	r1, #1
1a000858:	202b      	movs	r0, #43	; 0x2b
1a00085a:	f003 f863 	bl	1a003924 <gpioWrite>
					gpioWrite(LED2,0);
1a00085e:	2100      	movs	r1, #0
1a000860:	202c      	movs	r0, #44	; 0x2c
1a000862:	f003 f85f 	bl	1a003924 <gpioWrite>
					gpioWrite(LED3,1);
1a000866:	2101      	movs	r1, #1
1a000868:	202d      	movs	r0, #45	; 0x2d
1a00086a:	f003 f85b 	bl	1a003924 <gpioWrite>
1a00086e:	e78d      	b.n	1a00078c <tareaD+0x28>
					gpioWrite(LED1,0);
1a000870:	2100      	movs	r1, #0
1a000872:	202b      	movs	r0, #43	; 0x2b
1a000874:	f003 f856 	bl	1a003924 <gpioWrite>
					gpioWrite(LED2,1);
1a000878:	2101      	movs	r1, #1
1a00087a:	202c      	movs	r0, #44	; 0x2c
1a00087c:	f003 f852 	bl	1a003924 <gpioWrite>
					gpioWrite(LED3,1);
1a000880:	2101      	movs	r1, #1
1a000882:	202d      	movs	r0, #45	; 0x2d
1a000884:	f003 f84e 	bl	1a003924 <gpioWrite>
1a000888:	e780      	b.n	1a00078c <tareaD+0x28>
1a00088a:	bf00      	nop
1a00088c:	10002cbc 	.word	0x10002cbc

1a000890 <tareaC>:
void tareaC( void* taskParmPtr ){
1a000890:	b500      	push	{lr}
1a000892:	b083      	sub	sp, #12
	int b=0;
1a000894:	2300      	movs	r3, #0
1a000896:	9301      	str	r3, [sp, #4]
1a000898:	e003      	b.n	1a0008a2 <tareaC+0x12>
								gpioWrite(LEDG,0);
1a00089a:	2100      	movs	r1, #0
1a00089c:	2029      	movs	r0, #41	; 0x29
1a00089e:	f003 f841 	bl	1a003924 <gpioWrite>
		if(Seleccion != 0 ){
1a0008a2:	4b09      	ldr	r3, [pc, #36]	; (1a0008c8 <tareaC+0x38>)
1a0008a4:	6818      	ldr	r0, [r3, #0]
1a0008a6:	2800      	cmp	r0, #0
1a0008a8:	d0fb      	beq.n	1a0008a2 <tareaC+0x12>
						if (xQueuePeek(Seleccion, &b, portMAX_DELAY)){
1a0008aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0008ae:	a901      	add	r1, sp, #4
1a0008b0:	f001 fb40 	bl	1a001f34 <xQueuePeek>
1a0008b4:	2800      	cmp	r0, #0
1a0008b6:	d0f4      	beq.n	1a0008a2 <tareaC+0x12>
								if(b<100){
1a0008b8:	9b01      	ldr	r3, [sp, #4]
1a0008ba:	2b63      	cmp	r3, #99	; 0x63
1a0008bc:	dced      	bgt.n	1a00089a <tareaC+0xa>
								gpioWrite(LEDG,1);
1a0008be:	2101      	movs	r1, #1
1a0008c0:	2029      	movs	r0, #41	; 0x29
1a0008c2:	f003 f82f 	bl	1a003924 <gpioWrite>
1a0008c6:	e7ec      	b.n	1a0008a2 <tareaC+0x12>
1a0008c8:	10002cbc 	.word	0x10002cbc

1a0008cc <initIRQ>:
void initIRQ() {
1a0008cc:	b430      	push	{r4, r5}
 */
STATIC INLINE void Chip_SCU_GPIOIntPinSel(uint8_t PortSel, uint8_t PortNum, uint8_t PinNum)
{
	int32_t of = (PortSel & 3) << 3;
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a0008ce:	4814      	ldr	r0, [pc, #80]	; (1a000920 <initIRQ+0x54>)
1a0008d0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
1a0008d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0008d8:	f043 0304 	orr.w	r3, r3, #4
1a0008dc:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->ISEL &= ~pins;
1a0008e0:	4b10      	ldr	r3, [pc, #64]	; (1a000924 <initIRQ+0x58>)
1a0008e2:	681a      	ldr	r2, [r3, #0]
1a0008e4:	f022 0201 	bic.w	r2, r2, #1
1a0008e8:	601a      	str	r2, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENF = pins;
1a0008ea:	2401      	movs	r4, #1
1a0008ec:	615c      	str	r4, [r3, #20]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a0008ee:	490e      	ldr	r1, [pc, #56]	; (1a000928 <initIRQ+0x5c>)
1a0008f0:	25a0      	movs	r5, #160	; 0xa0
1a0008f2:	f881 5320 	strb.w	r5, [r1, #800]	; 0x320
1a0008f6:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
1a0008fa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
1a0008fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
1a000902:	f8c0 2e00 	str.w	r2, [r0, #3584]	; 0xe00
	pPININT->ISEL &= ~pins;
1a000906:	681a      	ldr	r2, [r3, #0]
1a000908:	f022 0202 	bic.w	r2, r2, #2
1a00090c:	601a      	str	r2, [r3, #0]
	pPININT->SIENR = pins;
1a00090e:	2202      	movs	r2, #2
1a000910:	609a      	str	r2, [r3, #8]
1a000912:	f881 5321 	strb.w	r5, [r1, #801]	; 0x321
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a000916:	604c      	str	r4, [r1, #4]
1a000918:	604a      	str	r2, [r1, #4]
}
1a00091a:	bc30      	pop	{r4, r5}
1a00091c:	4770      	bx	lr
1a00091e:	bf00      	nop
1a000920:	40086000 	.word	0x40086000
1a000924:	40087000 	.word	0x40087000
1a000928:	e000e100 	.word	0xe000e100

1a00092c <main>:
{
1a00092c:	b500      	push	{lr}
1a00092e:	b083      	sub	sp, #12
   boardConfig();
1a000930:	f003 fa3e 	bl	1a003db0 <boardInit>
   initIRQ();
1a000934:	f7ff ffca 	bl	1a0008cc <initIRQ>
   xSemaphoreTEC1F = xSemaphoreCreateBinary();
1a000938:	2203      	movs	r2, #3
1a00093a:	2100      	movs	r1, #0
1a00093c:	2001      	movs	r0, #1
1a00093e:	f000 ffda 	bl	1a0018f6 <xQueueGenericCreate>
1a000942:	4c30      	ldr	r4, [pc, #192]	; (1a000a04 <main+0xd8>)
1a000944:	6020      	str	r0, [r4, #0]
   xSemaphoreGive( xSemaphoreTEC1F );
1a000946:	2300      	movs	r3, #0
1a000948:	461a      	mov	r2, r3
1a00094a:	4619      	mov	r1, r3
1a00094c:	f000 fffa 	bl	1a001944 <xQueueGenericSend>
   xSemaphoreTake( xSemaphoreTEC1F, ( TickType_t ) 10 );
1a000950:	210a      	movs	r1, #10
1a000952:	6820      	ldr	r0, [r4, #0]
1a000954:	f001 fa20 	bl	1a001d98 <xQueueSemaphoreTake>
   xSemaphoreTEC1R = xSemaphoreCreateBinary();
1a000958:	2203      	movs	r2, #3
1a00095a:	2100      	movs	r1, #0
1a00095c:	2001      	movs	r0, #1
1a00095e:	f000 ffca 	bl	1a0018f6 <xQueueGenericCreate>
1a000962:	4c29      	ldr	r4, [pc, #164]	; (1a000a08 <main+0xdc>)
1a000964:	6020      	str	r0, [r4, #0]
   xSemaphoreGive( xSemaphoreTEC1R );
1a000966:	2300      	movs	r3, #0
1a000968:	461a      	mov	r2, r3
1a00096a:	4619      	mov	r1, r3
1a00096c:	f000 ffea 	bl	1a001944 <xQueueGenericSend>
   xSemaphoreTake( xSemaphoreTEC1R, ( TickType_t ) 10 );
1a000970:	210a      	movs	r1, #10
1a000972:	6820      	ldr	r0, [r4, #0]
1a000974:	f001 fa10 	bl	1a001d98 <xQueueSemaphoreTake>
   xSemaphoreD1 = xSemaphoreCreateBinary();
1a000978:	2203      	movs	r2, #3
1a00097a:	2100      	movs	r1, #0
1a00097c:	2001      	movs	r0, #1
1a00097e:	f000 ffba 	bl	1a0018f6 <xQueueGenericCreate>
1a000982:	4b22      	ldr	r3, [pc, #136]	; (1a000a0c <main+0xe0>)
1a000984:	6018      	str	r0, [r3, #0]
   xSemaphoreGive( xSemaphoreD1 );
1a000986:	2300      	movs	r3, #0
1a000988:	461a      	mov	r2, r3
1a00098a:	4619      	mov	r1, r3
1a00098c:	f000 ffda 	bl	1a001944 <xQueueGenericSend>
   uartConfig( UART_USB, 115200 );
1a000990:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000994:	2003      	movs	r0, #3
1a000996:	f003 f8a7 	bl	1a003ae8 <uartInit>
   gpioWrite( LED3, ON );
1a00099a:	2101      	movs	r1, #1
1a00099c:	202d      	movs	r0, #45	; 0x2d
1a00099e:	f002 ffc1 	bl	1a003924 <gpioWrite>
   gpioWrite( LED3, 0 );
1a0009a2:	2100      	movs	r1, #0
1a0009a4:	202d      	movs	r0, #45	; 0x2d
1a0009a6:	f002 ffbd 	bl	1a003924 <gpioWrite>
   xTaskCreate(
1a0009aa:	2400      	movs	r4, #0
1a0009ac:	9401      	str	r4, [sp, #4]
1a0009ae:	9400      	str	r4, [sp, #0]
1a0009b0:	4623      	mov	r3, r4
1a0009b2:	22b4      	movs	r2, #180	; 0xb4
1a0009b4:	4916      	ldr	r1, [pc, #88]	; (1a000a10 <main+0xe4>)
1a0009b6:	4817      	ldr	r0, [pc, #92]	; (1a000a14 <main+0xe8>)
1a0009b8:	f001 fdcd 	bl	1a002556 <xTaskCreate>
   xTaskCreate(
1a0009bc:	9401      	str	r4, [sp, #4]
1a0009be:	2301      	movs	r3, #1
1a0009c0:	9300      	str	r3, [sp, #0]
1a0009c2:	4623      	mov	r3, r4
1a0009c4:	22b4      	movs	r2, #180	; 0xb4
1a0009c6:	4914      	ldr	r1, [pc, #80]	; (1a000a18 <main+0xec>)
1a0009c8:	4814      	ldr	r0, [pc, #80]	; (1a000a1c <main+0xf0>)
1a0009ca:	f001 fdc4 	bl	1a002556 <xTaskCreate>
    xTaskCreate(
1a0009ce:	9401      	str	r4, [sp, #4]
1a0009d0:	9400      	str	r4, [sp, #0]
1a0009d2:	4623      	mov	r3, r4
1a0009d4:	22b4      	movs	r2, #180	; 0xb4
1a0009d6:	4912      	ldr	r1, [pc, #72]	; (1a000a20 <main+0xf4>)
1a0009d8:	4812      	ldr	r0, [pc, #72]	; (1a000a24 <main+0xf8>)
1a0009da:	f001 fdbc 	bl	1a002556 <xTaskCreate>
   xTaskCreate(
1a0009de:	9401      	str	r4, [sp, #4]
1a0009e0:	9400      	str	r4, [sp, #0]
1a0009e2:	4623      	mov	r3, r4
1a0009e4:	22b4      	movs	r2, #180	; 0xb4
1a0009e6:	4910      	ldr	r1, [pc, #64]	; (1a000a28 <main+0xfc>)
1a0009e8:	4810      	ldr	r0, [pc, #64]	; (1a000a2c <main+0x100>)
1a0009ea:	f001 fdb4 	bl	1a002556 <xTaskCreate>
   xTaskCreate(
1a0009ee:	9401      	str	r4, [sp, #4]
1a0009f0:	9400      	str	r4, [sp, #0]
1a0009f2:	4623      	mov	r3, r4
1a0009f4:	22b4      	movs	r2, #180	; 0xb4
1a0009f6:	490e      	ldr	r1, [pc, #56]	; (1a000a30 <main+0x104>)
1a0009f8:	480e      	ldr	r0, [pc, #56]	; (1a000a34 <main+0x108>)
1a0009fa:	f001 fdac 	bl	1a002556 <xTaskCreate>
   vTaskStartScheduler();
1a0009fe:	f001 fddd 	bl	1a0025bc <vTaskStartScheduler>
1a000a02:	e7fe      	b.n	1a000a02 <main+0xd6>
1a000a04:	100000d4 	.word	0x100000d4
1a000a08:	100000d8 	.word	0x100000d8
1a000a0c:	100000d0 	.word	0x100000d0
1a000a10:	1a0057a0 	.word	0x1a0057a0
1a000a14:	1a000301 	.word	0x1a000301
1a000a18:	1a0057ac 	.word	0x1a0057ac
1a000a1c:	1a000679 	.word	0x1a000679
1a000a20:	1a0057b8 	.word	0x1a0057b8
1a000a24:	1a000891 	.word	0x1a000891
1a000a28:	1a0057c4 	.word	0x1a0057c4
1a000a2c:	1a000765 	.word	0x1a000765
1a000a30:	1a0057d0 	.word	0x1a0057d0
1a000a34:	1a000715 	.word	0x1a000715

1a000a38 <GPIO0_IRQHandler>:
void GPIO0_IRQHandler(void){
1a000a38:	b500      	push	{lr}
1a000a3a:	b083      	sub	sp, #12
	portBASE_TYPE xSwitchRequired = pdFALSE;
1a000a3c:	2300      	movs	r3, #0
1a000a3e:	9301      	str	r3, [sp, #4]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetFallStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->FALL;
1a000a40:	4b0d      	ldr	r3, [pc, #52]	; (1a000a78 <GPIO0_IRQHandler+0x40>)
1a000a42:	6a1b      	ldr	r3, [r3, #32]
	if (Chip_PININT_GetFallStates(LPC_GPIO_PIN_INT) & PININTCH0){ //Verificamos que la interrupción es la esperada
1a000a44:	f013 0f01 	tst.w	r3, #1
1a000a48:	d10c      	bne.n	1a000a64 <GPIO0_IRQHandler+0x2c>
	portEND_SWITCHING_ISR(xSwitchRequired);//Terminar con taskYIELD_FROM_ISR (&xSwitchRequired);
1a000a4a:	9b01      	ldr	r3, [sp, #4]
1a000a4c:	b13b      	cbz	r3, 1a000a5e <GPIO0_IRQHandler+0x26>
1a000a4e:	4b0b      	ldr	r3, [pc, #44]	; (1a000a7c <GPIO0_IRQHandler+0x44>)
1a000a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a54:	601a      	str	r2, [r3, #0]
1a000a56:	f3bf 8f4f 	dsb	sy
1a000a5a:	f3bf 8f6f 	isb	sy
}
1a000a5e:	b003      	add	sp, #12
1a000a60:	f85d fb04 	ldr.w	pc, [sp], #4
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000a64:	4b04      	ldr	r3, [pc, #16]	; (1a000a78 <GPIO0_IRQHandler+0x40>)
1a000a66:	2201      	movs	r2, #1
1a000a68:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR( xSemaphoreTEC1F, &xSwitchRequired); //En este caso libero un semáforo
1a000a6a:	a901      	add	r1, sp, #4
1a000a6c:	4b04      	ldr	r3, [pc, #16]	; (1a000a80 <GPIO0_IRQHandler+0x48>)
1a000a6e:	6818      	ldr	r0, [r3, #0]
1a000a70:	f001 f88c 	bl	1a001b8c <xQueueGiveFromISR>
1a000a74:	e7e9      	b.n	1a000a4a <GPIO0_IRQHandler+0x12>
1a000a76:	bf00      	nop
1a000a78:	40087000 	.word	0x40087000
1a000a7c:	e000ed04 	.word	0xe000ed04
1a000a80:	100000d4 	.word	0x100000d4

1a000a84 <GPIO1_IRQHandler>:
void GPIO1_IRQHandler(void){
1a000a84:	b500      	push	{lr}
1a000a86:	b083      	sub	sp, #12
	portBASE_TYPE xSwitchRequired = pdFALSE;
1a000a88:	2300      	movs	r3, #0
1a000a8a:	9301      	str	r3, [sp, #4]
	return pPININT->RISE;
1a000a8c:	4b0d      	ldr	r3, [pc, #52]	; (1a000ac4 <GPIO1_IRQHandler+0x40>)
1a000a8e:	69db      	ldr	r3, [r3, #28]
	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH1){
1a000a90:	f013 0f02 	tst.w	r3, #2
1a000a94:	d10c      	bne.n	1a000ab0 <GPIO1_IRQHandler+0x2c>
	portEND_SWITCHING_ISR(xSwitchRequired);
1a000a96:	9b01      	ldr	r3, [sp, #4]
1a000a98:	b13b      	cbz	r3, 1a000aaa <GPIO1_IRQHandler+0x26>
1a000a9a:	4b0b      	ldr	r3, [pc, #44]	; (1a000ac8 <GPIO1_IRQHandler+0x44>)
1a000a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000aa0:	601a      	str	r2, [r3, #0]
1a000aa2:	f3bf 8f4f 	dsb	sy
1a000aa6:	f3bf 8f6f 	isb	sy
}
1a000aaa:	b003      	add	sp, #12
1a000aac:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a000ab0:	4b04      	ldr	r3, [pc, #16]	; (1a000ac4 <GPIO1_IRQHandler+0x40>)
1a000ab2:	2202      	movs	r2, #2
1a000ab4:	625a      	str	r2, [r3, #36]	; 0x24
		xSemaphoreGiveFromISR( xSemaphoreTEC1R, &xSwitchRequired );
1a000ab6:	a901      	add	r1, sp, #4
1a000ab8:	4b04      	ldr	r3, [pc, #16]	; (1a000acc <GPIO1_IRQHandler+0x48>)
1a000aba:	6818      	ldr	r0, [r3, #0]
1a000abc:	f001 f866 	bl	1a001b8c <xQueueGiveFromISR>
1a000ac0:	e7e9      	b.n	1a000a96 <GPIO1_IRQHandler+0x12>
1a000ac2:	bf00      	nop
1a000ac4:	40087000 	.word	0x40087000
1a000ac8:	e000ed04 	.word	0xe000ed04
1a000acc:	100000d8 	.word	0x100000d8

1a000ad0 <Ampu9250InitializeControlStructure>:

/*==================[internal functions definition]==========================*/

static int8_t Ampu9250InitializeControlStructure( void )
{
	Acontrol._tempScale = 333.87f;
1a000ad0:	4b1b      	ldr	r3, [pc, #108]	; (1a000b40 <Ampu9250InitializeControlStructure+0x70>)
1a000ad2:	4a1c      	ldr	r2, [pc, #112]	; (1a000b44 <Ampu9250InitializeControlStructure+0x74>)
1a000ad4:	619a      	str	r2, [r3, #24]
	Acontrol._tempOffset = 21.0f;
1a000ad6:	4a1c      	ldr	r2, [pc, #112]	; (1a000b48 <Ampu9250InitializeControlStructure+0x78>)
1a000ad8:	61da      	str	r2, [r3, #28]
	Acontrol._numSamples = 100;
1a000ada:	2264      	movs	r2, #100	; 0x64
1a000adc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	Acontrol._axs = 1.0f;
1a000ae0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a000ae4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Acontrol._ays = 1.0f;
1a000ae8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	Acontrol._azs = 1.0f;
1a000aec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	Acontrol._maxCounts = 1000;
1a000af0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000af4:	f8a3 10d8 	strh.w	r1, [r3, #216]	; 0xd8
	Acontrol._deltaThresh = 0.3f;
1a000af8:	4914      	ldr	r1, [pc, #80]	; (1a000b4c <Ampu9250InitializeControlStructure+0x7c>)
1a000afa:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	Acontrol._coeff = 8;
1a000afe:	2108      	movs	r1, #8
1a000b00:	f883 10e0 	strb.w	r1, [r3, #224]	; 0xe0
	Acontrol._hxs = 1.0f;
1a000b04:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	Acontrol._hys = 1.0f;
1a000b08:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	Acontrol._hzs = 1.0f;
1a000b0c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	Acontrol.tX[0] = 0;
1a000b10:	2200      	movs	r2, #0
1a000b12:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	Acontrol.tX[1] = 1;
1a000b16:	2101      	movs	r1, #1
1a000b18:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
	Acontrol.tX[2] = 0;
1a000b1c:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	Acontrol.tY[0] = 1;
1a000b20:	f8a3 1146 	strh.w	r1, [r3, #326]	; 0x146
	Acontrol.tY[1] = 0;
1a000b24:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
	Acontrol.tY[2] = 0;
1a000b28:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	Acontrol.tZ[0] = 0;
1a000b2c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	Acontrol.tZ[1] = 0;
1a000b30:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	Acontrol.tZ[2] = -1;
1a000b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a000b38:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
1a000b3c:	4770      	bx	lr
1a000b3e:	bf00      	nop
1a000b40:	100000e0 	.word	0x100000e0
1a000b44:	43a6ef5c 	.word	0x43a6ef5c
1a000b48:	41a80000 	.word	0x41a80000
1a000b4c:	3e99999a 	.word	0x3e99999a

1a000b50 <Ampu9250ReadRegisters>:
      return -1;
	}
}

static int8_t Ampu9250ReadRegisters( uint8_t subAddress, uint8_t count )
{
1a000b50:	b510      	push	{r4, lr}
1a000b52:	b086      	sub	sp, #24
1a000b54:	aa06      	add	r2, sp, #24
1a000b56:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if( i2cRead( I2C0,Acontrol.address,&subAddress,1,TRUE,Acontrol._buffer,count,TRUE) ){
1a000b5a:	4809      	ldr	r0, [pc, #36]	; (1a000b80 <Ampu9250ReadRegisters+0x30>)
1a000b5c:	f810 4b24 	ldrb.w	r4, [r0], #36
1a000b60:	2301      	movs	r3, #1
1a000b62:	9303      	str	r3, [sp, #12]
1a000b64:	9102      	str	r1, [sp, #8]
1a000b66:	9001      	str	r0, [sp, #4]
1a000b68:	9300      	str	r3, [sp, #0]
1a000b6a:	4621      	mov	r1, r4
1a000b6c:	2000      	movs	r0, #0
1a000b6e:	f003 f878 	bl	1a003c62 <i2cRead>
1a000b72:	b110      	cbz	r0, 1a000b7a <Ampu9250ReadRegisters+0x2a>
		return 1;
1a000b74:	2001      	movs	r0, #1
	} else {
		return -1;
	}
}
1a000b76:	b006      	add	sp, #24
1a000b78:	bd10      	pop	{r4, pc}
		return -1;
1a000b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000b7e:	e7fa      	b.n	1a000b76 <Ampu9250ReadRegisters+0x26>
1a000b80:	100000e0 	.word	0x100000e0

1a000b84 <Ampu9250WhoAmI>:
		return -6;
	}
}

static int8_t Ampu9250WhoAmI( void )
{
1a000b84:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (Ampu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
1a000b86:	2101      	movs	r1, #1
1a000b88:	2075      	movs	r0, #117	; 0x75
1a000b8a:	f7ff ffe1 	bl	1a000b50 <Ampu9250ReadRegisters>
1a000b8e:	2800      	cmp	r0, #0
1a000b90:	db03      	blt.n	1a000b9a <Ampu9250WhoAmI+0x16>
		return -1;
	}
	// return the register value
	return Acontrol._buffer[0];
1a000b92:	4b03      	ldr	r3, [pc, #12]	; (1a000ba0 <Ampu9250WhoAmI+0x1c>)
1a000b94:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a000b98:	bd08      	pop	{r3, pc}
		return -1;
1a000b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000b9e:	e7fb      	b.n	1a000b98 <Ampu9250WhoAmI+0x14>
1a000ba0:	100000e0 	.word	0x100000e0

1a000ba4 <Ampu9250WriteRegister>:
{
1a000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ba6:	b085      	sub	sp, #20
1a000ba8:	4606      	mov	r6, r0
1a000baa:	460c      	mov	r4, r1
	transmitDataBuffer[0] = subAddress;
1a000bac:	f88d 000c 	strb.w	r0, [sp, #12]
	transmitDataBuffer[1] = data;
1a000bb0:	f88d 100d 	strb.w	r1, [sp, #13]
	i2cWrite(I2C0, Acontrol.address, transmitDataBuffer, 2, TRUE);
1a000bb4:	4d0c      	ldr	r5, [pc, #48]	; (1a000be8 <Ampu9250WriteRegister+0x44>)
1a000bb6:	7829      	ldrb	r1, [r5, #0]
1a000bb8:	2701      	movs	r7, #1
1a000bba:	9700      	str	r7, [sp, #0]
1a000bbc:	2302      	movs	r3, #2
1a000bbe:	aa03      	add	r2, sp, #12
1a000bc0:	2000      	movs	r0, #0
1a000bc2:	f003 f862 	bl	1a003c8a <i2cWrite>
	vTaskDelay( 10 / portTICK_RATE_MS );//delay(10);
1a000bc6:	200a      	movs	r0, #10
1a000bc8:	f001 fea8 	bl	1a00291c <vTaskDelay>
	Ampu9250ReadRegisters(subAddress,1);
1a000bcc:	4639      	mov	r1, r7
1a000bce:	4630      	mov	r0, r6
1a000bd0:	f7ff ffbe 	bl	1a000b50 <Ampu9250ReadRegisters>
	if(Acontrol._buffer[0] == data) {
1a000bd4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
1a000bd8:	42a3      	cmp	r3, r4
1a000bda:	d102      	bne.n	1a000be2 <Ampu9250WriteRegister+0x3e>
      return 1;
1a000bdc:	4638      	mov	r0, r7
}
1a000bde:	b005      	add	sp, #20
1a000be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return -1;
1a000be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000be6:	e7fa      	b.n	1a000bde <Ampu9250WriteRegister+0x3a>
1a000be8:	100000e0 	.word	0x100000e0

1a000bec <Ampu9250ReadAK8963Registers>:
	// return the register value
	return Acontrol._buffer[0];
}

static int8_t Ampu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
1a000bec:	b538      	push	{r3, r4, r5, lr}
1a000bee:	4605      	mov	r5, r0
1a000bf0:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for read
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
1a000bf2:	218c      	movs	r1, #140	; 0x8c
1a000bf4:	2025      	movs	r0, #37	; 0x25
1a000bf6:	f7ff ffd5 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000bfa:	2800      	cmp	r0, #0
1a000bfc:	db17      	blt.n	1a000c2e <Ampu9250ReadAK8963Registers+0x42>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a000bfe:	4629      	mov	r1, r5
1a000c00:	2026      	movs	r0, #38	; 0x26
1a000c02:	f7ff ffcf 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000c06:	2800      	cmp	r0, #0
1a000c08:	db14      	blt.n	1a000c34 <Ampu9250ReadAK8963Registers+0x48>
		return -2;
	}
	// enable I2C and request the bytes
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
1a000c0a:	f044 0180 	orr.w	r1, r4, #128	; 0x80
1a000c0e:	2027      	movs	r0, #39	; 0x27
1a000c10:	f7ff ffc8 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000c14:	2800      	cmp	r0, #0
1a000c16:	db10      	blt.n	1a000c3a <Ampu9250ReadAK8963Registers+0x4e>
		return -3;
	}
	vTaskDelay( 1 / portTICK_RATE_MS );//delay(1); // takes some time for these registers to fill
1a000c18:	2001      	movs	r0, #1
1a000c1a:	f001 fe7f 	bl	1a00291c <vTaskDelay>
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	Acontrol._status = Ampu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
1a000c1e:	4621      	mov	r1, r4
1a000c20:	2049      	movs	r0, #73	; 0x49
1a000c22:	f7ff ff95 	bl	1a000b50 <Ampu9250ReadRegisters>
1a000c26:	4b06      	ldr	r3, [pc, #24]	; (1a000c40 <Ampu9250ReadAK8963Registers+0x54>)
1a000c28:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	return Acontrol._status;
}
1a000c2c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c32:	e7fb      	b.n	1a000c2c <Ampu9250ReadAK8963Registers+0x40>
		return -2;
1a000c34:	f06f 0001 	mvn.w	r0, #1
1a000c38:	e7f8      	b.n	1a000c2c <Ampu9250ReadAK8963Registers+0x40>
		return -3;
1a000c3a:	f06f 0002 	mvn.w	r0, #2
1a000c3e:	e7f5      	b.n	1a000c2c <Ampu9250ReadAK8963Registers+0x40>
1a000c40:	100000e0 	.word	0x100000e0

1a000c44 <Ampu9250WhoAmIAK8963>:
{
1a000c44:	b508      	push	{r3, lr}
	if (Ampu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
1a000c46:	2101      	movs	r1, #1
1a000c48:	2000      	movs	r0, #0
1a000c4a:	f7ff ffcf 	bl	1a000bec <Ampu9250ReadAK8963Registers>
1a000c4e:	2800      	cmp	r0, #0
1a000c50:	db03      	blt.n	1a000c5a <Ampu9250WhoAmIAK8963+0x16>
	return Acontrol._buffer[0];
1a000c52:	4b03      	ldr	r3, [pc, #12]	; (1a000c60 <Ampu9250WhoAmIAK8963+0x1c>)
1a000c54:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a000c58:	bd08      	pop	{r3, pc}
		return -1;
1a000c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c5e:	e7fb      	b.n	1a000c58 <Ampu9250WhoAmIAK8963+0x14>
1a000c60:	100000e0 	.word	0x100000e0

1a000c64 <Ampu9250WriteAK8963Register>:
{
1a000c64:	b538      	push	{r3, r4, r5, lr}
1a000c66:	4604      	mov	r4, r0
1a000c68:	460d      	mov	r5, r1
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
1a000c6a:	210c      	movs	r1, #12
1a000c6c:	2025      	movs	r0, #37	; 0x25
1a000c6e:	f7ff ff99 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000c72:	2800      	cmp	r0, #0
1a000c74:	db1e      	blt.n	1a000cb4 <Ampu9250WriteAK8963Register+0x50>
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a000c76:	4621      	mov	r1, r4
1a000c78:	2026      	movs	r0, #38	; 0x26
1a000c7a:	f7ff ff93 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000c7e:	2800      	cmp	r0, #0
1a000c80:	db1b      	blt.n	1a000cba <Ampu9250WriteAK8963Register+0x56>
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
1a000c82:	4629      	mov	r1, r5
1a000c84:	2063      	movs	r0, #99	; 0x63
1a000c86:	f7ff ff8d 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000c8a:	2800      	cmp	r0, #0
1a000c8c:	db18      	blt.n	1a000cc0 <Ampu9250WriteAK8963Register+0x5c>
	if (Ampu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
1a000c8e:	2181      	movs	r1, #129	; 0x81
1a000c90:	2027      	movs	r0, #39	; 0x27
1a000c92:	f7ff ff87 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000c96:	2800      	cmp	r0, #0
1a000c98:	db15      	blt.n	1a000cc6 <Ampu9250WriteAK8963Register+0x62>
	if (Ampu9250ReadAK8963Registers(subAddress,1) < 0) {
1a000c9a:	2101      	movs	r1, #1
1a000c9c:	4620      	mov	r0, r4
1a000c9e:	f7ff ffa5 	bl	1a000bec <Ampu9250ReadAK8963Registers>
1a000ca2:	2800      	cmp	r0, #0
1a000ca4:	db12      	blt.n	1a000ccc <Ampu9250WriteAK8963Register+0x68>
	if(Acontrol._buffer[0] == data) {
1a000ca6:	4b0c      	ldr	r3, [pc, #48]	; (1a000cd8 <Ampu9250WriteAK8963Register+0x74>)
1a000ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a000cac:	42ab      	cmp	r3, r5
1a000cae:	d110      	bne.n	1a000cd2 <Ampu9250WriteAK8963Register+0x6e>
		return 1;
1a000cb0:	2001      	movs	r0, #1
}
1a000cb2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000cb8:	e7fb      	b.n	1a000cb2 <Ampu9250WriteAK8963Register+0x4e>
		return -2;
1a000cba:	f06f 0001 	mvn.w	r0, #1
1a000cbe:	e7f8      	b.n	1a000cb2 <Ampu9250WriteAK8963Register+0x4e>
		return -3;
1a000cc0:	f06f 0002 	mvn.w	r0, #2
1a000cc4:	e7f5      	b.n	1a000cb2 <Ampu9250WriteAK8963Register+0x4e>
		return -4;
1a000cc6:	f06f 0003 	mvn.w	r0, #3
1a000cca:	e7f2      	b.n	1a000cb2 <Ampu9250WriteAK8963Register+0x4e>
		return -5;
1a000ccc:	f06f 0004 	mvn.w	r0, #4
1a000cd0:	e7ef      	b.n	1a000cb2 <Ampu9250WriteAK8963Register+0x4e>
		return -6;
1a000cd2:	f06f 0005 	mvn.w	r0, #5
1a000cd6:	e7ec      	b.n	1a000cb2 <Ampu9250WriteAK8963Register+0x4e>
1a000cd8:	100000e0 	.word	0x100000e0

1a000cdc <Ampu9250SetGyroRange>:
	}
	return 1;
}

static int8_t Ampu9250SetGyroRange( MPU9250_GyroRange_t range )
{
1a000cdc:	b510      	push	{r4, lr}
1a000cde:	4604      	mov	r4, r0
	switch(range) {
1a000ce0:	2803      	cmp	r0, #3
1a000ce2:	d80c      	bhi.n	1a000cfe <Ampu9250SetGyroRange+0x22>
1a000ce4:	e8df f000 	tbb	[pc, r0]
1a000ce8:	241a1002 	.word	0x241a1002
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(Ampu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
1a000cec:	2100      	movs	r1, #0
1a000cee:	201b      	movs	r0, #27
1a000cf0:	f7ff ff58 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000cf4:	2800      	cmp	r0, #0
1a000cf6:	db25      	blt.n	1a000d44 <Ampu9250SetGyroRange+0x68>
			return -1;
		  }
        // setting the gyro scale to 250DPS
		  Acontrol._gyroScale = 250.0f/32767.5f * MPU9250_D2R;
1a000cf8:	4b18      	ldr	r3, [pc, #96]	; (1a000d5c <Ampu9250SetGyroRange+0x80>)
1a000cfa:	4a19      	ldr	r2, [pc, #100]	; (1a000d60 <Ampu9250SetGyroRange+0x84>)
1a000cfc:	609a      	str	r2, [r3, #8]
        // setting the gyro scale to 2000DPS
		  Acontrol._gyroScale = 2000.0f/32767.5f * MPU9250_D2R;
		  break;
		}
	}
	Acontrol._gyroRange = range;
1a000cfe:	4b17      	ldr	r3, [pc, #92]	; (1a000d5c <Ampu9250SetGyroRange+0x80>)
1a000d00:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	return 1;
1a000d04:	2001      	movs	r0, #1
}
1a000d06:	bd10      	pop	{r4, pc}
		  if(Ampu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
1a000d08:	2108      	movs	r1, #8
1a000d0a:	201b      	movs	r0, #27
1a000d0c:	f7ff ff4a 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000d10:	2800      	cmp	r0, #0
1a000d12:	db1a      	blt.n	1a000d4a <Ampu9250SetGyroRange+0x6e>
		  Acontrol._gyroScale = 500.0f/32767.5f * MPU9250_D2R;
1a000d14:	4b11      	ldr	r3, [pc, #68]	; (1a000d5c <Ampu9250SetGyroRange+0x80>)
1a000d16:	4a13      	ldr	r2, [pc, #76]	; (1a000d64 <Ampu9250SetGyroRange+0x88>)
1a000d18:	609a      	str	r2, [r3, #8]
		  break;
1a000d1a:	e7f0      	b.n	1a000cfe <Ampu9250SetGyroRange+0x22>
		  if(Ampu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
1a000d1c:	2110      	movs	r1, #16
1a000d1e:	201b      	movs	r0, #27
1a000d20:	f7ff ff40 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000d24:	2800      	cmp	r0, #0
1a000d26:	db13      	blt.n	1a000d50 <Ampu9250SetGyroRange+0x74>
		  Acontrol._gyroScale = 1000.0f/32767.5f * MPU9250_D2R;
1a000d28:	4b0c      	ldr	r3, [pc, #48]	; (1a000d5c <Ampu9250SetGyroRange+0x80>)
1a000d2a:	4a0f      	ldr	r2, [pc, #60]	; (1a000d68 <Ampu9250SetGyroRange+0x8c>)
1a000d2c:	609a      	str	r2, [r3, #8]
		  break;
1a000d2e:	e7e6      	b.n	1a000cfe <Ampu9250SetGyroRange+0x22>
		  if(Ampu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
1a000d30:	2118      	movs	r1, #24
1a000d32:	201b      	movs	r0, #27
1a000d34:	f7ff ff36 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000d38:	2800      	cmp	r0, #0
1a000d3a:	db0c      	blt.n	1a000d56 <Ampu9250SetGyroRange+0x7a>
		  Acontrol._gyroScale = 2000.0f/32767.5f * MPU9250_D2R;
1a000d3c:	4b07      	ldr	r3, [pc, #28]	; (1a000d5c <Ampu9250SetGyroRange+0x80>)
1a000d3e:	4a0b      	ldr	r2, [pc, #44]	; (1a000d6c <Ampu9250SetGyroRange+0x90>)
1a000d40:	609a      	str	r2, [r3, #8]
		  break;
1a000d42:	e7dc      	b.n	1a000cfe <Ampu9250SetGyroRange+0x22>
			return -1;
1a000d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d48:	e7dd      	b.n	1a000d06 <Ampu9250SetGyroRange+0x2a>
			return -1;
1a000d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d4e:	e7da      	b.n	1a000d06 <Ampu9250SetGyroRange+0x2a>
			return -1;
1a000d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d54:	e7d7      	b.n	1a000d06 <Ampu9250SetGyroRange+0x2a>
			return -1;
1a000d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d5a:	e7d4      	b.n	1a000d06 <Ampu9250SetGyroRange+0x2a>
1a000d5c:	100000e0 	.word	0x100000e0
1a000d60:	390ba0e4 	.word	0x390ba0e4
1a000d64:	398ba0e4 	.word	0x398ba0e4
1a000d68:	3a0ba0e4 	.word	0x3a0ba0e4
1a000d6c:	3a8ba0e4 	.word	0x3a8ba0e4

1a000d70 <Ampu9250SetDlpfBandwidth>:

static int8_t Ampu9250SetDlpfBandwidth( MPU9250_DlpfBandwidth_t bandwidth )
{
1a000d70:	b510      	push	{r4, lr}
1a000d72:	4604      	mov	r4, r0
	switch (bandwidth) {
1a000d74:	2805      	cmp	r0, #5
1a000d76:	d810      	bhi.n	1a000d9a <Ampu9250SetDlpfBandwidth+0x2a>
1a000d78:	e8df f000 	tbb	[pc, r0]
1a000d7c:	32231403 	.word	0x32231403
1a000d80:	5041      	.short	0x5041
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a000d82:	2101      	movs	r1, #1
1a000d84:	201d      	movs	r0, #29
1a000d86:	f7ff ff0d 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000d8a:	2800      	cmp	r0, #0
1a000d8c:	db55      	blt.n	1a000e3a <Ampu9250SetDlpfBandwidth+0xca>
				return -1;
			}
         // setting gyro bandwidth to 184Hz
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) {
1a000d8e:	2101      	movs	r1, #1
1a000d90:	201a      	movs	r0, #26
1a000d92:	f7ff ff07 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000d96:	2800      	cmp	r0, #0
1a000d98:	db52      	blt.n	1a000e40 <Ampu9250SetDlpfBandwidth+0xd0>
				return -2;
			}
			break;
		}
	}
	Acontrol._bandwidth = bandwidth;
1a000d9a:	4b32      	ldr	r3, [pc, #200]	; (1a000e64 <Ampu9250SetDlpfBandwidth+0xf4>)
1a000d9c:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	return 1;
1a000da0:	2001      	movs	r0, #1
}
1a000da2:	bd10      	pop	{r4, pc}
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) {
1a000da4:	2102      	movs	r1, #2
1a000da6:	201d      	movs	r0, #29
1a000da8:	f7ff fefc 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000dac:	2800      	cmp	r0, #0
1a000dae:	db4a      	blt.n	1a000e46 <Ampu9250SetDlpfBandwidth+0xd6>
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) {
1a000db0:	2102      	movs	r1, #2
1a000db2:	201a      	movs	r0, #26
1a000db4:	f7ff fef6 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000db8:	2800      	cmp	r0, #0
1a000dba:	daee      	bge.n	1a000d9a <Ampu9250SetDlpfBandwidth+0x2a>
				return -2;
1a000dbc:	f06f 0001 	mvn.w	r0, #1
1a000dc0:	e7ef      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) {
1a000dc2:	2103      	movs	r1, #3
1a000dc4:	201d      	movs	r0, #29
1a000dc6:	f7ff feed 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000dca:	2800      	cmp	r0, #0
1a000dcc:	db3e      	blt.n	1a000e4c <Ampu9250SetDlpfBandwidth+0xdc>
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) {
1a000dce:	2103      	movs	r1, #3
1a000dd0:	201a      	movs	r0, #26
1a000dd2:	f7ff fee7 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000dd6:	2800      	cmp	r0, #0
1a000dd8:	dadf      	bge.n	1a000d9a <Ampu9250SetDlpfBandwidth+0x2a>
				return -2;
1a000dda:	f06f 0001 	mvn.w	r0, #1
1a000dde:	e7e0      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) {
1a000de0:	2104      	movs	r1, #4
1a000de2:	201d      	movs	r0, #29
1a000de4:	f7ff fede 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000de8:	2800      	cmp	r0, #0
1a000dea:	db32      	blt.n	1a000e52 <Ampu9250SetDlpfBandwidth+0xe2>
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) {
1a000dec:	2104      	movs	r1, #4
1a000dee:	201a      	movs	r0, #26
1a000df0:	f7ff fed8 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000df4:	2800      	cmp	r0, #0
1a000df6:	dad0      	bge.n	1a000d9a <Ampu9250SetDlpfBandwidth+0x2a>
				return -2;
1a000df8:	f06f 0001 	mvn.w	r0, #1
1a000dfc:	e7d1      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) {
1a000dfe:	2105      	movs	r1, #5
1a000e00:	201d      	movs	r0, #29
1a000e02:	f7ff fecf 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000e06:	2800      	cmp	r0, #0
1a000e08:	db26      	blt.n	1a000e58 <Ampu9250SetDlpfBandwidth+0xe8>
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) {
1a000e0a:	2105      	movs	r1, #5
1a000e0c:	201a      	movs	r0, #26
1a000e0e:	f7ff fec9 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000e12:	2800      	cmp	r0, #0
1a000e14:	dac1      	bge.n	1a000d9a <Ampu9250SetDlpfBandwidth+0x2a>
				return -2;
1a000e16:	f06f 0001 	mvn.w	r0, #1
1a000e1a:	e7c2      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
			if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) {
1a000e1c:	2106      	movs	r1, #6
1a000e1e:	201d      	movs	r0, #29
1a000e20:	f7ff fec0 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000e24:	2800      	cmp	r0, #0
1a000e26:	db1a      	blt.n	1a000e5e <Ampu9250SetDlpfBandwidth+0xee>
			if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) {
1a000e28:	2106      	movs	r1, #6
1a000e2a:	201a      	movs	r0, #26
1a000e2c:	f7ff feba 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000e30:	2800      	cmp	r0, #0
1a000e32:	dab2      	bge.n	1a000d9a <Ampu9250SetDlpfBandwidth+0x2a>
				return -2;
1a000e34:	f06f 0001 	mvn.w	r0, #1
1a000e38:	e7b3      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000e3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e3e:	e7b0      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
				return -2;
1a000e40:	f06f 0001 	mvn.w	r0, #1
1a000e44:	e7ad      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e4a:	e7aa      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e50:	e7a7      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e56:	e7a4      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e5c:	e7a1      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
				return -1;
1a000e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e62:	e79e      	b.n	1a000da2 <Ampu9250SetDlpfBandwidth+0x32>
1a000e64:	100000e0 	.word	0x100000e0

1a000e68 <Ampu9250SetSrd>:

static int8_t Ampu9250SetSrd( uint8_t srd )
{
1a000e68:	b510      	push	{r4, lr}
1a000e6a:	4604      	mov	r4, r0
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (Ampu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
1a000e6c:	2113      	movs	r1, #19
1a000e6e:	2019      	movs	r0, #25
1a000e70:	f7ff fe98 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000e74:	2800      	cmp	r0, #0
1a000e76:	db39      	blt.n	1a000eec <Ampu9250SetSrd+0x84>
		return -1;
	}
	if (srd > 9) {
1a000e78:	2c09      	cmp	r4, #9
1a000e7a:	d920      	bls.n	1a000ebe <Ampu9250SetSrd+0x56>
		// set AK8963 to Power Down
		if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a000e7c:	2100      	movs	r1, #0
1a000e7e:	200a      	movs	r0, #10
1a000e80:	f7ff fef0 	bl	1a000c64 <Ampu9250WriteAK8963Register>
1a000e84:	2800      	cmp	r0, #0
1a000e86:	db34      	blt.n	1a000ef2 <Ampu9250SetSrd+0x8a>
			return -2;
		}
		vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a000e88:	2064      	movs	r0, #100	; 0x64
1a000e8a:	f001 fd47 	bl	1a00291c <vTaskDelay>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
1a000e8e:	2112      	movs	r1, #18
1a000e90:	200a      	movs	r0, #10
1a000e92:	f7ff fee7 	bl	1a000c64 <Ampu9250WriteAK8963Register>
1a000e96:	2800      	cmp	r0, #0
1a000e98:	db2e      	blt.n	1a000ef8 <Ampu9250SetSrd+0x90>
			return -3;
		}
		vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a000e9a:	2064      	movs	r0, #100	; 0x64
1a000e9c:	f001 fd3e 	bl	1a00291c <vTaskDelay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		Ampu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a000ea0:	2107      	movs	r1, #7
1a000ea2:	2003      	movs	r0, #3
1a000ea4:	f7ff fea2 	bl	1a000bec <Ampu9250ReadAK8963Registers>
		vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		Ampu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	}
	/* setting the sample rate divider */
	if (Ampu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
1a000ea8:	4621      	mov	r1, r4
1a000eaa:	2019      	movs	r0, #25
1a000eac:	f7ff fe7a 	bl	1a000ba4 <Ampu9250WriteRegister>
1a000eb0:	2800      	cmp	r0, #0
1a000eb2:	db2a      	blt.n	1a000f0a <Ampu9250SetSrd+0xa2>
		return -4;
	}
	Acontrol._srd = srd;
1a000eb4:	4b16      	ldr	r3, [pc, #88]	; (1a000f10 <Ampu9250SetSrd+0xa8>)
1a000eb6:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	return 1;
1a000eba:	2001      	movs	r0, #1
}
1a000ebc:	bd10      	pop	{r4, pc}
		if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a000ebe:	2100      	movs	r1, #0
1a000ec0:	200a      	movs	r0, #10
1a000ec2:	f7ff fecf 	bl	1a000c64 <Ampu9250WriteAK8963Register>
1a000ec6:	2800      	cmp	r0, #0
1a000ec8:	db19      	blt.n	1a000efe <Ampu9250SetSrd+0x96>
		vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a000eca:	2064      	movs	r0, #100	; 0x64
1a000ecc:	f001 fd26 	bl	1a00291c <vTaskDelay>
		if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a000ed0:	2116      	movs	r1, #22
1a000ed2:	200a      	movs	r0, #10
1a000ed4:	f7ff fec6 	bl	1a000c64 <Ampu9250WriteAK8963Register>
1a000ed8:	2800      	cmp	r0, #0
1a000eda:	db13      	blt.n	1a000f04 <Ampu9250SetSrd+0x9c>
		vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a000edc:	2064      	movs	r0, #100	; 0x64
1a000ede:	f001 fd1d 	bl	1a00291c <vTaskDelay>
		Ampu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a000ee2:	2107      	movs	r1, #7
1a000ee4:	2003      	movs	r0, #3
1a000ee6:	f7ff fe81 	bl	1a000bec <Ampu9250ReadAK8963Registers>
1a000eea:	e7dd      	b.n	1a000ea8 <Ampu9250SetSrd+0x40>
		return -1;
1a000eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ef0:	e7e4      	b.n	1a000ebc <Ampu9250SetSrd+0x54>
			return -2;
1a000ef2:	f06f 0001 	mvn.w	r0, #1
1a000ef6:	e7e1      	b.n	1a000ebc <Ampu9250SetSrd+0x54>
			return -3;
1a000ef8:	f06f 0002 	mvn.w	r0, #2
1a000efc:	e7de      	b.n	1a000ebc <Ampu9250SetSrd+0x54>
			return -2;
1a000efe:	f06f 0001 	mvn.w	r0, #1
1a000f02:	e7db      	b.n	1a000ebc <Ampu9250SetSrd+0x54>
			return -3;
1a000f04:	f06f 0002 	mvn.w	r0, #2
1a000f08:	e7d8      	b.n	1a000ebc <Ampu9250SetSrd+0x54>
		return -4;
1a000f0a:	f06f 0003 	mvn.w	r0, #3
1a000f0e:	e7d5      	b.n	1a000ebc <Ampu9250SetSrd+0x54>
1a000f10:	100000e0 	.word	0x100000e0

1a000f14 <Ampu9250Read>:
	return 1;
}

//Read sensor registers and store data at control structure
bool_t Ampu9250Read(void)
{
1a000f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000f18:	b083      	sub	sp, #12
	// grab the data from the MPU9250
	if( !Ampu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
1a000f1a:	2115      	movs	r1, #21
1a000f1c:	203b      	movs	r0, #59	; 0x3b
1a000f1e:	f7ff fe17 	bl	1a000b50 <Ampu9250ReadRegisters>
1a000f22:	2800      	cmp	r0, #0
1a000f24:	f000 8136 	beq.w	1a001194 <Ampu9250Read+0x280>
		return 0;
	}
	// combine into 16 bit values
	Acontrol._axcounts = (((int16_t)Acontrol._buffer[0]) << 8)  | Acontrol._buffer[1];
1a000f28:	4b9b      	ldr	r3, [pc, #620]	; (1a001198 <Ampu9250Read+0x284>)
1a000f2a:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
1a000f2e:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
1a000f32:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
1a000f36:	fa0f fb81 	sxth.w	fp, r1
1a000f3a:	f8a3 b12c 	strh.w	fp, [r3, #300]	; 0x12c
	Acontrol._aycounts = (((int16_t)Acontrol._buffer[2]) << 8)  | Acontrol._buffer[3];
1a000f3e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a000f42:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
1a000f46:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
1a000f4a:	b209      	sxth	r1, r1
1a000f4c:	f8a3 112e 	strh.w	r1, [r3, #302]	; 0x12e
	Acontrol._azcounts = (((int16_t)Acontrol._buffer[4]) << 8)  | Acontrol._buffer[5];
1a000f50:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
1a000f54:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
1a000f58:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
1a000f5c:	b212      	sxth	r2, r2
1a000f5e:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	Acontrol._tcounts  = (((int16_t)Acontrol._buffer[6]) << 8)  | Acontrol._buffer[7];
1a000f62:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
1a000f66:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
1a000f6a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a000f6e:	b200      	sxth	r0, r0
1a000f70:	ee05 0a90 	vmov	s11, r0
1a000f74:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
	Acontrol._gxcounts = (((int16_t)Acontrol._buffer[8]) << 8)  | Acontrol._buffer[9];
1a000f78:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
1a000f7c:	f893 602d 	ldrb.w	r6, [r3, #45]	; 0x2d
1a000f80:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
1a000f84:	b236      	sxth	r6, r6
1a000f86:	f8a3 6132 	strh.w	r6, [r3, #306]	; 0x132
	Acontrol._gycounts = (((int16_t)Acontrol._buffer[10]) << 8) | Acontrol._buffer[11];
1a000f8a:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
1a000f8e:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
1a000f92:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a000f96:	b200      	sxth	r0, r0
1a000f98:	f8a3 0134 	strh.w	r0, [r3, #308]	; 0x134
	Acontrol._gzcounts = (((int16_t)Acontrol._buffer[12]) << 8) | Acontrol._buffer[13];
1a000f9c:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
1a000fa0:	f893 5031 	ldrb.w	r5, [r3, #49]	; 0x31
1a000fa4:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
1a000fa8:	b22d      	sxth	r5, r5
1a000faa:	f8a3 5136 	strh.w	r5, [r3, #310]	; 0x136
	Acontrol._hxcounts = (((int16_t)Acontrol._buffer[15]) << 8) | Acontrol._buffer[14];
1a000fae:	f893 7033 	ldrb.w	r7, [r3, #51]	; 0x33
1a000fb2:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
1a000fb6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a000fba:	b224      	sxth	r4, r4
1a000fbc:	ee06 4a90 	vmov	s13, r4
1a000fc0:	f8a3 4138 	strh.w	r4, [r3, #312]	; 0x138
	Acontrol._hycounts = (((int16_t)Acontrol._buffer[17]) << 8) | Acontrol._buffer[16];
1a000fc4:	f893 7035 	ldrb.w	r7, [r3, #53]	; 0x35
1a000fc8:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
1a000fcc:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a000fd0:	b224      	sxth	r4, r4
1a000fd2:	ee07 4a10 	vmov	s14, r4
1a000fd6:	f8a3 413a 	strh.w	r4, [r3, #314]	; 0x13a
	Acontrol._hzcounts = (((int16_t)Acontrol._buffer[19]) << 8) | Acontrol._buffer[18];
1a000fda:	f893 7037 	ldrb.w	r7, [r3, #55]	; 0x37
1a000fde:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
1a000fe2:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a000fe6:	b224      	sxth	r4, r4
1a000fe8:	ee07 4a90 	vmov	s15, r4
1a000fec:	f8a3 413c 	strh.w	r4, [r3, #316]	; 0x13c
	// transform and convert to float values
	Acontrol._ax = (((float)(Acontrol.tX[0]*Acontrol._axcounts + Acontrol.tX[1]*Acontrol._aycounts + Acontrol.tX[2]*Acontrol._azcounts) * Acontrol._accelScale) - Acontrol._axb)*Acontrol._axs;
1a000ff0:	f9b3 a140 	ldrsh.w	sl, [r3, #320]	; 0x140
1a000ff4:	f9b3 7142 	ldrsh.w	r7, [r3, #322]	; 0x142
1a000ff8:	fb01 f407 	mul.w	r4, r1, r7
1a000ffc:	fb0b 4c0a 	mla	ip, fp, sl, r4
1a001000:	f9b3 4144 	ldrsh.w	r4, [r3, #324]	; 0x144
1a001004:	9401      	str	r4, [sp, #4]
1a001006:	fb02 cc04 	mla	ip, r2, r4, ip
1a00100a:	ee06 ca10 	vmov	s12, ip
1a00100e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a001012:	ed93 5a01 	vldr	s10, [r3, #4]
1a001016:	ee26 6a05 	vmul.f32	s12, s12, s10
1a00101a:	edd3 4a30 	vldr	s9, [r3, #192]	; 0xc0
1a00101e:	ee36 6a64 	vsub.f32	s12, s12, s9
1a001022:	edd3 4a33 	vldr	s9, [r3, #204]	; 0xcc
1a001026:	ee26 6a24 	vmul.f32	s12, s12, s9
1a00102a:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
	Acontrol._ay = (((float)(Acontrol.tY[0]*Acontrol._axcounts + Acontrol.tY[1]*Acontrol._aycounts + Acontrol.tY[2]*Acontrol._azcounts) * Acontrol._accelScale) - Acontrol._ayb)*Acontrol._ays;
1a00102e:	f9b3 e146 	ldrsh.w	lr, [r3, #326]	; 0x146
1a001032:	f9b3 8148 	ldrsh.w	r8, [r3, #328]	; 0x148
1a001036:	fb08 fc01 	mul.w	ip, r8, r1
1a00103a:	fb0e cc0b 	mla	ip, lr, fp, ip
1a00103e:	f9b3 414a 	ldrsh.w	r4, [r3, #330]	; 0x14a
1a001042:	fb04 cc02 	mla	ip, r4, r2, ip
1a001046:	ee06 ca10 	vmov	s12, ip
1a00104a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a00104e:	ee25 6a06 	vmul.f32	s12, s10, s12
1a001052:	edd3 4a31 	vldr	s9, [r3, #196]	; 0xc4
1a001056:	ee36 6a64 	vsub.f32	s12, s12, s9
1a00105a:	edd3 4a34 	vldr	s9, [r3, #208]	; 0xd0
1a00105e:	ee26 6a24 	vmul.f32	s12, s12, s9
1a001062:	ed83 6a10 	vstr	s12, [r3, #64]	; 0x40
	Acontrol._az = (((float)(Acontrol.tZ[0]*Acontrol._axcounts + Acontrol.tZ[1]*Acontrol._aycounts + Acontrol.tZ[2]*Acontrol._azcounts) * Acontrol._accelScale) - Acontrol._azb)*Acontrol._azs;
1a001066:	f9b3 c14c 	ldrsh.w	ip, [r3, #332]	; 0x14c
1a00106a:	f9b3 914e 	ldrsh.w	r9, [r3, #334]	; 0x14e
1a00106e:	fb09 f101 	mul.w	r1, r9, r1
1a001072:	fb0c 110b 	mla	r1, ip, fp, r1
1a001076:	f9b3 b150 	ldrsh.w	fp, [r3, #336]	; 0x150
1a00107a:	fb0b 1102 	mla	r1, fp, r2, r1
1a00107e:	ee06 1a10 	vmov	s12, r1
1a001082:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a001086:	ee25 5a06 	vmul.f32	s10, s10, s12
1a00108a:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
1a00108e:	ee35 5a46 	vsub.f32	s10, s10, s12
1a001092:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
1a001096:	ee25 5a06 	vmul.f32	s10, s10, s12
1a00109a:	ed83 5a11 	vstr	s10, [r3, #68]	; 0x44
	Acontrol._gx = ((float) (Acontrol.tX[0]*Acontrol._gxcounts + Acontrol.tX[1]*Acontrol._gycounts + Acontrol.tX[2]*Acontrol._gzcounts) * Acontrol._gyroScale) -  Acontrol._gxb;
1a00109e:	fb00 f707 	mul.w	r7, r0, r7
1a0010a2:	fb06 770a 	mla	r7, r6, sl, r7
1a0010a6:	9a01      	ldr	r2, [sp, #4]
1a0010a8:	fb05 7202 	mla	r2, r5, r2, r7
1a0010ac:	ee06 2a10 	vmov	s12, r2
1a0010b0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a0010b4:	ed93 5a02 	vldr	s10, [r3, #8]
1a0010b8:	ee26 6a05 	vmul.f32	s12, s12, s10
1a0010bc:	edd3 4a20 	vldr	s9, [r3, #128]	; 0x80
1a0010c0:	ee36 6a64 	vsub.f32	s12, s12, s9
1a0010c4:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	Acontrol._gy = ((float) (Acontrol.tY[0]*Acontrol._gxcounts + Acontrol.tY[1]*Acontrol._gycounts + Acontrol.tY[2]*Acontrol._gzcounts) * Acontrol._gyroScale) -  Acontrol._gyb;
1a0010c8:	fb00 f808 	mul.w	r8, r0, r8
1a0010cc:	fb06 8e0e 	mla	lr, r6, lr, r8
1a0010d0:	fb05 e204 	mla	r2, r5, r4, lr
1a0010d4:	ee06 2a10 	vmov	s12, r2
1a0010d8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a0010dc:	ee25 6a06 	vmul.f32	s12, s10, s12
1a0010e0:	edd3 4a21 	vldr	s9, [r3, #132]	; 0x84
1a0010e4:	ee36 6a64 	vsub.f32	s12, s12, s9
1a0010e8:	ed83 6a13 	vstr	s12, [r3, #76]	; 0x4c
	Acontrol._gz = ((float) (Acontrol.tZ[0]*Acontrol._gxcounts + Acontrol.tZ[1]*Acontrol._gycounts + Acontrol.tZ[2]*Acontrol._gzcounts) * Acontrol._gyroScale) -  Acontrol._gzb;
1a0010ec:	fb00 f009 	mul.w	r0, r0, r9
1a0010f0:	fb06 000c 	mla	r0, r6, ip, r0
1a0010f4:	fb05 050b 	mla	r5, r5, fp, r0
1a0010f8:	ee06 5a10 	vmov	s12, r5
1a0010fc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a001100:	ee25 5a06 	vmul.f32	s10, s10, s12
1a001104:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
1a001108:	ee35 5a46 	vsub.f32	s10, s10, s12
1a00110c:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
	Acontrol._hx = (((float)(Acontrol._hxcounts) * Acontrol._magScaleX) - Acontrol._hxb)*Acontrol._hxs;
1a001110:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a001114:	ed93 6a03 	vldr	s12, [r3, #12]
1a001118:	ee66 6a86 	vmul.f32	s13, s13, s12
1a00111c:	ed93 6a44 	vldr	s12, [r3, #272]	; 0x110
1a001120:	ee76 6ac6 	vsub.f32	s13, s13, s12
1a001124:	ed93 6a47 	vldr	s12, [r3, #284]	; 0x11c
1a001128:	ee66 6a86 	vmul.f32	s13, s13, s12
1a00112c:	edc3 6a15 	vstr	s13, [r3, #84]	; 0x54
	Acontrol._hy = (((float)(Acontrol._hycounts) * Acontrol._magScaleY) - Acontrol._hyb)*Acontrol._hys;
1a001130:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a001134:	edd3 6a04 	vldr	s13, [r3, #16]
1a001138:	ee27 7a26 	vmul.f32	s14, s14, s13
1a00113c:	edd3 6a45 	vldr	s13, [r3, #276]	; 0x114
1a001140:	ee37 7a66 	vsub.f32	s14, s14, s13
1a001144:	edd3 6a48 	vldr	s13, [r3, #288]	; 0x120
1a001148:	ee27 7a26 	vmul.f32	s14, s14, s13
1a00114c:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
	Acontrol._hz = (((float)(Acontrol._hzcounts) * Acontrol._magScaleZ) - Acontrol._hzb)*Acontrol._hzs;
1a001150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a001154:	ed93 7a05 	vldr	s14, [r3, #20]
1a001158:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00115c:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
1a001160:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a001164:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
1a001168:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00116c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	Acontrol._t = ((((float) Acontrol._tcounts)  - Acontrol._tempOffset)/ Acontrol._tempScale) + Acontrol._tempOffset;
1a001170:	eef8 5ae5 	vcvt.f32.s32	s11, s11
1a001174:	edd3 7a07 	vldr	s15, [r3, #28]
1a001178:	ee75 5ae7 	vsub.f32	s11, s11, s15
1a00117c:	edd3 6a06 	vldr	s13, [r3, #24]
1a001180:	ee85 7aa6 	vdiv.f32	s14, s11, s13
1a001184:	ee77 7a87 	vadd.f32	s15, s15, s14
1a001188:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	return 1;
1a00118c:	2001      	movs	r0, #1
}
1a00118e:	b003      	add	sp, #12
1a001190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
1a001194:	2000      	movs	r0, #0
1a001196:	e7fa      	b.n	1a00118e <Ampu9250Read+0x27a>
1a001198:	100000e0 	.word	0x100000e0

1a00119c <Ampu9250GetGyroX_rads>:

// Returns the gyroscope measurement in the x direction, rad/s
float Ampu9250GetGyroX_rads( void )
{
	return Acontrol._gx;
}
1a00119c:	4b01      	ldr	r3, [pc, #4]	; (1a0011a4 <Ampu9250GetGyroX_rads+0x8>)
1a00119e:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
1a0011a2:	4770      	bx	lr
1a0011a4:	100000e0 	.word	0x100000e0

1a0011a8 <Ampu9250GetGyroY_rads>:

// Returns the gyroscope measurement in the y direction, rad/s
float Ampu9250GetGyroY_rads( void )
{
	return Acontrol._gy;
}
1a0011a8:	4b01      	ldr	r3, [pc, #4]	; (1a0011b0 <Ampu9250GetGyroY_rads+0x8>)
1a0011aa:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
1a0011ae:	4770      	bx	lr
1a0011b0:	100000e0 	.word	0x100000e0

1a0011b4 <Ampu9250GetGyroZ_rads>:

// Returns the gyroscope measurement in the z direction, rad/s
float Ampu9250GetGyroZ_rads( void )
{
	return Acontrol._gz;
}
1a0011b4:	4b01      	ldr	r3, [pc, #4]	; (1a0011bc <Ampu9250GetGyroZ_rads+0x8>)
1a0011b6:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
1a0011ba:	4770      	bx	lr
1a0011bc:	100000e0 	.word	0x100000e0

1a0011c0 <Ampu9250CalibrateGyro>:
{
1a0011c0:	b538      	push	{r3, r4, r5, lr}
1a0011c2:	ed2d 8b02 	vpush	{d8}
	if (Ampu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
1a0011c6:	2000      	movs	r0, #0
1a0011c8:	f7ff fd88 	bl	1a000cdc <Ampu9250SetGyroRange>
1a0011cc:	2800      	cmp	r0, #0
1a0011ce:	f2c0 8092 	blt.w	1a0012f6 <Ampu9250CalibrateGyro+0x136>
	if (Ampu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
1a0011d2:	2003      	movs	r0, #3
1a0011d4:	f7ff fdcc 	bl	1a000d70 <Ampu9250SetDlpfBandwidth>
1a0011d8:	2800      	cmp	r0, #0
1a0011da:	f2c0 808f 	blt.w	1a0012fc <Ampu9250CalibrateGyro+0x13c>
	if (Ampu9250SetSrd(19) < 0) {
1a0011de:	2013      	movs	r0, #19
1a0011e0:	f7ff fe42 	bl	1a000e68 <Ampu9250SetSrd>
1a0011e4:	2800      	cmp	r0, #0
1a0011e6:	f2c0 808c 	blt.w	1a001302 <Ampu9250CalibrateGyro+0x142>
	Acontrol._gxbD = 0;
1a0011ea:	4b4a      	ldr	r3, [pc, #296]	; (1a001314 <Ampu9250CalibrateGyro+0x154>)
1a0011ec:	2000      	movs	r0, #0
1a0011ee:	2100      	movs	r1, #0
1a0011f0:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	Acontrol._gybD = 0;
1a0011f4:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
	Acontrol._gzbD = 0;
1a0011f8:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
	for (uint8_t i=0; i < Acontrol._numSamples; i++) {
1a0011fc:	2500      	movs	r5, #0
1a0011fe:	e049      	b.n	1a001294 <Ampu9250CalibrateGyro+0xd4>
		Ampu9250Read();
1a001200:	f7ff fe88 	bl	1a000f14 <Ampu9250Read>
		Acontrol._gxbD += ((Ampu9250GetGyroX_rads() + Acontrol._gxb)/Acontrol._numSamples);
1a001204:	f7ff ffca 	bl	1a00119c <Ampu9250GetGyroX_rads>
1a001208:	4c42      	ldr	r4, [pc, #264]	; (1a001314 <Ampu9250CalibrateGyro+0x154>)
1a00120a:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
1a00120e:	ee30 0a27 	vadd.f32	s0, s0, s15
1a001212:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
1a001216:	ee08 3a10 	vmov	s16, r3
1a00121a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
1a00121e:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a001222:	ee17 0a90 	vmov	r0, s15
1a001226:	f004 f85b 	bl	1a0052e0 <__aeabi_f2d>
1a00122a:	4602      	mov	r2, r0
1a00122c:	460b      	mov	r3, r1
1a00122e:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a001232:	f003 fef7 	bl	1a005024 <__adddf3>
1a001236:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
		Acontrol._gybD += ((Ampu9250GetGyroY_rads() + Acontrol._gyb)/Acontrol._numSamples);
1a00123a:	f7ff ffb5 	bl	1a0011a8 <Ampu9250GetGyroY_rads>
1a00123e:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
1a001242:	ee30 0a27 	vadd.f32	s0, s0, s15
1a001246:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a00124a:	ee17 0a90 	vmov	r0, s15
1a00124e:	f004 f847 	bl	1a0052e0 <__aeabi_f2d>
1a001252:	4602      	mov	r2, r0
1a001254:	460b      	mov	r3, r1
1a001256:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a00125a:	f003 fee3 	bl	1a005024 <__adddf3>
1a00125e:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
		Acontrol._gzbD += ((Ampu9250GetGyroZ_rads() + Acontrol._gzb)/Acontrol._numSamples);
1a001262:	f7ff ffa7 	bl	1a0011b4 <Ampu9250GetGyroZ_rads>
1a001266:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
1a00126a:	ee30 0a27 	vadd.f32	s0, s0, s15
1a00126e:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a001272:	ee17 0a90 	vmov	r0, s15
1a001276:	f004 f833 	bl	1a0052e0 <__aeabi_f2d>
1a00127a:	4602      	mov	r2, r0
1a00127c:	460b      	mov	r3, r1
1a00127e:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a001282:	f003 fecf 	bl	1a005024 <__adddf3>
1a001286:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
		vTaskDelay( 20 / portTICK_RATE_MS );//delay(20);
1a00128a:	2014      	movs	r0, #20
1a00128c:	f001 fb46 	bl	1a00291c <vTaskDelay>
	for (uint8_t i=0; i < Acontrol._numSamples; i++) {
1a001290:	3501      	adds	r5, #1
1a001292:	b2ed      	uxtb	r5, r5
1a001294:	4b1f      	ldr	r3, [pc, #124]	; (1a001314 <Ampu9250CalibrateGyro+0x154>)
1a001296:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a00129a:	42ab      	cmp	r3, r5
1a00129c:	d8b0      	bhi.n	1a001200 <Ampu9250CalibrateGyro+0x40>
	Acontrol._gxb = (float)Acontrol._gxbD;
1a00129e:	4c1d      	ldr	r4, [pc, #116]	; (1a001314 <Ampu9250CalibrateGyro+0x154>)
1a0012a0:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a0012a4:	f004 f874 	bl	1a005390 <__aeabi_d2f>
1a0012a8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	Acontrol._gyb = (float)Acontrol._gybD;
1a0012ac:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a0012b0:	f004 f86e 	bl	1a005390 <__aeabi_d2f>
1a0012b4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	Acontrol._gzb = (float)Acontrol._gzbD;
1a0012b8:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a0012bc:	f004 f868 	bl	1a005390 <__aeabi_d2f>
1a0012c0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	if (Ampu9250SetGyroRange(Acontrol._gyroRange) < 0) {
1a0012c4:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
1a0012c8:	f7ff fd08 	bl	1a000cdc <Ampu9250SetGyroRange>
1a0012cc:	2800      	cmp	r0, #0
1a0012ce:	db1b      	blt.n	1a001308 <Ampu9250CalibrateGyro+0x148>
	if (Ampu9250SetDlpfBandwidth(Acontrol._bandwidth) < 0) {
1a0012d0:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
1a0012d4:	f7ff fd4c 	bl	1a000d70 <Ampu9250SetDlpfBandwidth>
1a0012d8:	2800      	cmp	r0, #0
1a0012da:	db18      	blt.n	1a00130e <Ampu9250CalibrateGyro+0x14e>
	if (Ampu9250SetSrd(Acontrol._srd) < 0) {
1a0012dc:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
1a0012e0:	f7ff fdc2 	bl	1a000e68 <Ampu9250SetSrd>
1a0012e4:	2800      	cmp	r0, #0
1a0012e6:	db03      	blt.n	1a0012f0 <Ampu9250CalibrateGyro+0x130>
	return 1;
1a0012e8:	2001      	movs	r0, #1
}
1a0012ea:	ecbd 8b02 	vpop	{d8}
1a0012ee:	bd38      	pop	{r3, r4, r5, pc}
		return -6;
1a0012f0:	f06f 0005 	mvn.w	r0, #5
1a0012f4:	e7f9      	b.n	1a0012ea <Ampu9250CalibrateGyro+0x12a>
		return -1;
1a0012f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0012fa:	e7f6      	b.n	1a0012ea <Ampu9250CalibrateGyro+0x12a>
		return -2;
1a0012fc:	f06f 0001 	mvn.w	r0, #1
1a001300:	e7f3      	b.n	1a0012ea <Ampu9250CalibrateGyro+0x12a>
		return -3;
1a001302:	f06f 0002 	mvn.w	r0, #2
1a001306:	e7f0      	b.n	1a0012ea <Ampu9250CalibrateGyro+0x12a>
		return -4;
1a001308:	f06f 0003 	mvn.w	r0, #3
1a00130c:	e7ed      	b.n	1a0012ea <Ampu9250CalibrateGyro+0x12a>
		return -5;
1a00130e:	f06f 0004 	mvn.w	r0, #4
1a001312:	e7ea      	b.n	1a0012ea <Ampu9250CalibrateGyro+0x12a>
1a001314:	100000e0 	.word	0x100000e0

1a001318 <Ampu9250Init>:
{
1a001318:	b510      	push	{r4, lr}
1a00131a:	4604      	mov	r4, r0
	Ampu9250InitializeControlStructure();
1a00131c:	f7ff fbd8 	bl	1a000ad0 <Ampu9250InitializeControlStructure>
	Acontrol.address = address;
1a001320:	4ba0      	ldr	r3, [pc, #640]	; (1a0015a4 <Ampu9250Init+0x28c>)
1a001322:	701c      	strb	r4, [r3, #0]
	i2cInit(I2C0, MPU9250_I2C_RATE);
1a001324:	49a0      	ldr	r1, [pc, #640]	; (1a0015a8 <Ampu9250Init+0x290>)
1a001326:	2000      	movs	r0, #0
1a001328:	f002 fc94 	bl	1a003c54 <i2cInit>
	if (Ampu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a00132c:	2101      	movs	r1, #1
1a00132e:	206b      	movs	r0, #107	; 0x6b
1a001330:	f7ff fc38 	bl	1a000ba4 <Ampu9250WriteRegister>
1a001334:	2800      	cmp	r0, #0
1a001336:	f2c0 80fb 	blt.w	1a001530 <Ampu9250Init+0x218>
	if (Ampu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a00133a:	2120      	movs	r1, #32
1a00133c:	206a      	movs	r0, #106	; 0x6a
1a00133e:	f7ff fc31 	bl	1a000ba4 <Ampu9250WriteRegister>
1a001342:	2800      	cmp	r0, #0
1a001344:	f2c0 80f7 	blt.w	1a001536 <Ampu9250Init+0x21e>
	if (Ampu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a001348:	210d      	movs	r1, #13
1a00134a:	2024      	movs	r0, #36	; 0x24
1a00134c:	f7ff fc2a 	bl	1a000ba4 <Ampu9250WriteRegister>
1a001350:	2800      	cmp	r0, #0
1a001352:	f2c0 80f3 	blt.w	1a00153c <Ampu9250Init+0x224>
	Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN);
1a001356:	2100      	movs	r1, #0
1a001358:	200a      	movs	r0, #10
1a00135a:	f7ff fc83 	bl	1a000c64 <Ampu9250WriteAK8963Register>
	Ampu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_PWR_RESET);
1a00135e:	2180      	movs	r1, #128	; 0x80
1a001360:	206b      	movs	r0, #107	; 0x6b
1a001362:	f7ff fc1f 	bl	1a000ba4 <Ampu9250WriteRegister>
	vTaskDelay( 1 / portTICK_RATE_MS );//delay(1);
1a001366:	2001      	movs	r0, #1
1a001368:	f001 fad8 	bl	1a00291c <vTaskDelay>
	Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
1a00136c:	2101      	movs	r1, #1
1a00136e:	200b      	movs	r0, #11
1a001370:	f7ff fc78 	bl	1a000c64 <Ampu9250WriteAK8963Register>
	if (Ampu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a001374:	2101      	movs	r1, #1
1a001376:	206b      	movs	r0, #107	; 0x6b
1a001378:	f7ff fc14 	bl	1a000ba4 <Ampu9250WriteRegister>
1a00137c:	2800      	cmp	r0, #0
1a00137e:	f2c0 80e0 	blt.w	1a001542 <Ampu9250Init+0x22a>
	if ((Ampu9250WhoAmI() != 113) && (Ampu9250WhoAmI() != 115)) {
1a001382:	f7ff fbff 	bl	1a000b84 <Ampu9250WhoAmI>
1a001386:	2871      	cmp	r0, #113	; 0x71
1a001388:	d004      	beq.n	1a001394 <Ampu9250Init+0x7c>
1a00138a:	f7ff fbfb 	bl	1a000b84 <Ampu9250WhoAmI>
1a00138e:	2873      	cmp	r0, #115	; 0x73
1a001390:	f040 80da 	bne.w	1a001548 <Ampu9250Init+0x230>
	if (Ampu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
1a001394:	2100      	movs	r1, #0
1a001396:	206c      	movs	r0, #108	; 0x6c
1a001398:	f7ff fc04 	bl	1a000ba4 <Ampu9250WriteRegister>
1a00139c:	2800      	cmp	r0, #0
1a00139e:	f2c0 80d6 	blt.w	1a00154e <Ampu9250Init+0x236>
	if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
1a0013a2:	2118      	movs	r1, #24
1a0013a4:	201c      	movs	r0, #28
1a0013a6:	f7ff fbfd 	bl	1a000ba4 <Ampu9250WriteRegister>
1a0013aa:	2800      	cmp	r0, #0
1a0013ac:	f2c0 80d2 	blt.w	1a001554 <Ampu9250Init+0x23c>
	Acontrol._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
1a0013b0:	4b7c      	ldr	r3, [pc, #496]	; (1a0015a4 <Ampu9250Init+0x28c>)
1a0013b2:	4a7e      	ldr	r2, [pc, #504]	; (1a0015ac <Ampu9250Init+0x294>)
1a0013b4:	605a      	str	r2, [r3, #4]
	Acontrol._accelRange = MPU9250_ACCEL_RANGE_16G;
1a0013b6:	2203      	movs	r2, #3
1a0013b8:	f883 2020 	strb.w	r2, [r3, #32]
	if (Ampu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
1a0013bc:	2118      	movs	r1, #24
1a0013be:	201b      	movs	r0, #27
1a0013c0:	f7ff fbf0 	bl	1a000ba4 <Ampu9250WriteRegister>
1a0013c4:	2800      	cmp	r0, #0
1a0013c6:	f2c0 80c8 	blt.w	1a00155a <Ampu9250Init+0x242>
	Acontrol._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R;
1a0013ca:	4b76      	ldr	r3, [pc, #472]	; (1a0015a4 <Ampu9250Init+0x28c>)
1a0013cc:	4a78      	ldr	r2, [pc, #480]	; (1a0015b0 <Ampu9250Init+0x298>)
1a0013ce:	609a      	str	r2, [r3, #8]
	Acontrol._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
1a0013d0:	2203      	movs	r2, #3
1a0013d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (Ampu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a0013d6:	2101      	movs	r1, #1
1a0013d8:	201d      	movs	r0, #29
1a0013da:	f7ff fbe3 	bl	1a000ba4 <Ampu9250WriteRegister>
1a0013de:	2800      	cmp	r0, #0
1a0013e0:	f2c0 80be 	blt.w	1a001560 <Ampu9250Init+0x248>
	if (Ampu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) {
1a0013e4:	2101      	movs	r1, #1
1a0013e6:	201a      	movs	r0, #26
1a0013e8:	f7ff fbdc 	bl	1a000ba4 <Ampu9250WriteRegister>
1a0013ec:	2800      	cmp	r0, #0
1a0013ee:	f2c0 80ba 	blt.w	1a001566 <Ampu9250Init+0x24e>
	Acontrol._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
1a0013f2:	2100      	movs	r1, #0
1a0013f4:	4b6b      	ldr	r3, [pc, #428]	; (1a0015a4 <Ampu9250Init+0x28c>)
1a0013f6:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	if (Ampu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
1a0013fa:	2019      	movs	r0, #25
1a0013fc:	f7ff fbd2 	bl	1a000ba4 <Ampu9250WriteRegister>
1a001400:	2800      	cmp	r0, #0
1a001402:	f2c0 80b3 	blt.w	1a00156c <Ampu9250Init+0x254>
	Acontrol._srd = 0;
1a001406:	4b67      	ldr	r3, [pc, #412]	; (1a0015a4 <Ampu9250Init+0x28c>)
1a001408:	2200      	movs	r2, #0
1a00140a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	if (Ampu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a00140e:	2120      	movs	r1, #32
1a001410:	206a      	movs	r0, #106	; 0x6a
1a001412:	f7ff fbc7 	bl	1a000ba4 <Ampu9250WriteRegister>
1a001416:	2800      	cmp	r0, #0
1a001418:	f2c0 80ab 	blt.w	1a001572 <Ampu9250Init+0x25a>
	if (Ampu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a00141c:	210d      	movs	r1, #13
1a00141e:	2024      	movs	r0, #36	; 0x24
1a001420:	f7ff fbc0 	bl	1a000ba4 <Ampu9250WriteRegister>
1a001424:	2800      	cmp	r0, #0
1a001426:	f2c0 80a7 	blt.w	1a001578 <Ampu9250Init+0x260>
	if (Ampu9250WhoAmIAK8963() != 72) {
1a00142a:	f7ff fc0b 	bl	1a000c44 <Ampu9250WhoAmIAK8963>
1a00142e:	2848      	cmp	r0, #72	; 0x48
1a001430:	f040 80a5 	bne.w	1a00157e <Ampu9250Init+0x266>
	if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a001434:	2100      	movs	r1, #0
1a001436:	200a      	movs	r0, #10
1a001438:	f7ff fc14 	bl	1a000c64 <Ampu9250WriteAK8963Register>
1a00143c:	2800      	cmp	r0, #0
1a00143e:	f2c0 80a1 	blt.w	1a001584 <Ampu9250Init+0x26c>
	vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a001442:	2064      	movs	r0, #100	; 0x64
1a001444:	f001 fa6a 	bl	1a00291c <vTaskDelay>
	if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
1a001448:	210f      	movs	r1, #15
1a00144a:	200a      	movs	r0, #10
1a00144c:	f7ff fc0a 	bl	1a000c64 <Ampu9250WriteAK8963Register>
1a001450:	2800      	cmp	r0, #0
1a001452:	f2c0 809a 	blt.w	1a00158a <Ampu9250Init+0x272>
	vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a001456:	2064      	movs	r0, #100	; 0x64
1a001458:	f001 fa60 	bl	1a00291c <vTaskDelay>
	Ampu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
1a00145c:	2103      	movs	r1, #3
1a00145e:	2010      	movs	r0, #16
1a001460:	f7ff fbc4 	bl	1a000bec <Ampu9250ReadAK8963Registers>
	Acontrol._magScaleX = ((((float) Acontrol._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a001464:	4b4f      	ldr	r3, [pc, #316]	; (1a0015a4 <Ampu9250Init+0x28c>)
1a001466:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
1a00146a:	ee07 2a10 	vmov	s14, r2
1a00146e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a001472:	eddf 4a50 	vldr	s9, [pc, #320]	; 1a0015b4 <Ampu9250Init+0x29c>
1a001476:	ee37 7a64 	vsub.f32	s14, s14, s9
1a00147a:	ed9f 5a4f 	vldr	s10, [pc, #316]	; 1a0015b8 <Ampu9250Init+0x2a0>
1a00147e:	ee27 7a05 	vmul.f32	s14, s14, s10
1a001482:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
1a001486:	ee37 7a25 	vadd.f32	s14, s14, s11
1a00148a:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 1a0015bc <Ampu9250Init+0x2a4>
1a00148e:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a001492:	eddf 6a4b 	vldr	s13, [pc, #300]	; 1a0015c0 <Ampu9250Init+0x2a8>
1a001496:	eec7 7a26 	vdiv.f32	s15, s14, s13
	Acontrol._magScaleX = ((((float) Acontrol._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00149a:	edc3 7a03 	vstr	s15, [r3, #12]
	Acontrol._magScaleY = ((((float) Acontrol._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00149e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a0014a2:	ee07 2a10 	vmov	s14, r2
1a0014a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a0014aa:	ee37 7a64 	vsub.f32	s14, s14, s9
1a0014ae:	ee27 7a05 	vmul.f32	s14, s14, s10
1a0014b2:	ee37 7a25 	vadd.f32	s14, s14, s11
1a0014b6:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a0014ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
	Acontrol._magScaleY = ((((float) Acontrol._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0014be:	edc3 7a04 	vstr	s15, [r3, #16]
	Acontrol._magScaleZ = ((((float) Acontrol._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0014c2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a0014c6:	ee07 2a90 	vmov	s15, r2
1a0014ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a0014ce:	ee77 7ae4 	vsub.f32	s15, s15, s9
1a0014d2:	ee67 7a85 	vmul.f32	s15, s15, s10
1a0014d6:	ee77 7aa5 	vadd.f32	s15, s15, s11
1a0014da:	ee67 7a86 	vmul.f32	s15, s15, s12
			/ 32760.0f; // micro Tesla
1a0014de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	Acontrol._magScaleZ = ((((float) Acontrol._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0014e2:	ed83 7a05 	vstr	s14, [r3, #20]
	if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0014e6:	2100      	movs	r1, #0
1a0014e8:	200a      	movs	r0, #10
1a0014ea:	f7ff fbbb 	bl	1a000c64 <Ampu9250WriteAK8963Register>
1a0014ee:	2800      	cmp	r0, #0
1a0014f0:	db4e      	blt.n	1a001590 <Ampu9250Init+0x278>
	vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a0014f2:	2064      	movs	r0, #100	; 0x64
1a0014f4:	f001 fa12 	bl	1a00291c <vTaskDelay>
	if (Ampu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a0014f8:	2116      	movs	r1, #22
1a0014fa:	200a      	movs	r0, #10
1a0014fc:	f7ff fbb2 	bl	1a000c64 <Ampu9250WriteAK8963Register>
1a001500:	2800      	cmp	r0, #0
1a001502:	db48      	blt.n	1a001596 <Ampu9250Init+0x27e>
	vTaskDelay( 100 / portTICK_RATE_MS );//delay(100); // long wait between AK8963 mode changes
1a001504:	2064      	movs	r0, #100	; 0x64
1a001506:	f001 fa09 	bl	1a00291c <vTaskDelay>
	if (Ampu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a00150a:	2101      	movs	r1, #1
1a00150c:	206b      	movs	r0, #107	; 0x6b
1a00150e:	f7ff fb49 	bl	1a000ba4 <Ampu9250WriteRegister>
1a001512:	2800      	cmp	r0, #0
1a001514:	db42      	blt.n	1a00159c <Ampu9250Init+0x284>
	Ampu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a001516:	2107      	movs	r1, #7
1a001518:	2003      	movs	r0, #3
1a00151a:	f7ff fb67 	bl	1a000bec <Ampu9250ReadAK8963Registers>
	if (Ampu9250CalibrateGyro() < 0) {
1a00151e:	f7ff fe4f 	bl	1a0011c0 <Ampu9250CalibrateGyro>
1a001522:	2800      	cmp	r0, #0
1a001524:	db01      	blt.n	1a00152a <Ampu9250Init+0x212>
	return 1;
1a001526:	2001      	movs	r0, #1
}
1a001528:	bd10      	pop	{r4, pc}
		return -20;
1a00152a:	f06f 0013 	mvn.w	r0, #19
1a00152e:	e7fb      	b.n	1a001528 <Ampu9250Init+0x210>
		return -1;
1a001530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001534:	e7f8      	b.n	1a001528 <Ampu9250Init+0x210>
		return -2;
1a001536:	f06f 0001 	mvn.w	r0, #1
1a00153a:	e7f5      	b.n	1a001528 <Ampu9250Init+0x210>
		return -3;
1a00153c:	f06f 0002 	mvn.w	r0, #2
1a001540:	e7f2      	b.n	1a001528 <Ampu9250Init+0x210>
		return -4;
1a001542:	f06f 0003 	mvn.w	r0, #3
1a001546:	e7ef      	b.n	1a001528 <Ampu9250Init+0x210>
		return -5;
1a001548:	f06f 0004 	mvn.w	r0, #4
1a00154c:	e7ec      	b.n	1a001528 <Ampu9250Init+0x210>
		return -6;
1a00154e:	f06f 0005 	mvn.w	r0, #5
1a001552:	e7e9      	b.n	1a001528 <Ampu9250Init+0x210>
		return -7;
1a001554:	f06f 0006 	mvn.w	r0, #6
1a001558:	e7e6      	b.n	1a001528 <Ampu9250Init+0x210>
		return -8;
1a00155a:	f06f 0007 	mvn.w	r0, #7
1a00155e:	e7e3      	b.n	1a001528 <Ampu9250Init+0x210>
		return -9;
1a001560:	f06f 0008 	mvn.w	r0, #8
1a001564:	e7e0      	b.n	1a001528 <Ampu9250Init+0x210>
		return -10;
1a001566:	f06f 0009 	mvn.w	r0, #9
1a00156a:	e7dd      	b.n	1a001528 <Ampu9250Init+0x210>
		return -11;
1a00156c:	f06f 000a 	mvn.w	r0, #10
1a001570:	e7da      	b.n	1a001528 <Ampu9250Init+0x210>
		return -12;
1a001572:	f06f 000b 	mvn.w	r0, #11
1a001576:	e7d7      	b.n	1a001528 <Ampu9250Init+0x210>
		return -13;
1a001578:	f06f 000c 	mvn.w	r0, #12
1a00157c:	e7d4      	b.n	1a001528 <Ampu9250Init+0x210>
		return -14;
1a00157e:	f06f 000d 	mvn.w	r0, #13
1a001582:	e7d1      	b.n	1a001528 <Ampu9250Init+0x210>
		return -15;
1a001584:	f06f 000e 	mvn.w	r0, #14
1a001588:	e7ce      	b.n	1a001528 <Ampu9250Init+0x210>
		return -16;
1a00158a:	f06f 000f 	mvn.w	r0, #15
1a00158e:	e7cb      	b.n	1a001528 <Ampu9250Init+0x210>
		return -17;
1a001590:	f06f 0010 	mvn.w	r0, #16
1a001594:	e7c8      	b.n	1a001528 <Ampu9250Init+0x210>
		return -18;
1a001596:	f06f 0011 	mvn.w	r0, #17
1a00159a:	e7c5      	b.n	1a001528 <Ampu9250Init+0x210>
		return -19;
1a00159c:	f06f 0012 	mvn.w	r0, #18
1a0015a0:	e7c2      	b.n	1a001528 <Ampu9250Init+0x210>
1a0015a2:	bf00      	nop
1a0015a4:	100000e0 	.word	0x100000e0
1a0015a8:	00061a80 	.word	0x00061a80
1a0015ac:	3b9cea16 	.word	0x3b9cea16
1a0015b0:	3a8ba0e4 	.word	0x3a8ba0e4
1a0015b4:	43000000 	.word	0x43000000
1a0015b8:	3b800000 	.word	0x3b800000
1a0015bc:	45998000 	.word	0x45998000
1a0015c0:	46fff000 	.word	0x46fff000

1a0015c4 <Ampu9250GetMagX_uT>:

// Returns the magnetometer measurement in the x direction, uT
float Ampu9250GetMagX_uT( void )
{
  return Acontrol._hx;
}
1a0015c4:	4b01      	ldr	r3, [pc, #4]	; (1a0015cc <Ampu9250GetMagX_uT+0x8>)
1a0015c6:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
1a0015ca:	4770      	bx	lr
1a0015cc:	100000e0 	.word	0x100000e0

1a0015d0 <Ampu9250GetMagY_uT>:

// Returns the magnetometer measurement in the y direction, uT
float Ampu9250GetMagY_uT( void )
{
  return Acontrol._hy;
}
1a0015d0:	4b01      	ldr	r3, [pc, #4]	; (1a0015d8 <Ampu9250GetMagY_uT+0x8>)
1a0015d2:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
1a0015d6:	4770      	bx	lr
1a0015d8:	100000e0 	.word	0x100000e0

1a0015dc <Ampu9250GetMagZ_uT>:

// Returns the magnetometer measurement in the z direction, uT
float Ampu9250GetMagZ_uT( void )
{
  return Acontrol._hz;
}
1a0015dc:	4b01      	ldr	r3, [pc, #4]	; (1a0015e4 <Ampu9250GetMagZ_uT+0x8>)
1a0015de:	ed93 0a17 	vldr	s0, [r3, #92]	; 0x5c
1a0015e2:	4770      	bx	lr
1a0015e4:	100000e0 	.word	0x100000e0

1a0015e8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a0015e8:	b538      	push	{r3, r4, r5, lr}
1a0015ea:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a0015ec:	f010 0f07 	tst.w	r0, #7
1a0015f0:	d002      	beq.n	1a0015f8 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0015f2:	f020 0407 	bic.w	r4, r0, #7
1a0015f6:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0015f8:	f001 f82a 	bl	1a002650 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0015fc:	4b13      	ldr	r3, [pc, #76]	; (1a00164c <pvPortMalloc+0x64>)
1a0015fe:	681b      	ldr	r3, [r3, #0]
1a001600:	b17b      	cbz	r3, 1a001622 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a001602:	4b13      	ldr	r3, [pc, #76]	; (1a001650 <pvPortMalloc+0x68>)
1a001604:	681b      	ldr	r3, [r3, #0]
1a001606:	441c      	add	r4, r3
1a001608:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a00160c:	4294      	cmp	r4, r2
1a00160e:	d80e      	bhi.n	1a00162e <pvPortMalloc+0x46>
1a001610:	42a3      	cmp	r3, r4
1a001612:	d310      	bcc.n	1a001636 <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a001614:	f001 f8b6 	bl	1a002784 <xTaskResumeAll>
void *pvReturn = NULL;
1a001618:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a00161a:	f000 fdd6 	bl	1a0021ca <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a00161e:	4628      	mov	r0, r5
1a001620:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a001622:	4b0c      	ldr	r3, [pc, #48]	; (1a001654 <pvPortMalloc+0x6c>)
1a001624:	f023 0307 	bic.w	r3, r3, #7
1a001628:	4a08      	ldr	r2, [pc, #32]	; (1a00164c <pvPortMalloc+0x64>)
1a00162a:	6013      	str	r3, [r2, #0]
1a00162c:	e7e9      	b.n	1a001602 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a00162e:	f001 f8a9 	bl	1a002784 <xTaskResumeAll>
void *pvReturn = NULL;
1a001632:	2500      	movs	r5, #0
1a001634:	e7f1      	b.n	1a00161a <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a001636:	4a05      	ldr	r2, [pc, #20]	; (1a00164c <pvPortMalloc+0x64>)
1a001638:	6815      	ldr	r5, [r2, #0]
1a00163a:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a00163c:	4b04      	ldr	r3, [pc, #16]	; (1a001650 <pvPortMalloc+0x68>)
1a00163e:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a001640:	f001 f8a0 	bl	1a002784 <xTaskResumeAll>
		if( pvReturn == NULL )
1a001644:	2d00      	cmp	r5, #0
1a001646:	d1ea      	bne.n	1a00161e <pvPortMalloc+0x36>
1a001648:	e7e7      	b.n	1a00161a <pvPortMalloc+0x32>
1a00164a:	bf00      	nop
1a00164c:	10000238 	.word	0x10000238
1a001650:	1000223c 	.word	0x1000223c
1a001654:	10000244 	.word	0x10000244

1a001658 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a001658:	b140      	cbz	r0, 1a00166c <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00165a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00165e:	f383 8811 	msr	BASEPRI, r3
1a001662:	f3bf 8f6f 	isb	sy
1a001666:	f3bf 8f4f 	dsb	sy
1a00166a:	e7fe      	b.n	1a00166a <vPortFree+0x12>
}
1a00166c:	4770      	bx	lr

1a00166e <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a00166e:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a001670:	b123      	cbz	r3, 1a00167c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a001672:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a001674:	6818      	ldr	r0, [r3, #0]
1a001676:	f1c0 0007 	rsb	r0, r0, #7
1a00167a:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a00167c:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a00167e:	4770      	bx	lr

1a001680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a001680:	b510      	push	{r4, lr}
1a001682:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a001684:	f001 fe9e 	bl	1a0033c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a001688:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00168a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00168c:	429a      	cmp	r2, r3
1a00168e:	d004      	beq.n	1a00169a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a001690:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a001692:	f001 feb9 	bl	1a003408 <vPortExitCritical>

	return xReturn;
}
1a001696:	4620      	mov	r0, r4
1a001698:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00169a:	2401      	movs	r4, #1
1a00169c:	e7f9      	b.n	1a001692 <prvIsQueueFull+0x12>

1a00169e <prvIsQueueEmpty>:
{
1a00169e:	b510      	push	{r4, lr}
1a0016a0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0016a2:	f001 fe8f 	bl	1a0033c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0016a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0016a8:	b123      	cbz	r3, 1a0016b4 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0016aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0016ac:	f001 feac 	bl	1a003408 <vPortExitCritical>
}
1a0016b0:	4620      	mov	r0, r4
1a0016b2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0016b4:	2401      	movs	r4, #1
1a0016b6:	e7f9      	b.n	1a0016ac <prvIsQueueEmpty+0xe>

1a0016b8 <prvCopyDataToQueue>:
{
1a0016b8:	b570      	push	{r4, r5, r6, lr}
1a0016ba:	4604      	mov	r4, r0
1a0016bc:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0016be:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0016c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0016c2:	b95a      	cbnz	r2, 1a0016dc <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0016c4:	6803      	ldr	r3, [r0, #0]
1a0016c6:	b11b      	cbz	r3, 1a0016d0 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0016c8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0016ca:	3501      	adds	r5, #1
1a0016cc:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0016ce:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0016d0:	6840      	ldr	r0, [r0, #4]
1a0016d2:	f001 fae5 	bl	1a002ca0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0016d6:	2300      	movs	r3, #0
1a0016d8:	6063      	str	r3, [r4, #4]
1a0016da:	e7f6      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0016dc:	b96e      	cbnz	r6, 1a0016fa <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0016de:	6880      	ldr	r0, [r0, #8]
1a0016e0:	f004 f84a 	bl	1a005778 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0016e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0016e6:	68a3      	ldr	r3, [r4, #8]
1a0016e8:	4413      	add	r3, r2
1a0016ea:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0016ec:	6862      	ldr	r2, [r4, #4]
1a0016ee:	4293      	cmp	r3, r2
1a0016f0:	d319      	bcc.n	1a001726 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0016f2:	6823      	ldr	r3, [r4, #0]
1a0016f4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0016f6:	2000      	movs	r0, #0
1a0016f8:	e7e7      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0016fa:	68c0      	ldr	r0, [r0, #12]
1a0016fc:	f004 f83c 	bl	1a005778 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001700:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a001702:	4252      	negs	r2, r2
1a001704:	68e3      	ldr	r3, [r4, #12]
1a001706:	4413      	add	r3, r2
1a001708:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00170a:	6821      	ldr	r1, [r4, #0]
1a00170c:	428b      	cmp	r3, r1
1a00170e:	d202      	bcs.n	1a001716 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001710:	6863      	ldr	r3, [r4, #4]
1a001712:	441a      	add	r2, r3
1a001714:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a001716:	2e02      	cmp	r6, #2
1a001718:	d001      	beq.n	1a00171e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00171a:	2000      	movs	r0, #0
1a00171c:	e7d5      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00171e:	b125      	cbz	r5, 1a00172a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001720:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001722:	2000      	movs	r0, #0
1a001724:	e7d1      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
1a001726:	2000      	movs	r0, #0
1a001728:	e7cf      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
1a00172a:	2000      	movs	r0, #0
1a00172c:	e7cd      	b.n	1a0016ca <prvCopyDataToQueue+0x12>

1a00172e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a00172e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001730:	b172      	cbz	r2, 1a001750 <prvCopyDataFromQueue+0x22>
{
1a001732:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a001734:	68c3      	ldr	r3, [r0, #12]
1a001736:	4413      	add	r3, r2
1a001738:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00173a:	6844      	ldr	r4, [r0, #4]
1a00173c:	42a3      	cmp	r3, r4
1a00173e:	d301      	bcc.n	1a001744 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001740:	6803      	ldr	r3, [r0, #0]
1a001742:	60c3      	str	r3, [r0, #12]
1a001744:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a001746:	68c1      	ldr	r1, [r0, #12]
1a001748:	4620      	mov	r0, r4
1a00174a:	f004 f815 	bl	1a005778 <memcpy>
}
1a00174e:	bd10      	pop	{r4, pc}
1a001750:	4770      	bx	lr

1a001752 <prvUnlockQueue>:
{
1a001752:	b538      	push	{r3, r4, r5, lr}
1a001754:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a001756:	f001 fe35 	bl	1a0033c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00175a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a00175e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001760:	e003      	b.n	1a00176a <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a001762:	f001 fa2b 	bl	1a002bbc <vTaskMissedYield>
			--cTxLock;
1a001766:	3c01      	subs	r4, #1
1a001768:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00176a:	2c00      	cmp	r4, #0
1a00176c:	dd08      	ble.n	1a001780 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00176e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001770:	b133      	cbz	r3, 1a001780 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001772:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a001776:	f001 f98f 	bl	1a002a98 <xTaskRemoveFromEventList>
1a00177a:	2800      	cmp	r0, #0
1a00177c:	d0f3      	beq.n	1a001766 <prvUnlockQueue+0x14>
1a00177e:	e7f0      	b.n	1a001762 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001780:	23ff      	movs	r3, #255	; 0xff
1a001782:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a001786:	f001 fe3f 	bl	1a003408 <vPortExitCritical>
	taskENTER_CRITICAL();
1a00178a:	f001 fe1b 	bl	1a0033c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00178e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a001792:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001794:	e003      	b.n	1a00179e <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a001796:	f001 fa11 	bl	1a002bbc <vTaskMissedYield>
				--cRxLock;
1a00179a:	3c01      	subs	r4, #1
1a00179c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00179e:	2c00      	cmp	r4, #0
1a0017a0:	dd08      	ble.n	1a0017b4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0017a2:	692b      	ldr	r3, [r5, #16]
1a0017a4:	b133      	cbz	r3, 1a0017b4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0017a6:	f105 0010 	add.w	r0, r5, #16
1a0017aa:	f001 f975 	bl	1a002a98 <xTaskRemoveFromEventList>
1a0017ae:	2800      	cmp	r0, #0
1a0017b0:	d0f3      	beq.n	1a00179a <prvUnlockQueue+0x48>
1a0017b2:	e7f0      	b.n	1a001796 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0017b4:	23ff      	movs	r3, #255	; 0xff
1a0017b6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0017ba:	f001 fe25 	bl	1a003408 <vPortExitCritical>
}
1a0017be:	bd38      	pop	{r3, r4, r5, pc}

1a0017c0 <xQueueGenericReset>:
{
1a0017c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0017c2:	b940      	cbnz	r0, 1a0017d6 <xQueueGenericReset+0x16>
1a0017c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017c8:	f383 8811 	msr	BASEPRI, r3
1a0017cc:	f3bf 8f6f 	isb	sy
1a0017d0:	f3bf 8f4f 	dsb	sy
1a0017d4:	e7fe      	b.n	1a0017d4 <xQueueGenericReset+0x14>
1a0017d6:	4604      	mov	r4, r0
1a0017d8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0017da:	f001 fdf3 	bl	1a0033c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0017de:	6821      	ldr	r1, [r4, #0]
1a0017e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0017e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0017e4:	fb03 1002 	mla	r0, r3, r2, r1
1a0017e8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0017ea:	2000      	movs	r0, #0
1a0017ec:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0017ee:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0017f0:	3a01      	subs	r2, #1
1a0017f2:	fb02 1303 	mla	r3, r2, r3, r1
1a0017f6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0017f8:	23ff      	movs	r3, #255	; 0xff
1a0017fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0017fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a001802:	b9a5      	cbnz	r5, 1a00182e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001804:	6923      	ldr	r3, [r4, #16]
1a001806:	b91b      	cbnz	r3, 1a001810 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a001808:	f001 fdfe 	bl	1a003408 <vPortExitCritical>
}
1a00180c:	2001      	movs	r0, #1
1a00180e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001810:	f104 0010 	add.w	r0, r4, #16
1a001814:	f001 f940 	bl	1a002a98 <xTaskRemoveFromEventList>
1a001818:	2800      	cmp	r0, #0
1a00181a:	d0f5      	beq.n	1a001808 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a00181c:	4b08      	ldr	r3, [pc, #32]	; (1a001840 <xQueueGenericReset+0x80>)
1a00181e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001822:	601a      	str	r2, [r3, #0]
1a001824:	f3bf 8f4f 	dsb	sy
1a001828:	f3bf 8f6f 	isb	sy
1a00182c:	e7ec      	b.n	1a001808 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a00182e:	f104 0010 	add.w	r0, r4, #16
1a001832:	f000 fc68 	bl	1a002106 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a001836:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00183a:	f000 fc64 	bl	1a002106 <vListInitialise>
1a00183e:	e7e3      	b.n	1a001808 <xQueueGenericReset+0x48>
1a001840:	e000ed04 	.word	0xe000ed04

1a001844 <prvInitialiseNewQueue>:
{
1a001844:	b538      	push	{r3, r4, r5, lr}
1a001846:	461d      	mov	r5, r3
1a001848:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00184a:	460b      	mov	r3, r1
1a00184c:	b149      	cbz	r1, 1a001862 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a00184e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001850:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a001852:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a001854:	2101      	movs	r1, #1
1a001856:	4620      	mov	r0, r4
1a001858:	f7ff ffb2 	bl	1a0017c0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a00185c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001860:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a001862:	6024      	str	r4, [r4, #0]
1a001864:	e7f4      	b.n	1a001850 <prvInitialiseNewQueue+0xc>

1a001866 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a001866:	b940      	cbnz	r0, 1a00187a <xQueueGenericCreateStatic+0x14>
1a001868:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00186c:	f383 8811 	msr	BASEPRI, r3
1a001870:	f3bf 8f6f 	isb	sy
1a001874:	f3bf 8f4f 	dsb	sy
1a001878:	e7fe      	b.n	1a001878 <xQueueGenericCreateStatic+0x12>
	{
1a00187a:	b510      	push	{r4, lr}
1a00187c:	b084      	sub	sp, #16
1a00187e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001880:	b153      	cbz	r3, 1a001898 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a001882:	b192      	cbz	r2, 1a0018aa <xQueueGenericCreateStatic+0x44>
1a001884:	b989      	cbnz	r1, 1a0018aa <xQueueGenericCreateStatic+0x44>
1a001886:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00188a:	f383 8811 	msr	BASEPRI, r3
1a00188e:	f3bf 8f6f 	isb	sy
1a001892:	f3bf 8f4f 	dsb	sy
1a001896:	e7fe      	b.n	1a001896 <xQueueGenericCreateStatic+0x30>
1a001898:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00189c:	f383 8811 	msr	BASEPRI, r3
1a0018a0:	f3bf 8f6f 	isb	sy
1a0018a4:	f3bf 8f4f 	dsb	sy
1a0018a8:	e7fe      	b.n	1a0018a8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0018aa:	b94a      	cbnz	r2, 1a0018c0 <xQueueGenericCreateStatic+0x5a>
1a0018ac:	b141      	cbz	r1, 1a0018c0 <xQueueGenericCreateStatic+0x5a>
1a0018ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018b2:	f383 8811 	msr	BASEPRI, r3
1a0018b6:	f3bf 8f6f 	isb	sy
1a0018ba:	f3bf 8f4f 	dsb	sy
1a0018be:	e7fe      	b.n	1a0018be <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0018c0:	2050      	movs	r0, #80	; 0x50
1a0018c2:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0018c4:	9803      	ldr	r0, [sp, #12]
1a0018c6:	2850      	cmp	r0, #80	; 0x50
1a0018c8:	d008      	beq.n	1a0018dc <xQueueGenericCreateStatic+0x76>
1a0018ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ce:	f383 8811 	msr	BASEPRI, r3
1a0018d2:	f3bf 8f6f 	isb	sy
1a0018d6:	f3bf 8f4f 	dsb	sy
1a0018da:	e7fe      	b.n	1a0018da <xQueueGenericCreateStatic+0x74>
1a0018dc:	4620      	mov	r0, r4
1a0018de:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0018e0:	2301      	movs	r3, #1
1a0018e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0018e6:	9400      	str	r4, [sp, #0]
1a0018e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0018ec:	f7ff ffaa 	bl	1a001844 <prvInitialiseNewQueue>
	}
1a0018f0:	4620      	mov	r0, r4
1a0018f2:	b004      	add	sp, #16
1a0018f4:	bd10      	pop	{r4, pc}

1a0018f6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0018f6:	b940      	cbnz	r0, 1a00190a <xQueueGenericCreate+0x14>
1a0018f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018fc:	f383 8811 	msr	BASEPRI, r3
1a001900:	f3bf 8f6f 	isb	sy
1a001904:	f3bf 8f4f 	dsb	sy
1a001908:	e7fe      	b.n	1a001908 <xQueueGenericCreate+0x12>
	{
1a00190a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00190c:	b083      	sub	sp, #12
1a00190e:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001910:	b111      	cbz	r1, 1a001918 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001912:	fb01 f000 	mul.w	r0, r1, r0
1a001916:	e000      	b.n	1a00191a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a001918:	2000      	movs	r0, #0
1a00191a:	4617      	mov	r7, r2
1a00191c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a00191e:	3050      	adds	r0, #80	; 0x50
1a001920:	f7ff fe62 	bl	1a0015e8 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a001924:	4605      	mov	r5, r0
1a001926:	b150      	cbz	r0, 1a00193e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a001928:	2300      	movs	r3, #0
1a00192a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00192e:	9000      	str	r0, [sp, #0]
1a001930:	463b      	mov	r3, r7
1a001932:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a001936:	4621      	mov	r1, r4
1a001938:	4630      	mov	r0, r6
1a00193a:	f7ff ff83 	bl	1a001844 <prvInitialiseNewQueue>
	}
1a00193e:	4628      	mov	r0, r5
1a001940:	b003      	add	sp, #12
1a001942:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a001944 <xQueueGenericSend>:
{
1a001944:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001946:	b085      	sub	sp, #20
1a001948:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a00194a:	b160      	cbz	r0, 1a001966 <xQueueGenericSend+0x22>
1a00194c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00194e:	b999      	cbnz	r1, 1a001978 <xQueueGenericSend+0x34>
1a001950:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001952:	b18a      	cbz	r2, 1a001978 <xQueueGenericSend+0x34>
1a001954:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001958:	f383 8811 	msr	BASEPRI, r3
1a00195c:	f3bf 8f6f 	isb	sy
1a001960:	f3bf 8f4f 	dsb	sy
1a001964:	e7fe      	b.n	1a001964 <xQueueGenericSend+0x20>
1a001966:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00196a:	f383 8811 	msr	BASEPRI, r3
1a00196e:	f3bf 8f6f 	isb	sy
1a001972:	f3bf 8f4f 	dsb	sy
1a001976:	e7fe      	b.n	1a001976 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001978:	2b02      	cmp	r3, #2
1a00197a:	d10b      	bne.n	1a001994 <xQueueGenericSend+0x50>
1a00197c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00197e:	2a01      	cmp	r2, #1
1a001980:	d008      	beq.n	1a001994 <xQueueGenericSend+0x50>
1a001982:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001986:	f383 8811 	msr	BASEPRI, r3
1a00198a:	f3bf 8f6f 	isb	sy
1a00198e:	f3bf 8f4f 	dsb	sy
1a001992:	e7fe      	b.n	1a001992 <xQueueGenericSend+0x4e>
1a001994:	461e      	mov	r6, r3
1a001996:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001998:	f001 f916 	bl	1a002bc8 <xTaskGetSchedulerState>
1a00199c:	b950      	cbnz	r0, 1a0019b4 <xQueueGenericSend+0x70>
1a00199e:	9b01      	ldr	r3, [sp, #4]
1a0019a0:	b153      	cbz	r3, 1a0019b8 <xQueueGenericSend+0x74>
1a0019a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019a6:	f383 8811 	msr	BASEPRI, r3
1a0019aa:	f3bf 8f6f 	isb	sy
1a0019ae:	f3bf 8f4f 	dsb	sy
1a0019b2:	e7fe      	b.n	1a0019b2 <xQueueGenericSend+0x6e>
1a0019b4:	2500      	movs	r5, #0
1a0019b6:	e03a      	b.n	1a001a2e <xQueueGenericSend+0xea>
1a0019b8:	2500      	movs	r5, #0
1a0019ba:	e038      	b.n	1a001a2e <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0019bc:	4632      	mov	r2, r6
1a0019be:	4639      	mov	r1, r7
1a0019c0:	4620      	mov	r0, r4
1a0019c2:	f7ff fe79 	bl	1a0016b8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0019c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0019c8:	b94b      	cbnz	r3, 1a0019de <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a0019ca:	b1a8      	cbz	r0, 1a0019f8 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0019cc:	4b3b      	ldr	r3, [pc, #236]	; (1a001abc <xQueueGenericSend+0x178>)
1a0019ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019d2:	601a      	str	r2, [r3, #0]
1a0019d4:	f3bf 8f4f 	dsb	sy
1a0019d8:	f3bf 8f6f 	isb	sy
1a0019dc:	e00c      	b.n	1a0019f8 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0019de:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0019e2:	f001 f859 	bl	1a002a98 <xTaskRemoveFromEventList>
1a0019e6:	b138      	cbz	r0, 1a0019f8 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a0019e8:	4b34      	ldr	r3, [pc, #208]	; (1a001abc <xQueueGenericSend+0x178>)
1a0019ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019ee:	601a      	str	r2, [r3, #0]
1a0019f0:	f3bf 8f4f 	dsb	sy
1a0019f4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0019f8:	f001 fd06 	bl	1a003408 <vPortExitCritical>
				return pdPASS;
1a0019fc:	2001      	movs	r0, #1
}
1a0019fe:	b005      	add	sp, #20
1a001a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a001a02:	f001 fd01 	bl	1a003408 <vPortExitCritical>
					return errQUEUE_FULL;
1a001a06:	2000      	movs	r0, #0
1a001a08:	e7f9      	b.n	1a0019fe <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001a0a:	a802      	add	r0, sp, #8
1a001a0c:	f001 f88a 	bl	1a002b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001a10:	2501      	movs	r5, #1
1a001a12:	e019      	b.n	1a001a48 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a001a14:	2300      	movs	r3, #0
1a001a16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001a1a:	e021      	b.n	1a001a60 <xQueueGenericSend+0x11c>
1a001a1c:	2300      	movs	r3, #0
1a001a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001a22:	e023      	b.n	1a001a6c <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a001a24:	4620      	mov	r0, r4
1a001a26:	f7ff fe94 	bl	1a001752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001a2a:	f000 feab 	bl	1a002784 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001a2e:	f001 fcc9 	bl	1a0033c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001a32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001a34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001a36:	429a      	cmp	r2, r3
1a001a38:	d3c0      	bcc.n	1a0019bc <xQueueGenericSend+0x78>
1a001a3a:	2e02      	cmp	r6, #2
1a001a3c:	d0be      	beq.n	1a0019bc <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001a3e:	9b01      	ldr	r3, [sp, #4]
1a001a40:	2b00      	cmp	r3, #0
1a001a42:	d0de      	beq.n	1a001a02 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a001a44:	2d00      	cmp	r5, #0
1a001a46:	d0e0      	beq.n	1a001a0a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a001a48:	f001 fcde 	bl	1a003408 <vPortExitCritical>
		vTaskSuspendAll();
1a001a4c:	f000 fe00 	bl	1a002650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001a50:	f001 fcb8 	bl	1a0033c4 <vPortEnterCritical>
1a001a54:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001a58:	b25b      	sxtb	r3, r3
1a001a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a5e:	d0d9      	beq.n	1a001a14 <xQueueGenericSend+0xd0>
1a001a60:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001a64:	b25b      	sxtb	r3, r3
1a001a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a6a:	d0d7      	beq.n	1a001a1c <xQueueGenericSend+0xd8>
1a001a6c:	f001 fccc 	bl	1a003408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001a70:	a901      	add	r1, sp, #4
1a001a72:	a802      	add	r0, sp, #8
1a001a74:	f001 f862 	bl	1a002b3c <xTaskCheckForTimeOut>
1a001a78:	b9c8      	cbnz	r0, 1a001aae <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001a7a:	4620      	mov	r0, r4
1a001a7c:	f7ff fe00 	bl	1a001680 <prvIsQueueFull>
1a001a80:	2800      	cmp	r0, #0
1a001a82:	d0cf      	beq.n	1a001a24 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001a84:	9901      	ldr	r1, [sp, #4]
1a001a86:	f104 0010 	add.w	r0, r4, #16
1a001a8a:	f000 ffd1 	bl	1a002a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001a8e:	4620      	mov	r0, r4
1a001a90:	f7ff fe5f 	bl	1a001752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001a94:	f000 fe76 	bl	1a002784 <xTaskResumeAll>
1a001a98:	2800      	cmp	r0, #0
1a001a9a:	d1c8      	bne.n	1a001a2e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001a9c:	4b07      	ldr	r3, [pc, #28]	; (1a001abc <xQueueGenericSend+0x178>)
1a001a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001aa2:	601a      	str	r2, [r3, #0]
1a001aa4:	f3bf 8f4f 	dsb	sy
1a001aa8:	f3bf 8f6f 	isb	sy
1a001aac:	e7bf      	b.n	1a001a2e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a001aae:	4620      	mov	r0, r4
1a001ab0:	f7ff fe4f 	bl	1a001752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001ab4:	f000 fe66 	bl	1a002784 <xTaskResumeAll>
			return errQUEUE_FULL;
1a001ab8:	2000      	movs	r0, #0
1a001aba:	e7a0      	b.n	1a0019fe <xQueueGenericSend+0xba>
1a001abc:	e000ed04 	.word	0xe000ed04

1a001ac0 <xQueueGenericSendFromISR>:
{
1a001ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001ac4:	b160      	cbz	r0, 1a001ae0 <xQueueGenericSendFromISR+0x20>
1a001ac6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001ac8:	b999      	cbnz	r1, 1a001af2 <xQueueGenericSendFromISR+0x32>
1a001aca:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001acc:	b188      	cbz	r0, 1a001af2 <xQueueGenericSendFromISR+0x32>
1a001ace:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ad2:	f383 8811 	msr	BASEPRI, r3
1a001ad6:	f3bf 8f6f 	isb	sy
1a001ada:	f3bf 8f4f 	dsb	sy
1a001ade:	e7fe      	b.n	1a001ade <xQueueGenericSendFromISR+0x1e>
1a001ae0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ae4:	f383 8811 	msr	BASEPRI, r3
1a001ae8:	f3bf 8f6f 	isb	sy
1a001aec:	f3bf 8f4f 	dsb	sy
1a001af0:	e7fe      	b.n	1a001af0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001af2:	2b02      	cmp	r3, #2
1a001af4:	d10b      	bne.n	1a001b0e <xQueueGenericSendFromISR+0x4e>
1a001af6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001af8:	2801      	cmp	r0, #1
1a001afa:	d008      	beq.n	1a001b0e <xQueueGenericSendFromISR+0x4e>
1a001afc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b00:	f383 8811 	msr	BASEPRI, r3
1a001b04:	f3bf 8f6f 	isb	sy
1a001b08:	f3bf 8f4f 	dsb	sy
1a001b0c:	e7fe      	b.n	1a001b0c <xQueueGenericSendFromISR+0x4c>
1a001b0e:	461f      	mov	r7, r3
1a001b10:	4690      	mov	r8, r2
1a001b12:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001b14:	f001 fd80 	bl	1a003618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001b18:	f3ef 8611 	mrs	r6, BASEPRI
1a001b1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b20:	f383 8811 	msr	BASEPRI, r3
1a001b24:	f3bf 8f6f 	isb	sy
1a001b28:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001b2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001b2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001b30:	429a      	cmp	r2, r3
1a001b32:	d303      	bcc.n	1a001b3c <xQueueGenericSendFromISR+0x7c>
1a001b34:	2f02      	cmp	r7, #2
1a001b36:	d001      	beq.n	1a001b3c <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a001b38:	2000      	movs	r0, #0
1a001b3a:	e00f      	b.n	1a001b5c <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001b3c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001b40:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001b42:	463a      	mov	r2, r7
1a001b44:	4649      	mov	r1, r9
1a001b46:	4620      	mov	r0, r4
1a001b48:	f7ff fdb6 	bl	1a0016b8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001b4c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001b50:	d008      	beq.n	1a001b64 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001b52:	1c6b      	adds	r3, r5, #1
1a001b54:	b25b      	sxtb	r3, r3
1a001b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001b5a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001b5c:	f386 8811 	msr	BASEPRI, r6
}
1a001b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001b66:	b15b      	cbz	r3, 1a001b80 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001b68:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001b6c:	f000 ff94 	bl	1a002a98 <xTaskRemoveFromEventList>
1a001b70:	b140      	cbz	r0, 1a001b84 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a001b72:	f1b8 0f00 	cmp.w	r8, #0
1a001b76:	d007      	beq.n	1a001b88 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001b78:	2001      	movs	r0, #1
1a001b7a:	f8c8 0000 	str.w	r0, [r8]
1a001b7e:	e7ed      	b.n	1a001b5c <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a001b80:	2001      	movs	r0, #1
1a001b82:	e7eb      	b.n	1a001b5c <xQueueGenericSendFromISR+0x9c>
1a001b84:	2001      	movs	r0, #1
1a001b86:	e7e9      	b.n	1a001b5c <xQueueGenericSendFromISR+0x9c>
1a001b88:	2001      	movs	r0, #1
1a001b8a:	e7e7      	b.n	1a001b5c <xQueueGenericSendFromISR+0x9c>

1a001b8c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
1a001b8c:	b160      	cbz	r0, 1a001ba8 <xQueueGiveFromISR+0x1c>
{
1a001b8e:	b570      	push	{r4, r5, r6, lr}
1a001b90:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001b92:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001b94:	b18b      	cbz	r3, 1a001bba <xQueueGiveFromISR+0x2e>
	__asm volatile
1a001b96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b9a:	f383 8811 	msr	BASEPRI, r3
1a001b9e:	f3bf 8f6f 	isb	sy
1a001ba2:	f3bf 8f4f 	dsb	sy
1a001ba6:	e7fe      	b.n	1a001ba6 <xQueueGiveFromISR+0x1a>
1a001ba8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bac:	f383 8811 	msr	BASEPRI, r3
1a001bb0:	f3bf 8f6f 	isb	sy
1a001bb4:	f3bf 8f4f 	dsb	sy
1a001bb8:	e7fe      	b.n	1a001bb8 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a001bba:	6803      	ldr	r3, [r0, #0]
1a001bbc:	b32b      	cbz	r3, 1a001c0a <xQueueGiveFromISR+0x7e>
1a001bbe:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001bc0:	f001 fd2a 	bl	1a003618 <vPortValidateInterruptPriority>
	__asm volatile
1a001bc4:	f3ef 8511 	mrs	r5, BASEPRI
1a001bc8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bcc:	f383 8811 	msr	BASEPRI, r3
1a001bd0:	f3bf 8f6f 	isb	sy
1a001bd4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001bd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
1a001bda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001bdc:	4293      	cmp	r3, r2
1a001bde:	d926      	bls.n	1a001c2e <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001be0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001be4:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a001be6:	3201      	adds	r2, #1
1a001be8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
1a001bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bee:	d118      	bne.n	1a001c22 <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001bf2:	b1f3      	cbz	r3, 1a001c32 <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001bf4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001bf8:	f000 ff4e 	bl	1a002a98 <xTaskRemoveFromEventList>
1a001bfc:	b1d8      	cbz	r0, 1a001c36 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
1a001bfe:	b1e6      	cbz	r6, 1a001c3a <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001c00:	2001      	movs	r0, #1
1a001c02:	6030      	str	r0, [r6, #0]
	__asm volatile
1a001c04:	f385 8811 	msr	BASEPRI, r5
}
1a001c08:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a001c0a:	6843      	ldr	r3, [r0, #4]
1a001c0c:	2b00      	cmp	r3, #0
1a001c0e:	d0d6      	beq.n	1a001bbe <xQueueGiveFromISR+0x32>
	__asm volatile
1a001c10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c14:	f383 8811 	msr	BASEPRI, r3
1a001c18:	f3bf 8f6f 	isb	sy
1a001c1c:	f3bf 8f4f 	dsb	sy
1a001c20:	e7fe      	b.n	1a001c20 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001c22:	3301      	adds	r3, #1
1a001c24:	b25b      	sxtb	r3, r3
1a001c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001c2a:	2001      	movs	r0, #1
1a001c2c:	e7ea      	b.n	1a001c04 <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
1a001c2e:	2000      	movs	r0, #0
1a001c30:	e7e8      	b.n	1a001c04 <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
1a001c32:	2001      	movs	r0, #1
1a001c34:	e7e6      	b.n	1a001c04 <xQueueGiveFromISR+0x78>
1a001c36:	2001      	movs	r0, #1
1a001c38:	e7e4      	b.n	1a001c04 <xQueueGiveFromISR+0x78>
1a001c3a:	2001      	movs	r0, #1
1a001c3c:	e7e2      	b.n	1a001c04 <xQueueGiveFromISR+0x78>
1a001c3e:	Address 0x000000001a001c3e is out of bounds.


1a001c40 <xQueueReceive>:
{
1a001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001c42:	b085      	sub	sp, #20
1a001c44:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001c46:	b160      	cbz	r0, 1a001c62 <xQueueReceive+0x22>
1a001c48:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001c4a:	b999      	cbnz	r1, 1a001c74 <xQueueReceive+0x34>
1a001c4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001c4e:	b18b      	cbz	r3, 1a001c74 <xQueueReceive+0x34>
1a001c50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c54:	f383 8811 	msr	BASEPRI, r3
1a001c58:	f3bf 8f6f 	isb	sy
1a001c5c:	f3bf 8f4f 	dsb	sy
1a001c60:	e7fe      	b.n	1a001c60 <xQueueReceive+0x20>
1a001c62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c66:	f383 8811 	msr	BASEPRI, r3
1a001c6a:	f3bf 8f6f 	isb	sy
1a001c6e:	f3bf 8f4f 	dsb	sy
1a001c72:	e7fe      	b.n	1a001c72 <xQueueReceive+0x32>
1a001c74:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001c76:	f000 ffa7 	bl	1a002bc8 <xTaskGetSchedulerState>
1a001c7a:	b950      	cbnz	r0, 1a001c92 <xQueueReceive+0x52>
1a001c7c:	9b01      	ldr	r3, [sp, #4]
1a001c7e:	b153      	cbz	r3, 1a001c96 <xQueueReceive+0x56>
1a001c80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c84:	f383 8811 	msr	BASEPRI, r3
1a001c88:	f3bf 8f6f 	isb	sy
1a001c8c:	f3bf 8f4f 	dsb	sy
1a001c90:	e7fe      	b.n	1a001c90 <xQueueReceive+0x50>
1a001c92:	2600      	movs	r6, #0
1a001c94:	e03e      	b.n	1a001d14 <xQueueReceive+0xd4>
1a001c96:	2600      	movs	r6, #0
1a001c98:	e03c      	b.n	1a001d14 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001c9a:	4639      	mov	r1, r7
1a001c9c:	4620      	mov	r0, r4
1a001c9e:	f7ff fd46 	bl	1a00172e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001ca2:	3d01      	subs	r5, #1
1a001ca4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001ca6:	6923      	ldr	r3, [r4, #16]
1a001ca8:	b923      	cbnz	r3, 1a001cb4 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a001caa:	f001 fbad 	bl	1a003408 <vPortExitCritical>
				return pdPASS;
1a001cae:	2001      	movs	r0, #1
}
1a001cb0:	b005      	add	sp, #20
1a001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001cb4:	f104 0010 	add.w	r0, r4, #16
1a001cb8:	f000 feee 	bl	1a002a98 <xTaskRemoveFromEventList>
1a001cbc:	2800      	cmp	r0, #0
1a001cbe:	d0f4      	beq.n	1a001caa <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001cc0:	4b34      	ldr	r3, [pc, #208]	; (1a001d94 <xQueueReceive+0x154>)
1a001cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001cc6:	601a      	str	r2, [r3, #0]
1a001cc8:	f3bf 8f4f 	dsb	sy
1a001ccc:	f3bf 8f6f 	isb	sy
1a001cd0:	e7eb      	b.n	1a001caa <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001cd2:	f001 fb99 	bl	1a003408 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001cd6:	2000      	movs	r0, #0
1a001cd8:	e7ea      	b.n	1a001cb0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001cda:	a802      	add	r0, sp, #8
1a001cdc:	f000 ff22 	bl	1a002b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001ce0:	2601      	movs	r6, #1
1a001ce2:	e021      	b.n	1a001d28 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001ce4:	2300      	movs	r3, #0
1a001ce6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001cea:	e029      	b.n	1a001d40 <xQueueReceive+0x100>
1a001cec:	2300      	movs	r3, #0
1a001cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001cf2:	e02b      	b.n	1a001d4c <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001cf4:	4620      	mov	r0, r4
1a001cf6:	f7ff fd2c 	bl	1a001752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001cfa:	f000 fd43 	bl	1a002784 <xTaskResumeAll>
1a001cfe:	e009      	b.n	1a001d14 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a001d00:	4620      	mov	r0, r4
1a001d02:	f7ff fd26 	bl	1a001752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001d06:	f000 fd3d 	bl	1a002784 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001d0a:	4620      	mov	r0, r4
1a001d0c:	f7ff fcc7 	bl	1a00169e <prvIsQueueEmpty>
1a001d10:	2800      	cmp	r0, #0
1a001d12:	d13d      	bne.n	1a001d90 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a001d14:	f001 fb56 	bl	1a0033c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001d18:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001d1a:	2d00      	cmp	r5, #0
1a001d1c:	d1bd      	bne.n	1a001c9a <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001d1e:	9b01      	ldr	r3, [sp, #4]
1a001d20:	2b00      	cmp	r3, #0
1a001d22:	d0d6      	beq.n	1a001cd2 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001d24:	2e00      	cmp	r6, #0
1a001d26:	d0d8      	beq.n	1a001cda <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a001d28:	f001 fb6e 	bl	1a003408 <vPortExitCritical>
		vTaskSuspendAll();
1a001d2c:	f000 fc90 	bl	1a002650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001d30:	f001 fb48 	bl	1a0033c4 <vPortEnterCritical>
1a001d34:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001d38:	b25b      	sxtb	r3, r3
1a001d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001d3e:	d0d1      	beq.n	1a001ce4 <xQueueReceive+0xa4>
1a001d40:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001d44:	b25b      	sxtb	r3, r3
1a001d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001d4a:	d0cf      	beq.n	1a001cec <xQueueReceive+0xac>
1a001d4c:	f001 fb5c 	bl	1a003408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001d50:	a901      	add	r1, sp, #4
1a001d52:	a802      	add	r0, sp, #8
1a001d54:	f000 fef2 	bl	1a002b3c <xTaskCheckForTimeOut>
1a001d58:	2800      	cmp	r0, #0
1a001d5a:	d1d1      	bne.n	1a001d00 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001d5c:	4620      	mov	r0, r4
1a001d5e:	f7ff fc9e 	bl	1a00169e <prvIsQueueEmpty>
1a001d62:	2800      	cmp	r0, #0
1a001d64:	d0c6      	beq.n	1a001cf4 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001d66:	9901      	ldr	r1, [sp, #4]
1a001d68:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001d6c:	f000 fe60 	bl	1a002a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001d70:	4620      	mov	r0, r4
1a001d72:	f7ff fcee 	bl	1a001752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001d76:	f000 fd05 	bl	1a002784 <xTaskResumeAll>
1a001d7a:	2800      	cmp	r0, #0
1a001d7c:	d1ca      	bne.n	1a001d14 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a001d7e:	4b05      	ldr	r3, [pc, #20]	; (1a001d94 <xQueueReceive+0x154>)
1a001d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001d84:	601a      	str	r2, [r3, #0]
1a001d86:	f3bf 8f4f 	dsb	sy
1a001d8a:	f3bf 8f6f 	isb	sy
1a001d8e:	e7c1      	b.n	1a001d14 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001d90:	2000      	movs	r0, #0
1a001d92:	e78d      	b.n	1a001cb0 <xQueueReceive+0x70>
1a001d94:	e000ed04 	.word	0xe000ed04

1a001d98 <xQueueSemaphoreTake>:
{
1a001d98:	b570      	push	{r4, r5, r6, lr}
1a001d9a:	b084      	sub	sp, #16
1a001d9c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001d9e:	b940      	cbnz	r0, 1a001db2 <xQueueSemaphoreTake+0x1a>
1a001da0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001da4:	f383 8811 	msr	BASEPRI, r3
1a001da8:	f3bf 8f6f 	isb	sy
1a001dac:	f3bf 8f4f 	dsb	sy
1a001db0:	e7fe      	b.n	1a001db0 <xQueueSemaphoreTake+0x18>
1a001db2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001db4:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001db6:	b143      	cbz	r3, 1a001dca <xQueueSemaphoreTake+0x32>
1a001db8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dbc:	f383 8811 	msr	BASEPRI, r3
1a001dc0:	f3bf 8f6f 	isb	sy
1a001dc4:	f3bf 8f4f 	dsb	sy
1a001dc8:	e7fe      	b.n	1a001dc8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001dca:	f000 fefd 	bl	1a002bc8 <xTaskGetSchedulerState>
1a001dce:	b950      	cbnz	r0, 1a001de6 <xQueueSemaphoreTake+0x4e>
1a001dd0:	9b01      	ldr	r3, [sp, #4]
1a001dd2:	b15b      	cbz	r3, 1a001dec <xQueueSemaphoreTake+0x54>
1a001dd4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dd8:	f383 8811 	msr	BASEPRI, r3
1a001ddc:	f3bf 8f6f 	isb	sy
1a001de0:	f3bf 8f4f 	dsb	sy
1a001de4:	e7fe      	b.n	1a001de4 <xQueueSemaphoreTake+0x4c>
1a001de6:	2500      	movs	r5, #0
1a001de8:	462e      	mov	r6, r5
1a001dea:	e051      	b.n	1a001e90 <xQueueSemaphoreTake+0xf8>
1a001dec:	2500      	movs	r5, #0
1a001dee:	462e      	mov	r6, r5
1a001df0:	e04e      	b.n	1a001e90 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a001df2:	3b01      	subs	r3, #1
1a001df4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001df6:	6823      	ldr	r3, [r4, #0]
1a001df8:	b913      	cbnz	r3, 1a001e00 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a001dfa:	f001 f809 	bl	1a002e10 <pvTaskIncrementMutexHeldCount>
1a001dfe:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001e00:	6923      	ldr	r3, [r4, #16]
1a001e02:	b163      	cbz	r3, 1a001e1e <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001e04:	f104 0010 	add.w	r0, r4, #16
1a001e08:	f000 fe46 	bl	1a002a98 <xTaskRemoveFromEventList>
1a001e0c:	b138      	cbz	r0, 1a001e1e <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a001e0e:	4b48      	ldr	r3, [pc, #288]	; (1a001f30 <xQueueSemaphoreTake+0x198>)
1a001e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e14:	601a      	str	r2, [r3, #0]
1a001e16:	f3bf 8f4f 	dsb	sy
1a001e1a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001e1e:	f001 faf3 	bl	1a003408 <vPortExitCritical>
				return pdPASS;
1a001e22:	2501      	movs	r5, #1
}
1a001e24:	4628      	mov	r0, r5
1a001e26:	b004      	add	sp, #16
1a001e28:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001e2a:	b145      	cbz	r5, 1a001e3e <xQueueSemaphoreTake+0xa6>
1a001e2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e30:	f383 8811 	msr	BASEPRI, r3
1a001e34:	f3bf 8f6f 	isb	sy
1a001e38:	f3bf 8f4f 	dsb	sy
1a001e3c:	e7fe      	b.n	1a001e3c <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a001e3e:	f001 fae3 	bl	1a003408 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001e42:	e7ef      	b.n	1a001e24 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001e44:	a802      	add	r0, sp, #8
1a001e46:	f000 fe6d 	bl	1a002b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001e4a:	2601      	movs	r6, #1
1a001e4c:	e02a      	b.n	1a001ea4 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a001e4e:	2300      	movs	r3, #0
1a001e50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001e54:	e032      	b.n	1a001ebc <xQueueSemaphoreTake+0x124>
1a001e56:	2300      	movs	r3, #0
1a001e58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001e5c:	e034      	b.n	1a001ec8 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a001e5e:	f001 fab1 	bl	1a0033c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a001e62:	6860      	ldr	r0, [r4, #4]
1a001e64:	f000 fec0 	bl	1a002be8 <xTaskPriorityInherit>
1a001e68:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a001e6a:	f001 facd 	bl	1a003408 <vPortExitCritical>
1a001e6e:	e03b      	b.n	1a001ee8 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a001e70:	4620      	mov	r0, r4
1a001e72:	f7ff fc6e 	bl	1a001752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001e76:	f000 fc85 	bl	1a002784 <xTaskResumeAll>
1a001e7a:	e009      	b.n	1a001e90 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a001e7c:	4620      	mov	r0, r4
1a001e7e:	f7ff fc68 	bl	1a001752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001e82:	f000 fc7f 	bl	1a002784 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001e86:	4620      	mov	r0, r4
1a001e88:	f7ff fc09 	bl	1a00169e <prvIsQueueEmpty>
1a001e8c:	2800      	cmp	r0, #0
1a001e8e:	d140      	bne.n	1a001f12 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a001e90:	f001 fa98 	bl	1a0033c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001e94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001e96:	2b00      	cmp	r3, #0
1a001e98:	d1ab      	bne.n	1a001df2 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001e9a:	9b01      	ldr	r3, [sp, #4]
1a001e9c:	2b00      	cmp	r3, #0
1a001e9e:	d0c4      	beq.n	1a001e2a <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001ea0:	2e00      	cmp	r6, #0
1a001ea2:	d0cf      	beq.n	1a001e44 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a001ea4:	f001 fab0 	bl	1a003408 <vPortExitCritical>
		vTaskSuspendAll();
1a001ea8:	f000 fbd2 	bl	1a002650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001eac:	f001 fa8a 	bl	1a0033c4 <vPortEnterCritical>
1a001eb0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001eb4:	b25b      	sxtb	r3, r3
1a001eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001eba:	d0c8      	beq.n	1a001e4e <xQueueSemaphoreTake+0xb6>
1a001ebc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001ec0:	b25b      	sxtb	r3, r3
1a001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001ec6:	d0c6      	beq.n	1a001e56 <xQueueSemaphoreTake+0xbe>
1a001ec8:	f001 fa9e 	bl	1a003408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001ecc:	a901      	add	r1, sp, #4
1a001ece:	a802      	add	r0, sp, #8
1a001ed0:	f000 fe34 	bl	1a002b3c <xTaskCheckForTimeOut>
1a001ed4:	2800      	cmp	r0, #0
1a001ed6:	d1d1      	bne.n	1a001e7c <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001ed8:	4620      	mov	r0, r4
1a001eda:	f7ff fbe0 	bl	1a00169e <prvIsQueueEmpty>
1a001ede:	2800      	cmp	r0, #0
1a001ee0:	d0c6      	beq.n	1a001e70 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001ee2:	6823      	ldr	r3, [r4, #0]
1a001ee4:	2b00      	cmp	r3, #0
1a001ee6:	d0ba      	beq.n	1a001e5e <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001ee8:	9901      	ldr	r1, [sp, #4]
1a001eea:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001eee:	f000 fd9f 	bl	1a002a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001ef2:	4620      	mov	r0, r4
1a001ef4:	f7ff fc2d 	bl	1a001752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001ef8:	f000 fc44 	bl	1a002784 <xTaskResumeAll>
1a001efc:	2800      	cmp	r0, #0
1a001efe:	d1c7      	bne.n	1a001e90 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a001f00:	4b0b      	ldr	r3, [pc, #44]	; (1a001f30 <xQueueSemaphoreTake+0x198>)
1a001f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001f06:	601a      	str	r2, [r3, #0]
1a001f08:	f3bf 8f4f 	dsb	sy
1a001f0c:	f3bf 8f6f 	isb	sy
1a001f10:	e7be      	b.n	1a001e90 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a001f12:	2d00      	cmp	r5, #0
1a001f14:	d086      	beq.n	1a001e24 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a001f16:	f001 fa55 	bl	1a0033c4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001f1a:	4620      	mov	r0, r4
1a001f1c:	f7ff fba7 	bl	1a00166e <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a001f20:	4601      	mov	r1, r0
1a001f22:	6860      	ldr	r0, [r4, #4]
1a001f24:	f000 ff14 	bl	1a002d50 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a001f28:	f001 fa6e 	bl	1a003408 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a001f2c:	2500      	movs	r5, #0
1a001f2e:	e779      	b.n	1a001e24 <xQueueSemaphoreTake+0x8c>
1a001f30:	e000ed04 	.word	0xe000ed04

1a001f34 <xQueuePeek>:
{
1a001f34:	b570      	push	{r4, r5, r6, lr}
1a001f36:	b084      	sub	sp, #16
1a001f38:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001f3a:	b160      	cbz	r0, 1a001f56 <xQueuePeek+0x22>
1a001f3c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001f3e:	b999      	cbnz	r1, 1a001f68 <xQueuePeek+0x34>
1a001f40:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001f42:	b18b      	cbz	r3, 1a001f68 <xQueuePeek+0x34>
1a001f44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f48:	f383 8811 	msr	BASEPRI, r3
1a001f4c:	f3bf 8f6f 	isb	sy
1a001f50:	f3bf 8f4f 	dsb	sy
1a001f54:	e7fe      	b.n	1a001f54 <xQueuePeek+0x20>
1a001f56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f5a:	f383 8811 	msr	BASEPRI, r3
1a001f5e:	f3bf 8f6f 	isb	sy
1a001f62:	f3bf 8f4f 	dsb	sy
1a001f66:	e7fe      	b.n	1a001f66 <xQueuePeek+0x32>
1a001f68:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001f6a:	f000 fe2d 	bl	1a002bc8 <xTaskGetSchedulerState>
1a001f6e:	b950      	cbnz	r0, 1a001f86 <xQueuePeek+0x52>
1a001f70:	9b01      	ldr	r3, [sp, #4]
1a001f72:	b153      	cbz	r3, 1a001f8a <xQueuePeek+0x56>
1a001f74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f78:	f383 8811 	msr	BASEPRI, r3
1a001f7c:	f3bf 8f6f 	isb	sy
1a001f80:	f3bf 8f4f 	dsb	sy
1a001f84:	e7fe      	b.n	1a001f84 <xQueuePeek+0x50>
1a001f86:	2500      	movs	r5, #0
1a001f88:	e03e      	b.n	1a002008 <xQueuePeek+0xd4>
1a001f8a:	2500      	movs	r5, #0
1a001f8c:	e03c      	b.n	1a002008 <xQueuePeek+0xd4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1a001f8e:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001f90:	4631      	mov	r1, r6
1a001f92:	4620      	mov	r0, r4
1a001f94:	f7ff fbcb 	bl	1a00172e <prvCopyDataFromQueue>
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1a001f98:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001f9c:	b923      	cbnz	r3, 1a001fa8 <xQueuePeek+0x74>
				taskEXIT_CRITICAL();
1a001f9e:	f001 fa33 	bl	1a003408 <vPortExitCritical>
				return pdPASS;
1a001fa2:	2001      	movs	r0, #1
}
1a001fa4:	b004      	add	sp, #16
1a001fa6:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001fa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001fac:	f000 fd74 	bl	1a002a98 <xTaskRemoveFromEventList>
1a001fb0:	2800      	cmp	r0, #0
1a001fb2:	d0f4      	beq.n	1a001f9e <xQueuePeek+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001fb4:	4b34      	ldr	r3, [pc, #208]	; (1a002088 <xQueuePeek+0x154>)
1a001fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001fba:	601a      	str	r2, [r3, #0]
1a001fbc:	f3bf 8f4f 	dsb	sy
1a001fc0:	f3bf 8f6f 	isb	sy
1a001fc4:	e7eb      	b.n	1a001f9e <xQueuePeek+0x6a>
					taskEXIT_CRITICAL();
1a001fc6:	f001 fa1f 	bl	1a003408 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001fca:	2000      	movs	r0, #0
1a001fcc:	e7ea      	b.n	1a001fa4 <xQueuePeek+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001fce:	a802      	add	r0, sp, #8
1a001fd0:	f000 fda8 	bl	1a002b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001fd4:	2501      	movs	r5, #1
1a001fd6:	e021      	b.n	1a00201c <xQueuePeek+0xe8>
		prvLockQueue( pxQueue );
1a001fd8:	2300      	movs	r3, #0
1a001fda:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001fde:	e029      	b.n	1a002034 <xQueuePeek+0x100>
1a001fe0:	2300      	movs	r3, #0
1a001fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001fe6:	e02b      	b.n	1a002040 <xQueuePeek+0x10c>
				prvUnlockQueue( pxQueue );
1a001fe8:	4620      	mov	r0, r4
1a001fea:	f7ff fbb2 	bl	1a001752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001fee:	f000 fbc9 	bl	1a002784 <xTaskResumeAll>
1a001ff2:	e009      	b.n	1a002008 <xQueuePeek+0xd4>
			prvUnlockQueue( pxQueue );
1a001ff4:	4620      	mov	r0, r4
1a001ff6:	f7ff fbac 	bl	1a001752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001ffa:	f000 fbc3 	bl	1a002784 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001ffe:	4620      	mov	r0, r4
1a002000:	f7ff fb4d 	bl	1a00169e <prvIsQueueEmpty>
1a002004:	2800      	cmp	r0, #0
1a002006:	d13d      	bne.n	1a002084 <xQueuePeek+0x150>
		taskENTER_CRITICAL();
1a002008:	f001 f9dc 	bl	1a0033c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00200c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00200e:	2b00      	cmp	r3, #0
1a002010:	d1bd      	bne.n	1a001f8e <xQueuePeek+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a002012:	9b01      	ldr	r3, [sp, #4]
1a002014:	2b00      	cmp	r3, #0
1a002016:	d0d6      	beq.n	1a001fc6 <xQueuePeek+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a002018:	2d00      	cmp	r5, #0
1a00201a:	d0d8      	beq.n	1a001fce <xQueuePeek+0x9a>
		taskEXIT_CRITICAL();
1a00201c:	f001 f9f4 	bl	1a003408 <vPortExitCritical>
		vTaskSuspendAll();
1a002020:	f000 fb16 	bl	1a002650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a002024:	f001 f9ce 	bl	1a0033c4 <vPortEnterCritical>
1a002028:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00202c:	b25b      	sxtb	r3, r3
1a00202e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002032:	d0d1      	beq.n	1a001fd8 <xQueuePeek+0xa4>
1a002034:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a002038:	b25b      	sxtb	r3, r3
1a00203a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00203e:	d0cf      	beq.n	1a001fe0 <xQueuePeek+0xac>
1a002040:	f001 f9e2 	bl	1a003408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a002044:	a901      	add	r1, sp, #4
1a002046:	a802      	add	r0, sp, #8
1a002048:	f000 fd78 	bl	1a002b3c <xTaskCheckForTimeOut>
1a00204c:	2800      	cmp	r0, #0
1a00204e:	d1d1      	bne.n	1a001ff4 <xQueuePeek+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a002050:	4620      	mov	r0, r4
1a002052:	f7ff fb24 	bl	1a00169e <prvIsQueueEmpty>
1a002056:	2800      	cmp	r0, #0
1a002058:	d0c6      	beq.n	1a001fe8 <xQueuePeek+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00205a:	9901      	ldr	r1, [sp, #4]
1a00205c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a002060:	f000 fce6 	bl	1a002a30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a002064:	4620      	mov	r0, r4
1a002066:	f7ff fb74 	bl	1a001752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00206a:	f000 fb8b 	bl	1a002784 <xTaskResumeAll>
1a00206e:	2800      	cmp	r0, #0
1a002070:	d1ca      	bne.n	1a002008 <xQueuePeek+0xd4>
					portYIELD_WITHIN_API();
1a002072:	4b05      	ldr	r3, [pc, #20]	; (1a002088 <xQueuePeek+0x154>)
1a002074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002078:	601a      	str	r2, [r3, #0]
1a00207a:	f3bf 8f4f 	dsb	sy
1a00207e:	f3bf 8f6f 	isb	sy
1a002082:	e7c1      	b.n	1a002008 <xQueuePeek+0xd4>
				return errQUEUE_EMPTY;
1a002084:	2000      	movs	r0, #0
1a002086:	e78d      	b.n	1a001fa4 <xQueuePeek+0x70>
1a002088:	e000ed04 	.word	0xe000ed04

1a00208c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00208c:	2300      	movs	r3, #0
1a00208e:	2b07      	cmp	r3, #7
1a002090:	d80c      	bhi.n	1a0020ac <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a002092:	4a07      	ldr	r2, [pc, #28]	; (1a0020b0 <vQueueAddToRegistry+0x24>)
1a002094:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a002098:	b10a      	cbz	r2, 1a00209e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00209a:	3301      	adds	r3, #1
1a00209c:	e7f7      	b.n	1a00208e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a00209e:	4a04      	ldr	r2, [pc, #16]	; (1a0020b0 <vQueueAddToRegistry+0x24>)
1a0020a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0020a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0020a8:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0020aa:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0020ac:	4770      	bx	lr
1a0020ae:	bf00      	nop
1a0020b0:	10002cc4 	.word	0x10002cc4

1a0020b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0020b4:	b570      	push	{r4, r5, r6, lr}
1a0020b6:	4604      	mov	r4, r0
1a0020b8:	460d      	mov	r5, r1
1a0020ba:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0020bc:	f001 f982 	bl	1a0033c4 <vPortEnterCritical>
1a0020c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0020c4:	b25b      	sxtb	r3, r3
1a0020c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0020ca:	d00d      	beq.n	1a0020e8 <vQueueWaitForMessageRestricted+0x34>
1a0020cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0020d0:	b25b      	sxtb	r3, r3
1a0020d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0020d6:	d00b      	beq.n	1a0020f0 <vQueueWaitForMessageRestricted+0x3c>
1a0020d8:	f001 f996 	bl	1a003408 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a0020dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0020de:	b15b      	cbz	r3, 1a0020f8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a0020e0:	4620      	mov	r0, r4
1a0020e2:	f7ff fb36 	bl	1a001752 <prvUnlockQueue>
	}
1a0020e6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a0020e8:	2300      	movs	r3, #0
1a0020ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0020ee:	e7ed      	b.n	1a0020cc <vQueueWaitForMessageRestricted+0x18>
1a0020f0:	2300      	movs	r3, #0
1a0020f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0020f6:	e7ef      	b.n	1a0020d8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0020f8:	4632      	mov	r2, r6
1a0020fa:	4629      	mov	r1, r5
1a0020fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a002100:	f000 fcae 	bl	1a002a60 <vTaskPlaceOnEventListRestricted>
1a002104:	e7ec      	b.n	1a0020e0 <vQueueWaitForMessageRestricted+0x2c>

1a002106 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a002106:	f100 0308 	add.w	r3, r0, #8
1a00210a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00210c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002110:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a002112:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a002114:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a002116:	2300      	movs	r3, #0
1a002118:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00211a:	4770      	bx	lr

1a00211c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a00211c:	2300      	movs	r3, #0
1a00211e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a002120:	4770      	bx	lr

1a002122 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a002122:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a002124:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a002126:	689a      	ldr	r2, [r3, #8]
1a002128:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00212a:	689a      	ldr	r2, [r3, #8]
1a00212c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00212e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a002130:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a002132:	6803      	ldr	r3, [r0, #0]
1a002134:	3301      	adds	r3, #1
1a002136:	6003      	str	r3, [r0, #0]
}
1a002138:	4770      	bx	lr

1a00213a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00213a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a00213c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00213e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a002142:	d002      	beq.n	1a00214a <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a002144:	f100 0208 	add.w	r2, r0, #8
1a002148:	e002      	b.n	1a002150 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00214a:	6902      	ldr	r2, [r0, #16]
1a00214c:	e004      	b.n	1a002158 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00214e:	461a      	mov	r2, r3
1a002150:	6853      	ldr	r3, [r2, #4]
1a002152:	681c      	ldr	r4, [r3, #0]
1a002154:	42ac      	cmp	r4, r5
1a002156:	d9fa      	bls.n	1a00214e <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a002158:	6853      	ldr	r3, [r2, #4]
1a00215a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a00215c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a00215e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a002160:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a002162:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a002164:	6803      	ldr	r3, [r0, #0]
1a002166:	3301      	adds	r3, #1
1a002168:	6003      	str	r3, [r0, #0]
}
1a00216a:	bc30      	pop	{r4, r5}
1a00216c:	4770      	bx	lr

1a00216e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a00216e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a002170:	6842      	ldr	r2, [r0, #4]
1a002172:	6881      	ldr	r1, [r0, #8]
1a002174:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a002176:	6882      	ldr	r2, [r0, #8]
1a002178:	6841      	ldr	r1, [r0, #4]
1a00217a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a00217c:	685a      	ldr	r2, [r3, #4]
1a00217e:	4282      	cmp	r2, r0
1a002180:	d006      	beq.n	1a002190 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a002182:	2200      	movs	r2, #0
1a002184:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a002186:	681a      	ldr	r2, [r3, #0]
1a002188:	3a01      	subs	r2, #1
1a00218a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a00218c:	6818      	ldr	r0, [r3, #0]
}
1a00218e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a002190:	6882      	ldr	r2, [r0, #8]
1a002192:	605a      	str	r2, [r3, #4]
1a002194:	e7f5      	b.n	1a002182 <uxListRemove+0x14>
1a002196:	Address 0x000000001a002196 is out of bounds.


1a002198 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a002198:	4b03      	ldr	r3, [pc, #12]	; (1a0021a8 <vApplicationGetIdleTaskMemory+0x10>)
1a00219a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a00219c:	4b03      	ldr	r3, [pc, #12]	; (1a0021ac <vApplicationGetIdleTaskMemory+0x14>)
1a00219e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0021a0:	235a      	movs	r3, #90	; 0x5a
1a0021a2:	6013      	str	r3, [r2, #0]
}
1a0021a4:	4770      	bx	lr
1a0021a6:	bf00      	nop
1a0021a8:	10002948 	.word	0x10002948
1a0021ac:	10002240 	.word	0x10002240

1a0021b0 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0021b0:	4b03      	ldr	r3, [pc, #12]	; (1a0021c0 <vApplicationGetTimerTaskMemory+0x10>)
1a0021b2:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0021b4:	4b03      	ldr	r3, [pc, #12]	; (1a0021c4 <vApplicationGetTimerTaskMemory+0x14>)
1a0021b6:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0021b8:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0021bc:	6013      	str	r3, [r2, #0]
1a0021be:	4770      	bx	lr
1a0021c0:	100029a8 	.word	0x100029a8
1a0021c4:	100023a8 	.word	0x100023a8

1a0021c8 <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a0021c8:	e7fe      	b.n	1a0021c8 <vApplicationStackOverflowHook>

1a0021ca <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a0021ca:	e7fe      	b.n	1a0021ca <vApplicationMallocFailedHook>

1a0021cc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0021cc:	4b08      	ldr	r3, [pc, #32]	; (1a0021f0 <prvResetNextTaskUnblockTime+0x24>)
1a0021ce:	681b      	ldr	r3, [r3, #0]
1a0021d0:	681b      	ldr	r3, [r3, #0]
1a0021d2:	b13b      	cbz	r3, 1a0021e4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0021d4:	4b06      	ldr	r3, [pc, #24]	; (1a0021f0 <prvResetNextTaskUnblockTime+0x24>)
1a0021d6:	681b      	ldr	r3, [r3, #0]
1a0021d8:	68db      	ldr	r3, [r3, #12]
1a0021da:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0021dc:	685a      	ldr	r2, [r3, #4]
1a0021de:	4b05      	ldr	r3, [pc, #20]	; (1a0021f4 <prvResetNextTaskUnblockTime+0x28>)
1a0021e0:	601a      	str	r2, [r3, #0]
	}
}
1a0021e2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a0021e4:	4b03      	ldr	r3, [pc, #12]	; (1a0021f4 <prvResetNextTaskUnblockTime+0x28>)
1a0021e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0021ea:	601a      	str	r2, [r3, #0]
1a0021ec:	4770      	bx	lr
1a0021ee:	bf00      	nop
1a0021f0:	10002a0c 	.word	0x10002a0c
1a0021f4:	10002ae0 	.word	0x10002ae0

1a0021f8 <prvInitialiseNewTask>:
{
1a0021f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0021fc:	4681      	mov	r9, r0
1a0021fe:	460d      	mov	r5, r1
1a002200:	4617      	mov	r7, r2
1a002202:	469a      	mov	sl, r3
1a002204:	9e08      	ldr	r6, [sp, #32]
1a002206:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00220a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a00220c:	0092      	lsls	r2, r2, #2
1a00220e:	21a5      	movs	r1, #165	; 0xa5
1a002210:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a002212:	f003 fabc 	bl	1a00578e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a002216:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a002218:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a00221c:	3a01      	subs	r2, #1
1a00221e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a002222:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a002226:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a002228:	2300      	movs	r3, #0
1a00222a:	2b0f      	cmp	r3, #15
1a00222c:	d807      	bhi.n	1a00223e <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a00222e:	5ce9      	ldrb	r1, [r5, r3]
1a002230:	18e2      	adds	r2, r4, r3
1a002232:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a002236:	5cea      	ldrb	r2, [r5, r3]
1a002238:	b10a      	cbz	r2, 1a00223e <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00223a:	3301      	adds	r3, #1
1a00223c:	e7f5      	b.n	1a00222a <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a00223e:	2300      	movs	r3, #0
1a002240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a002244:	2e06      	cmp	r6, #6
1a002246:	d900      	bls.n	1a00224a <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a002248:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a00224a:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a00224c:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a00224e:	2500      	movs	r5, #0
1a002250:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a002252:	1d20      	adds	r0, r4, #4
1a002254:	f7ff ff62 	bl	1a00211c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a002258:	f104 0018 	add.w	r0, r4, #24
1a00225c:	f7ff ff5e 	bl	1a00211c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a002260:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002262:	f1c6 0607 	rsb	r6, r6, #7
1a002266:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a002268:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a00226a:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a00226c:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a002270:	4652      	mov	r2, sl
1a002272:	4649      	mov	r1, r9
1a002274:	4638      	mov	r0, r7
1a002276:	f001 f877 	bl	1a003368 <pxPortInitialiseStack>
1a00227a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a00227c:	f1b8 0f00 	cmp.w	r8, #0
1a002280:	d001      	beq.n	1a002286 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a002282:	f8c8 4000 	str.w	r4, [r8]
}
1a002286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00228a:	Address 0x000000001a00228a is out of bounds.


1a00228c <prvInitialiseTaskLists>:
{
1a00228c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00228e:	2400      	movs	r4, #0
1a002290:	e007      	b.n	1a0022a2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a002292:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a002296:	0093      	lsls	r3, r2, #2
1a002298:	480e      	ldr	r0, [pc, #56]	; (1a0022d4 <prvInitialiseTaskLists+0x48>)
1a00229a:	4418      	add	r0, r3
1a00229c:	f7ff ff33 	bl	1a002106 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0022a0:	3401      	adds	r4, #1
1a0022a2:	2c06      	cmp	r4, #6
1a0022a4:	d9f5      	bls.n	1a002292 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a0022a6:	4d0c      	ldr	r5, [pc, #48]	; (1a0022d8 <prvInitialiseTaskLists+0x4c>)
1a0022a8:	4628      	mov	r0, r5
1a0022aa:	f7ff ff2c 	bl	1a002106 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0022ae:	4c0b      	ldr	r4, [pc, #44]	; (1a0022dc <prvInitialiseTaskLists+0x50>)
1a0022b0:	4620      	mov	r0, r4
1a0022b2:	f7ff ff28 	bl	1a002106 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0022b6:	480a      	ldr	r0, [pc, #40]	; (1a0022e0 <prvInitialiseTaskLists+0x54>)
1a0022b8:	f7ff ff25 	bl	1a002106 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0022bc:	4809      	ldr	r0, [pc, #36]	; (1a0022e4 <prvInitialiseTaskLists+0x58>)
1a0022be:	f7ff ff22 	bl	1a002106 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0022c2:	4809      	ldr	r0, [pc, #36]	; (1a0022e8 <prvInitialiseTaskLists+0x5c>)
1a0022c4:	f7ff ff1f 	bl	1a002106 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0022c8:	4b08      	ldr	r3, [pc, #32]	; (1a0022ec <prvInitialiseTaskLists+0x60>)
1a0022ca:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0022cc:	4b08      	ldr	r3, [pc, #32]	; (1a0022f0 <prvInitialiseTaskLists+0x64>)
1a0022ce:	601c      	str	r4, [r3, #0]
}
1a0022d0:	bd38      	pop	{r3, r4, r5, pc}
1a0022d2:	bf00      	nop
1a0022d4:	10002a14 	.word	0x10002a14
1a0022d8:	10002ab8 	.word	0x10002ab8
1a0022dc:	10002acc 	.word	0x10002acc
1a0022e0:	10002ae8 	.word	0x10002ae8
1a0022e4:	10002b14 	.word	0x10002b14
1a0022e8:	10002b00 	.word	0x10002b00
1a0022ec:	10002a0c 	.word	0x10002a0c
1a0022f0:	10002a10 	.word	0x10002a10

1a0022f4 <prvAddNewTaskToReadyList>:
{
1a0022f4:	b510      	push	{r4, lr}
1a0022f6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0022f8:	f001 f864 	bl	1a0033c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0022fc:	4a21      	ldr	r2, [pc, #132]	; (1a002384 <prvAddNewTaskToReadyList+0x90>)
1a0022fe:	6813      	ldr	r3, [r2, #0]
1a002300:	3301      	adds	r3, #1
1a002302:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a002304:	4b20      	ldr	r3, [pc, #128]	; (1a002388 <prvAddNewTaskToReadyList+0x94>)
1a002306:	681b      	ldr	r3, [r3, #0]
1a002308:	b15b      	cbz	r3, 1a002322 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00230a:	4b20      	ldr	r3, [pc, #128]	; (1a00238c <prvAddNewTaskToReadyList+0x98>)
1a00230c:	681b      	ldr	r3, [r3, #0]
1a00230e:	b96b      	cbnz	r3, 1a00232c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a002310:	4b1d      	ldr	r3, [pc, #116]	; (1a002388 <prvAddNewTaskToReadyList+0x94>)
1a002312:	681b      	ldr	r3, [r3, #0]
1a002314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002318:	429a      	cmp	r2, r3
1a00231a:	d807      	bhi.n	1a00232c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a00231c:	4b1a      	ldr	r3, [pc, #104]	; (1a002388 <prvAddNewTaskToReadyList+0x94>)
1a00231e:	601c      	str	r4, [r3, #0]
1a002320:	e004      	b.n	1a00232c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a002322:	4b19      	ldr	r3, [pc, #100]	; (1a002388 <prvAddNewTaskToReadyList+0x94>)
1a002324:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a002326:	6813      	ldr	r3, [r2, #0]
1a002328:	2b01      	cmp	r3, #1
1a00232a:	d027      	beq.n	1a00237c <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a00232c:	4a18      	ldr	r2, [pc, #96]	; (1a002390 <prvAddNewTaskToReadyList+0x9c>)
1a00232e:	6813      	ldr	r3, [r2, #0]
1a002330:	3301      	adds	r3, #1
1a002332:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a002334:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a002336:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002338:	2201      	movs	r2, #1
1a00233a:	409a      	lsls	r2, r3
1a00233c:	4915      	ldr	r1, [pc, #84]	; (1a002394 <prvAddNewTaskToReadyList+0xa0>)
1a00233e:	6808      	ldr	r0, [r1, #0]
1a002340:	4302      	orrs	r2, r0
1a002342:	600a      	str	r2, [r1, #0]
1a002344:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002348:	009a      	lsls	r2, r3, #2
1a00234a:	1d21      	adds	r1, r4, #4
1a00234c:	4812      	ldr	r0, [pc, #72]	; (1a002398 <prvAddNewTaskToReadyList+0xa4>)
1a00234e:	4410      	add	r0, r2
1a002350:	f7ff fee7 	bl	1a002122 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a002354:	f001 f858 	bl	1a003408 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a002358:	4b0c      	ldr	r3, [pc, #48]	; (1a00238c <prvAddNewTaskToReadyList+0x98>)
1a00235a:	681b      	ldr	r3, [r3, #0]
1a00235c:	b16b      	cbz	r3, 1a00237a <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a00235e:	4b0a      	ldr	r3, [pc, #40]	; (1a002388 <prvAddNewTaskToReadyList+0x94>)
1a002360:	681b      	ldr	r3, [r3, #0]
1a002362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002364:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002366:	429a      	cmp	r2, r3
1a002368:	d207      	bcs.n	1a00237a <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a00236a:	4b0c      	ldr	r3, [pc, #48]	; (1a00239c <prvAddNewTaskToReadyList+0xa8>)
1a00236c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002370:	601a      	str	r2, [r3, #0]
1a002372:	f3bf 8f4f 	dsb	sy
1a002376:	f3bf 8f6f 	isb	sy
}
1a00237a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a00237c:	f7ff ff86 	bl	1a00228c <prvInitialiseTaskLists>
1a002380:	e7d4      	b.n	1a00232c <prvAddNewTaskToReadyList+0x38>
1a002382:	bf00      	nop
1a002384:	10002aa0 	.word	0x10002aa0
1a002388:	10002a08 	.word	0x10002a08
1a00238c:	10002afc 	.word	0x10002afc
1a002390:	10002ab0 	.word	0x10002ab0
1a002394:	10002ab4 	.word	0x10002ab4
1a002398:	10002a14 	.word	0x10002a14
1a00239c:	e000ed04 	.word	0xe000ed04

1a0023a0 <prvDeleteTCB>:
	{
1a0023a0:	b510      	push	{r4, lr}
1a0023a2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0023a4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0023a8:	b933      	cbnz	r3, 1a0023b8 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a0023aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0023ac:	f7ff f954 	bl	1a001658 <vPortFree>
				vPortFree( pxTCB );
1a0023b0:	4620      	mov	r0, r4
1a0023b2:	f7ff f951 	bl	1a001658 <vPortFree>
	}
1a0023b6:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0023b8:	2b01      	cmp	r3, #1
1a0023ba:	d00a      	beq.n	1a0023d2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0023bc:	2b02      	cmp	r3, #2
1a0023be:	d0fa      	beq.n	1a0023b6 <prvDeleteTCB+0x16>
1a0023c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023c4:	f383 8811 	msr	BASEPRI, r3
1a0023c8:	f3bf 8f6f 	isb	sy
1a0023cc:	f3bf 8f4f 	dsb	sy
1a0023d0:	e7fe      	b.n	1a0023d0 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a0023d2:	f7ff f941 	bl	1a001658 <vPortFree>
1a0023d6:	e7ee      	b.n	1a0023b6 <prvDeleteTCB+0x16>

1a0023d8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0023d8:	4b0f      	ldr	r3, [pc, #60]	; (1a002418 <prvCheckTasksWaitingTermination+0x40>)
1a0023da:	681b      	ldr	r3, [r3, #0]
1a0023dc:	b1d3      	cbz	r3, 1a002414 <prvCheckTasksWaitingTermination+0x3c>
{
1a0023de:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0023e0:	f000 fff0 	bl	1a0033c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0023e4:	4b0d      	ldr	r3, [pc, #52]	; (1a00241c <prvCheckTasksWaitingTermination+0x44>)
1a0023e6:	68db      	ldr	r3, [r3, #12]
1a0023e8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0023ea:	1d20      	adds	r0, r4, #4
1a0023ec:	f7ff febf 	bl	1a00216e <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0023f0:	4a0b      	ldr	r2, [pc, #44]	; (1a002420 <prvCheckTasksWaitingTermination+0x48>)
1a0023f2:	6813      	ldr	r3, [r2, #0]
1a0023f4:	3b01      	subs	r3, #1
1a0023f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0023f8:	4a07      	ldr	r2, [pc, #28]	; (1a002418 <prvCheckTasksWaitingTermination+0x40>)
1a0023fa:	6813      	ldr	r3, [r2, #0]
1a0023fc:	3b01      	subs	r3, #1
1a0023fe:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a002400:	f001 f802 	bl	1a003408 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a002404:	4620      	mov	r0, r4
1a002406:	f7ff ffcb 	bl	1a0023a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00240a:	4b03      	ldr	r3, [pc, #12]	; (1a002418 <prvCheckTasksWaitingTermination+0x40>)
1a00240c:	681b      	ldr	r3, [r3, #0]
1a00240e:	2b00      	cmp	r3, #0
1a002410:	d1e6      	bne.n	1a0023e0 <prvCheckTasksWaitingTermination+0x8>
}
1a002412:	bd10      	pop	{r4, pc}
1a002414:	4770      	bx	lr
1a002416:	bf00      	nop
1a002418:	10002aa4 	.word	0x10002aa4
1a00241c:	10002b14 	.word	0x10002b14
1a002420:	10002aa0 	.word	0x10002aa0

1a002424 <prvIdleTask>:
{
1a002424:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a002426:	f7ff ffd7 	bl	1a0023d8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00242a:	4b06      	ldr	r3, [pc, #24]	; (1a002444 <prvIdleTask+0x20>)
1a00242c:	681b      	ldr	r3, [r3, #0]
1a00242e:	2b01      	cmp	r3, #1
1a002430:	d9f9      	bls.n	1a002426 <prvIdleTask+0x2>
				taskYIELD();
1a002432:	4b05      	ldr	r3, [pc, #20]	; (1a002448 <prvIdleTask+0x24>)
1a002434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002438:	601a      	str	r2, [r3, #0]
1a00243a:	f3bf 8f4f 	dsb	sy
1a00243e:	f3bf 8f6f 	isb	sy
1a002442:	e7f0      	b.n	1a002426 <prvIdleTask+0x2>
1a002444:	10002a14 	.word	0x10002a14
1a002448:	e000ed04 	.word	0xe000ed04

1a00244c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a00244c:	b570      	push	{r4, r5, r6, lr}
1a00244e:	4604      	mov	r4, r0
1a002450:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a002452:	4b1d      	ldr	r3, [pc, #116]	; (1a0024c8 <prvAddCurrentTaskToDelayedList+0x7c>)
1a002454:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002456:	4b1d      	ldr	r3, [pc, #116]	; (1a0024cc <prvAddCurrentTaskToDelayedList+0x80>)
1a002458:	6818      	ldr	r0, [r3, #0]
1a00245a:	3004      	adds	r0, #4
1a00245c:	f7ff fe87 	bl	1a00216e <uxListRemove>
1a002460:	b950      	cbnz	r0, 1a002478 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a002462:	4b1a      	ldr	r3, [pc, #104]	; (1a0024cc <prvAddCurrentTaskToDelayedList+0x80>)
1a002464:	681b      	ldr	r3, [r3, #0]
1a002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002468:	2301      	movs	r3, #1
1a00246a:	fa03 f202 	lsl.w	r2, r3, r2
1a00246e:	4918      	ldr	r1, [pc, #96]	; (1a0024d0 <prvAddCurrentTaskToDelayedList+0x84>)
1a002470:	680b      	ldr	r3, [r1, #0]
1a002472:	ea23 0302 	bic.w	r3, r3, r2
1a002476:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a002478:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a00247c:	d013      	beq.n	1a0024a6 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a00247e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a002480:	4b12      	ldr	r3, [pc, #72]	; (1a0024cc <prvAddCurrentTaskToDelayedList+0x80>)
1a002482:	681b      	ldr	r3, [r3, #0]
1a002484:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a002486:	42a5      	cmp	r5, r4
1a002488:	d816      	bhi.n	1a0024b8 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00248a:	4b12      	ldr	r3, [pc, #72]	; (1a0024d4 <prvAddCurrentTaskToDelayedList+0x88>)
1a00248c:	6818      	ldr	r0, [r3, #0]
1a00248e:	4b0f      	ldr	r3, [pc, #60]	; (1a0024cc <prvAddCurrentTaskToDelayedList+0x80>)
1a002490:	6819      	ldr	r1, [r3, #0]
1a002492:	3104      	adds	r1, #4
1a002494:	f7ff fe51 	bl	1a00213a <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a002498:	4b0f      	ldr	r3, [pc, #60]	; (1a0024d8 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00249a:	681b      	ldr	r3, [r3, #0]
1a00249c:	42a3      	cmp	r3, r4
1a00249e:	d912      	bls.n	1a0024c6 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0024a0:	4b0d      	ldr	r3, [pc, #52]	; (1a0024d8 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0024a2:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0024a4:	e00f      	b.n	1a0024c6 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0024a6:	2e00      	cmp	r6, #0
1a0024a8:	d0e9      	beq.n	1a00247e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0024aa:	4b08      	ldr	r3, [pc, #32]	; (1a0024cc <prvAddCurrentTaskToDelayedList+0x80>)
1a0024ac:	6819      	ldr	r1, [r3, #0]
1a0024ae:	3104      	adds	r1, #4
1a0024b0:	480a      	ldr	r0, [pc, #40]	; (1a0024dc <prvAddCurrentTaskToDelayedList+0x90>)
1a0024b2:	f7ff fe36 	bl	1a002122 <vListInsertEnd>
1a0024b6:	e006      	b.n	1a0024c6 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0024b8:	4b09      	ldr	r3, [pc, #36]	; (1a0024e0 <prvAddCurrentTaskToDelayedList+0x94>)
1a0024ba:	6818      	ldr	r0, [r3, #0]
1a0024bc:	4b03      	ldr	r3, [pc, #12]	; (1a0024cc <prvAddCurrentTaskToDelayedList+0x80>)
1a0024be:	6819      	ldr	r1, [r3, #0]
1a0024c0:	3104      	adds	r1, #4
1a0024c2:	f7ff fe3a 	bl	1a00213a <vListInsert>
}
1a0024c6:	bd70      	pop	{r4, r5, r6, pc}
1a0024c8:	10002b28 	.word	0x10002b28
1a0024cc:	10002a08 	.word	0x10002a08
1a0024d0:	10002ab4 	.word	0x10002ab4
1a0024d4:	10002a0c 	.word	0x10002a0c
1a0024d8:	10002ae0 	.word	0x10002ae0
1a0024dc:	10002b00 	.word	0x10002b00
1a0024e0:	10002a10 	.word	0x10002a10

1a0024e4 <xTaskCreateStatic>:
	{
1a0024e4:	b570      	push	{r4, r5, r6, lr}
1a0024e6:	b086      	sub	sp, #24
1a0024e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0024ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0024ec:	b945      	cbnz	r5, 1a002500 <xTaskCreateStatic+0x1c>
1a0024ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024f2:	f383 8811 	msr	BASEPRI, r3
1a0024f6:	f3bf 8f6f 	isb	sy
1a0024fa:	f3bf 8f4f 	dsb	sy
1a0024fe:	e7fe      	b.n	1a0024fe <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a002500:	b944      	cbnz	r4, 1a002514 <xTaskCreateStatic+0x30>
1a002502:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002506:	f383 8811 	msr	BASEPRI, r3
1a00250a:	f3bf 8f6f 	isb	sy
1a00250e:	f3bf 8f4f 	dsb	sy
1a002512:	e7fe      	b.n	1a002512 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a002514:	2660      	movs	r6, #96	; 0x60
1a002516:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a002518:	9e04      	ldr	r6, [sp, #16]
1a00251a:	2e60      	cmp	r6, #96	; 0x60
1a00251c:	d008      	beq.n	1a002530 <xTaskCreateStatic+0x4c>
1a00251e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002522:	f383 8811 	msr	BASEPRI, r3
1a002526:	f3bf 8f6f 	isb	sy
1a00252a:	f3bf 8f4f 	dsb	sy
1a00252e:	e7fe      	b.n	1a00252e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a002530:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a002532:	2502      	movs	r5, #2
1a002534:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a002538:	2500      	movs	r5, #0
1a00253a:	9503      	str	r5, [sp, #12]
1a00253c:	9402      	str	r4, [sp, #8]
1a00253e:	ad05      	add	r5, sp, #20
1a002540:	9501      	str	r5, [sp, #4]
1a002542:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a002544:	9500      	str	r5, [sp, #0]
1a002546:	f7ff fe57 	bl	1a0021f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00254a:	4620      	mov	r0, r4
1a00254c:	f7ff fed2 	bl	1a0022f4 <prvAddNewTaskToReadyList>
	}
1a002550:	9805      	ldr	r0, [sp, #20]
1a002552:	b006      	add	sp, #24
1a002554:	bd70      	pop	{r4, r5, r6, pc}

1a002556 <xTaskCreate>:
	{
1a002556:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00255a:	b085      	sub	sp, #20
1a00255c:	4607      	mov	r7, r0
1a00255e:	4688      	mov	r8, r1
1a002560:	4615      	mov	r5, r2
1a002562:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002564:	0090      	lsls	r0, r2, #2
1a002566:	f7ff f83f 	bl	1a0015e8 <pvPortMalloc>
			if( pxStack != NULL )
1a00256a:	b308      	cbz	r0, 1a0025b0 <xTaskCreate+0x5a>
1a00256c:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a00256e:	2060      	movs	r0, #96	; 0x60
1a002570:	f7ff f83a 	bl	1a0015e8 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a002574:	4604      	mov	r4, r0
1a002576:	b1b8      	cbz	r0, 1a0025a8 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a002578:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a00257a:	b1e4      	cbz	r4, 1a0025b6 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a00257c:	2300      	movs	r3, #0
1a00257e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a002582:	9303      	str	r3, [sp, #12]
1a002584:	9402      	str	r4, [sp, #8]
1a002586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a002588:	9301      	str	r3, [sp, #4]
1a00258a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00258c:	9300      	str	r3, [sp, #0]
1a00258e:	464b      	mov	r3, r9
1a002590:	462a      	mov	r2, r5
1a002592:	4641      	mov	r1, r8
1a002594:	4638      	mov	r0, r7
1a002596:	f7ff fe2f 	bl	1a0021f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00259a:	4620      	mov	r0, r4
1a00259c:	f7ff feaa 	bl	1a0022f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0025a0:	2001      	movs	r0, #1
	}
1a0025a2:	b005      	add	sp, #20
1a0025a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0025a8:	4630      	mov	r0, r6
1a0025aa:	f7ff f855 	bl	1a001658 <vPortFree>
1a0025ae:	e7e4      	b.n	1a00257a <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0025b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0025b4:	e7f5      	b.n	1a0025a2 <xTaskCreate+0x4c>
1a0025b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0025ba:	e7f2      	b.n	1a0025a2 <xTaskCreate+0x4c>

1a0025bc <vTaskStartScheduler>:
{
1a0025bc:	b510      	push	{r4, lr}
1a0025be:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0025c0:	2400      	movs	r4, #0
1a0025c2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0025c4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0025c6:	aa07      	add	r2, sp, #28
1a0025c8:	a906      	add	r1, sp, #24
1a0025ca:	a805      	add	r0, sp, #20
1a0025cc:	f7ff fde4 	bl	1a002198 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0025d0:	9b05      	ldr	r3, [sp, #20]
1a0025d2:	9302      	str	r3, [sp, #8]
1a0025d4:	9b06      	ldr	r3, [sp, #24]
1a0025d6:	9301      	str	r3, [sp, #4]
1a0025d8:	9400      	str	r4, [sp, #0]
1a0025da:	4623      	mov	r3, r4
1a0025dc:	9a07      	ldr	r2, [sp, #28]
1a0025de:	4917      	ldr	r1, [pc, #92]	; (1a00263c <vTaskStartScheduler+0x80>)
1a0025e0:	4817      	ldr	r0, [pc, #92]	; (1a002640 <vTaskStartScheduler+0x84>)
1a0025e2:	f7ff ff7f 	bl	1a0024e4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0025e6:	b140      	cbz	r0, 1a0025fa <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0025e8:	f000 fcac 	bl	1a002f44 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0025ec:	2801      	cmp	r0, #1
1a0025ee:	d006      	beq.n	1a0025fe <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0025f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0025f4:	d018      	beq.n	1a002628 <vTaskStartScheduler+0x6c>
}
1a0025f6:	b008      	add	sp, #32
1a0025f8:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0025fa:	2000      	movs	r0, #0
1a0025fc:	e7f6      	b.n	1a0025ec <vTaskStartScheduler+0x30>
1a0025fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002602:	f383 8811 	msr	BASEPRI, r3
1a002606:	f3bf 8f6f 	isb	sy
1a00260a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a00260e:	4b0d      	ldr	r3, [pc, #52]	; (1a002644 <vTaskStartScheduler+0x88>)
1a002610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002614:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a002616:	4b0c      	ldr	r3, [pc, #48]	; (1a002648 <vTaskStartScheduler+0x8c>)
1a002618:	2201      	movs	r2, #1
1a00261a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a00261c:	4b0b      	ldr	r3, [pc, #44]	; (1a00264c <vTaskStartScheduler+0x90>)
1a00261e:	2200      	movs	r2, #0
1a002620:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a002622:	f000 ff71 	bl	1a003508 <xPortStartScheduler>
1a002626:	e7e6      	b.n	1a0025f6 <vTaskStartScheduler+0x3a>
1a002628:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00262c:	f383 8811 	msr	BASEPRI, r3
1a002630:	f3bf 8f6f 	isb	sy
1a002634:	f3bf 8f4f 	dsb	sy
1a002638:	e7fe      	b.n	1a002638 <vTaskStartScheduler+0x7c>
1a00263a:	bf00      	nop
1a00263c:	1a005854 	.word	0x1a005854
1a002640:	1a002425 	.word	0x1a002425
1a002644:	10002ae0 	.word	0x10002ae0
1a002648:	10002afc 	.word	0x10002afc
1a00264c:	10002b28 	.word	0x10002b28

1a002650 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a002650:	4a02      	ldr	r2, [pc, #8]	; (1a00265c <vTaskSuspendAll+0xc>)
1a002652:	6813      	ldr	r3, [r2, #0]
1a002654:	3301      	adds	r3, #1
1a002656:	6013      	str	r3, [r2, #0]
}
1a002658:	4770      	bx	lr
1a00265a:	bf00      	nop
1a00265c:	10002aac 	.word	0x10002aac

1a002660 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a002660:	4b01      	ldr	r3, [pc, #4]	; (1a002668 <xTaskGetTickCount+0x8>)
1a002662:	6818      	ldr	r0, [r3, #0]
}
1a002664:	4770      	bx	lr
1a002666:	bf00      	nop
1a002668:	10002b28 	.word	0x10002b28

1a00266c <xTaskIncrementTick>:
{
1a00266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00266e:	4b3a      	ldr	r3, [pc, #232]	; (1a002758 <xTaskIncrementTick+0xec>)
1a002670:	681b      	ldr	r3, [r3, #0]
1a002672:	2b00      	cmp	r3, #0
1a002674:	d164      	bne.n	1a002740 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a002676:	4b39      	ldr	r3, [pc, #228]	; (1a00275c <xTaskIncrementTick+0xf0>)
1a002678:	681d      	ldr	r5, [r3, #0]
1a00267a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a00267c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00267e:	b9c5      	cbnz	r5, 1a0026b2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a002680:	4b37      	ldr	r3, [pc, #220]	; (1a002760 <xTaskIncrementTick+0xf4>)
1a002682:	681b      	ldr	r3, [r3, #0]
1a002684:	681b      	ldr	r3, [r3, #0]
1a002686:	b143      	cbz	r3, 1a00269a <xTaskIncrementTick+0x2e>
1a002688:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00268c:	f383 8811 	msr	BASEPRI, r3
1a002690:	f3bf 8f6f 	isb	sy
1a002694:	f3bf 8f4f 	dsb	sy
1a002698:	e7fe      	b.n	1a002698 <xTaskIncrementTick+0x2c>
1a00269a:	4a31      	ldr	r2, [pc, #196]	; (1a002760 <xTaskIncrementTick+0xf4>)
1a00269c:	6811      	ldr	r1, [r2, #0]
1a00269e:	4b31      	ldr	r3, [pc, #196]	; (1a002764 <xTaskIncrementTick+0xf8>)
1a0026a0:	6818      	ldr	r0, [r3, #0]
1a0026a2:	6010      	str	r0, [r2, #0]
1a0026a4:	6019      	str	r1, [r3, #0]
1a0026a6:	4a30      	ldr	r2, [pc, #192]	; (1a002768 <xTaskIncrementTick+0xfc>)
1a0026a8:	6813      	ldr	r3, [r2, #0]
1a0026aa:	3301      	adds	r3, #1
1a0026ac:	6013      	str	r3, [r2, #0]
1a0026ae:	f7ff fd8d 	bl	1a0021cc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0026b2:	4b2e      	ldr	r3, [pc, #184]	; (1a00276c <xTaskIncrementTick+0x100>)
1a0026b4:	681b      	ldr	r3, [r3, #0]
1a0026b6:	42ab      	cmp	r3, r5
1a0026b8:	d938      	bls.n	1a00272c <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0026ba:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0026bc:	4b2c      	ldr	r3, [pc, #176]	; (1a002770 <xTaskIncrementTick+0x104>)
1a0026be:	681b      	ldr	r3, [r3, #0]
1a0026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0026c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0026c6:	009a      	lsls	r2, r3, #2
1a0026c8:	4b2a      	ldr	r3, [pc, #168]	; (1a002774 <xTaskIncrementTick+0x108>)
1a0026ca:	589b      	ldr	r3, [r3, r2]
1a0026cc:	2b01      	cmp	r3, #1
1a0026ce:	d93c      	bls.n	1a00274a <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0026d0:	2401      	movs	r4, #1
1a0026d2:	e03a      	b.n	1a00274a <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0026d4:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0026d6:	4b22      	ldr	r3, [pc, #136]	; (1a002760 <xTaskIncrementTick+0xf4>)
1a0026d8:	681b      	ldr	r3, [r3, #0]
1a0026da:	681b      	ldr	r3, [r3, #0]
1a0026dc:	b343      	cbz	r3, 1a002730 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0026de:	4b20      	ldr	r3, [pc, #128]	; (1a002760 <xTaskIncrementTick+0xf4>)
1a0026e0:	681b      	ldr	r3, [r3, #0]
1a0026e2:	68db      	ldr	r3, [r3, #12]
1a0026e4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0026e6:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0026e8:	429d      	cmp	r5, r3
1a0026ea:	d326      	bcc.n	1a00273a <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0026ec:	1d37      	adds	r7, r6, #4
1a0026ee:	4638      	mov	r0, r7
1a0026f0:	f7ff fd3d 	bl	1a00216e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0026f4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0026f6:	b11b      	cbz	r3, 1a002700 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0026f8:	f106 0018 	add.w	r0, r6, #24
1a0026fc:	f7ff fd37 	bl	1a00216e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002700:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a002702:	2201      	movs	r2, #1
1a002704:	409a      	lsls	r2, r3
1a002706:	491c      	ldr	r1, [pc, #112]	; (1a002778 <xTaskIncrementTick+0x10c>)
1a002708:	6808      	ldr	r0, [r1, #0]
1a00270a:	4302      	orrs	r2, r0
1a00270c:	600a      	str	r2, [r1, #0]
1a00270e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002712:	009a      	lsls	r2, r3, #2
1a002714:	4639      	mov	r1, r7
1a002716:	4817      	ldr	r0, [pc, #92]	; (1a002774 <xTaskIncrementTick+0x108>)
1a002718:	4410      	add	r0, r2
1a00271a:	f7ff fd02 	bl	1a002122 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00271e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a002720:	4b13      	ldr	r3, [pc, #76]	; (1a002770 <xTaskIncrementTick+0x104>)
1a002722:	681b      	ldr	r3, [r3, #0]
1a002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002726:	429a      	cmp	r2, r3
1a002728:	d2d4      	bcs.n	1a0026d4 <xTaskIncrementTick+0x68>
1a00272a:	e7d4      	b.n	1a0026d6 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a00272c:	2400      	movs	r4, #0
1a00272e:	e7d2      	b.n	1a0026d6 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002730:	4b0e      	ldr	r3, [pc, #56]	; (1a00276c <xTaskIncrementTick+0x100>)
1a002732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002736:	601a      	str	r2, [r3, #0]
					break;
1a002738:	e7c0      	b.n	1a0026bc <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00273a:	4a0c      	ldr	r2, [pc, #48]	; (1a00276c <xTaskIncrementTick+0x100>)
1a00273c:	6013      	str	r3, [r2, #0]
						break;
1a00273e:	e7bd      	b.n	1a0026bc <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a002740:	4a0e      	ldr	r2, [pc, #56]	; (1a00277c <xTaskIncrementTick+0x110>)
1a002742:	6813      	ldr	r3, [r2, #0]
1a002744:	3301      	adds	r3, #1
1a002746:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a002748:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00274a:	4b0d      	ldr	r3, [pc, #52]	; (1a002780 <xTaskIncrementTick+0x114>)
1a00274c:	681b      	ldr	r3, [r3, #0]
1a00274e:	b103      	cbz	r3, 1a002752 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a002750:	2401      	movs	r4, #1
}
1a002752:	4620      	mov	r0, r4
1a002754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002756:	bf00      	nop
1a002758:	10002aac 	.word	0x10002aac
1a00275c:	10002b28 	.word	0x10002b28
1a002760:	10002a0c 	.word	0x10002a0c
1a002764:	10002a10 	.word	0x10002a10
1a002768:	10002ae4 	.word	0x10002ae4
1a00276c:	10002ae0 	.word	0x10002ae0
1a002770:	10002a08 	.word	0x10002a08
1a002774:	10002a14 	.word	0x10002a14
1a002778:	10002ab4 	.word	0x10002ab4
1a00277c:	10002aa8 	.word	0x10002aa8
1a002780:	10002b2c 	.word	0x10002b2c

1a002784 <xTaskResumeAll>:
{
1a002784:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a002786:	4b33      	ldr	r3, [pc, #204]	; (1a002854 <xTaskResumeAll+0xd0>)
1a002788:	681b      	ldr	r3, [r3, #0]
1a00278a:	b943      	cbnz	r3, 1a00279e <xTaskResumeAll+0x1a>
1a00278c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002790:	f383 8811 	msr	BASEPRI, r3
1a002794:	f3bf 8f6f 	isb	sy
1a002798:	f3bf 8f4f 	dsb	sy
1a00279c:	e7fe      	b.n	1a00279c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a00279e:	f000 fe11 	bl	1a0033c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0027a2:	4b2c      	ldr	r3, [pc, #176]	; (1a002854 <xTaskResumeAll+0xd0>)
1a0027a4:	681a      	ldr	r2, [r3, #0]
1a0027a6:	3a01      	subs	r2, #1
1a0027a8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0027aa:	681b      	ldr	r3, [r3, #0]
1a0027ac:	2b00      	cmp	r3, #0
1a0027ae:	d14d      	bne.n	1a00284c <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0027b0:	4b29      	ldr	r3, [pc, #164]	; (1a002858 <xTaskResumeAll+0xd4>)
1a0027b2:	681b      	ldr	r3, [r3, #0]
1a0027b4:	b923      	cbnz	r3, 1a0027c0 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a0027b6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0027b8:	f000 fe26 	bl	1a003408 <vPortExitCritical>
}
1a0027bc:	4620      	mov	r0, r4
1a0027be:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a0027c0:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0027c2:	4b26      	ldr	r3, [pc, #152]	; (1a00285c <xTaskResumeAll+0xd8>)
1a0027c4:	681b      	ldr	r3, [r3, #0]
1a0027c6:	b31b      	cbz	r3, 1a002810 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0027c8:	4b24      	ldr	r3, [pc, #144]	; (1a00285c <xTaskResumeAll+0xd8>)
1a0027ca:	68db      	ldr	r3, [r3, #12]
1a0027cc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0027ce:	f104 0018 	add.w	r0, r4, #24
1a0027d2:	f7ff fccc 	bl	1a00216e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0027d6:	1d25      	adds	r5, r4, #4
1a0027d8:	4628      	mov	r0, r5
1a0027da:	f7ff fcc8 	bl	1a00216e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0027de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0027e0:	2201      	movs	r2, #1
1a0027e2:	409a      	lsls	r2, r3
1a0027e4:	491e      	ldr	r1, [pc, #120]	; (1a002860 <xTaskResumeAll+0xdc>)
1a0027e6:	6808      	ldr	r0, [r1, #0]
1a0027e8:	4302      	orrs	r2, r0
1a0027ea:	600a      	str	r2, [r1, #0]
1a0027ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0027f0:	009a      	lsls	r2, r3, #2
1a0027f2:	4629      	mov	r1, r5
1a0027f4:	481b      	ldr	r0, [pc, #108]	; (1a002864 <xTaskResumeAll+0xe0>)
1a0027f6:	4410      	add	r0, r2
1a0027f8:	f7ff fc93 	bl	1a002122 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0027fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0027fe:	4b1a      	ldr	r3, [pc, #104]	; (1a002868 <xTaskResumeAll+0xe4>)
1a002800:	681b      	ldr	r3, [r3, #0]
1a002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002804:	429a      	cmp	r2, r3
1a002806:	d3dc      	bcc.n	1a0027c2 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a002808:	4b18      	ldr	r3, [pc, #96]	; (1a00286c <xTaskResumeAll+0xe8>)
1a00280a:	2201      	movs	r2, #1
1a00280c:	601a      	str	r2, [r3, #0]
1a00280e:	e7d8      	b.n	1a0027c2 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a002810:	b10c      	cbz	r4, 1a002816 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a002812:	f7ff fcdb 	bl	1a0021cc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a002816:	4b16      	ldr	r3, [pc, #88]	; (1a002870 <xTaskResumeAll+0xec>)
1a002818:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00281a:	b154      	cbz	r4, 1a002832 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a00281c:	f7ff ff26 	bl	1a00266c <xTaskIncrementTick>
1a002820:	b110      	cbz	r0, 1a002828 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a002822:	4b12      	ldr	r3, [pc, #72]	; (1a00286c <xTaskResumeAll+0xe8>)
1a002824:	2201      	movs	r2, #1
1a002826:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a002828:	3c01      	subs	r4, #1
1a00282a:	d1f7      	bne.n	1a00281c <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a00282c:	4b10      	ldr	r3, [pc, #64]	; (1a002870 <xTaskResumeAll+0xec>)
1a00282e:	2200      	movs	r2, #0
1a002830:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a002832:	4b0e      	ldr	r3, [pc, #56]	; (1a00286c <xTaskResumeAll+0xe8>)
1a002834:	681b      	ldr	r3, [r3, #0]
1a002836:	b15b      	cbz	r3, 1a002850 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a002838:	4b0e      	ldr	r3, [pc, #56]	; (1a002874 <xTaskResumeAll+0xf0>)
1a00283a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00283e:	601a      	str	r2, [r3, #0]
1a002840:	f3bf 8f4f 	dsb	sy
1a002844:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a002848:	2401      	movs	r4, #1
1a00284a:	e7b5      	b.n	1a0027b8 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a00284c:	2400      	movs	r4, #0
1a00284e:	e7b3      	b.n	1a0027b8 <xTaskResumeAll+0x34>
1a002850:	2400      	movs	r4, #0
1a002852:	e7b1      	b.n	1a0027b8 <xTaskResumeAll+0x34>
1a002854:	10002aac 	.word	0x10002aac
1a002858:	10002aa0 	.word	0x10002aa0
1a00285c:	10002ae8 	.word	0x10002ae8
1a002860:	10002ab4 	.word	0x10002ab4
1a002864:	10002a14 	.word	0x10002a14
1a002868:	10002a08 	.word	0x10002a08
1a00286c:	10002b2c 	.word	0x10002b2c
1a002870:	10002aa8 	.word	0x10002aa8
1a002874:	e000ed04 	.word	0xe000ed04

1a002878 <vTaskDelayUntil>:
	{
1a002878:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a00287a:	b150      	cbz	r0, 1a002892 <vTaskDelayUntil+0x1a>
1a00287c:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a00287e:	b989      	cbnz	r1, 1a0028a4 <vTaskDelayUntil+0x2c>
1a002880:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002884:	f383 8811 	msr	BASEPRI, r3
1a002888:	f3bf 8f6f 	isb	sy
1a00288c:	f3bf 8f4f 	dsb	sy
1a002890:	e7fe      	b.n	1a002890 <vTaskDelayUntil+0x18>
1a002892:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002896:	f383 8811 	msr	BASEPRI, r3
1a00289a:	f3bf 8f6f 	isb	sy
1a00289e:	f3bf 8f4f 	dsb	sy
1a0028a2:	e7fe      	b.n	1a0028a2 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a0028a4:	4b1a      	ldr	r3, [pc, #104]	; (1a002910 <vTaskDelayUntil+0x98>)
1a0028a6:	681b      	ldr	r3, [r3, #0]
1a0028a8:	b143      	cbz	r3, 1a0028bc <vTaskDelayUntil+0x44>
1a0028aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028ae:	f383 8811 	msr	BASEPRI, r3
1a0028b2:	f3bf 8f6f 	isb	sy
1a0028b6:	f3bf 8f4f 	dsb	sy
1a0028ba:	e7fe      	b.n	1a0028ba <vTaskDelayUntil+0x42>
1a0028bc:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a0028be:	f7ff fec7 	bl	1a002650 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a0028c2:	4b14      	ldr	r3, [pc, #80]	; (1a002914 <vTaskDelayUntil+0x9c>)
1a0028c4:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a0028c6:	682a      	ldr	r2, [r5, #0]
1a0028c8:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a0028ca:	4282      	cmp	r2, r0
1a0028cc:	d918      	bls.n	1a002900 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0028ce:	42a2      	cmp	r2, r4
1a0028d0:	d80c      	bhi.n	1a0028ec <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a0028d2:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a0028d4:	f7ff ff56 	bl	1a002784 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0028d8:	b938      	cbnz	r0, 1a0028ea <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a0028da:	4b0f      	ldr	r3, [pc, #60]	; (1a002918 <vTaskDelayUntil+0xa0>)
1a0028dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0028e0:	601a      	str	r2, [r3, #0]
1a0028e2:	f3bf 8f4f 	dsb	sy
1a0028e6:	f3bf 8f6f 	isb	sy
	}
1a0028ea:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0028ec:	42a0      	cmp	r0, r4
1a0028ee:	d301      	bcc.n	1a0028f4 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a0028f0:	602c      	str	r4, [r5, #0]
1a0028f2:	e7ef      	b.n	1a0028d4 <vTaskDelayUntil+0x5c>
1a0028f4:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a0028f6:	2100      	movs	r1, #0
1a0028f8:	1a20      	subs	r0, r4, r0
1a0028fa:	f7ff fda7 	bl	1a00244c <prvAddCurrentTaskToDelayedList>
1a0028fe:	e7e9      	b.n	1a0028d4 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a002900:	42a2      	cmp	r2, r4
1a002902:	d801      	bhi.n	1a002908 <vTaskDelayUntil+0x90>
1a002904:	42a0      	cmp	r0, r4
1a002906:	d201      	bcs.n	1a00290c <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a002908:	602c      	str	r4, [r5, #0]
1a00290a:	e7f4      	b.n	1a0028f6 <vTaskDelayUntil+0x7e>
1a00290c:	602c      	str	r4, [r5, #0]
1a00290e:	e7e1      	b.n	1a0028d4 <vTaskDelayUntil+0x5c>
1a002910:	10002aac 	.word	0x10002aac
1a002914:	10002b28 	.word	0x10002b28
1a002918:	e000ed04 	.word	0xe000ed04

1a00291c <vTaskDelay>:
	{
1a00291c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00291e:	b1a8      	cbz	r0, 1a00294c <vTaskDelay+0x30>
1a002920:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a002922:	4b0f      	ldr	r3, [pc, #60]	; (1a002960 <vTaskDelay+0x44>)
1a002924:	681b      	ldr	r3, [r3, #0]
1a002926:	b143      	cbz	r3, 1a00293a <vTaskDelay+0x1e>
1a002928:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00292c:	f383 8811 	msr	BASEPRI, r3
1a002930:	f3bf 8f6f 	isb	sy
1a002934:	f3bf 8f4f 	dsb	sy
1a002938:	e7fe      	b.n	1a002938 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a00293a:	f7ff fe89 	bl	1a002650 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a00293e:	2100      	movs	r1, #0
1a002940:	4620      	mov	r0, r4
1a002942:	f7ff fd83 	bl	1a00244c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a002946:	f7ff ff1d 	bl	1a002784 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00294a:	b938      	cbnz	r0, 1a00295c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a00294c:	4b05      	ldr	r3, [pc, #20]	; (1a002964 <vTaskDelay+0x48>)
1a00294e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002952:	601a      	str	r2, [r3, #0]
1a002954:	f3bf 8f4f 	dsb	sy
1a002958:	f3bf 8f6f 	isb	sy
	}
1a00295c:	bd10      	pop	{r4, pc}
1a00295e:	bf00      	nop
1a002960:	10002aac 	.word	0x10002aac
1a002964:	e000ed04 	.word	0xe000ed04

1a002968 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a002968:	4b2c      	ldr	r3, [pc, #176]	; (1a002a1c <vTaskSwitchContext+0xb4>)
1a00296a:	681b      	ldr	r3, [r3, #0]
1a00296c:	b11b      	cbz	r3, 1a002976 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a00296e:	4b2c      	ldr	r3, [pc, #176]	; (1a002a20 <vTaskSwitchContext+0xb8>)
1a002970:	2201      	movs	r2, #1
1a002972:	601a      	str	r2, [r3, #0]
1a002974:	4770      	bx	lr
{
1a002976:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a002978:	4b29      	ldr	r3, [pc, #164]	; (1a002a20 <vTaskSwitchContext+0xb8>)
1a00297a:	2200      	movs	r2, #0
1a00297c:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a00297e:	4b29      	ldr	r3, [pc, #164]	; (1a002a24 <vTaskSwitchContext+0xbc>)
1a002980:	681b      	ldr	r3, [r3, #0]
1a002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a002984:	681a      	ldr	r2, [r3, #0]
1a002986:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00298a:	d103      	bne.n	1a002994 <vTaskSwitchContext+0x2c>
1a00298c:	685a      	ldr	r2, [r3, #4]
1a00298e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002992:	d01b      	beq.n	1a0029cc <vTaskSwitchContext+0x64>
1a002994:	4b23      	ldr	r3, [pc, #140]	; (1a002a24 <vTaskSwitchContext+0xbc>)
1a002996:	6818      	ldr	r0, [r3, #0]
1a002998:	6819      	ldr	r1, [r3, #0]
1a00299a:	3134      	adds	r1, #52	; 0x34
1a00299c:	f7ff fc14 	bl	1a0021c8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0029a0:	4b21      	ldr	r3, [pc, #132]	; (1a002a28 <vTaskSwitchContext+0xc0>)
1a0029a2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0029a4:	fab3 f383 	clz	r3, r3
1a0029a8:	b2db      	uxtb	r3, r3
1a0029aa:	f1c3 031f 	rsb	r3, r3, #31
1a0029ae:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0029b2:	008a      	lsls	r2, r1, #2
1a0029b4:	491d      	ldr	r1, [pc, #116]	; (1a002a2c <vTaskSwitchContext+0xc4>)
1a0029b6:	588a      	ldr	r2, [r1, r2]
1a0029b8:	b98a      	cbnz	r2, 1a0029de <vTaskSwitchContext+0x76>
	__asm volatile
1a0029ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029be:	f383 8811 	msr	BASEPRI, r3
1a0029c2:	f3bf 8f6f 	isb	sy
1a0029c6:	f3bf 8f4f 	dsb	sy
1a0029ca:	e7fe      	b.n	1a0029ca <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0029cc:	689a      	ldr	r2, [r3, #8]
1a0029ce:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0029d2:	d1df      	bne.n	1a002994 <vTaskSwitchContext+0x2c>
1a0029d4:	68db      	ldr	r3, [r3, #12]
1a0029d6:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0029da:	d1db      	bne.n	1a002994 <vTaskSwitchContext+0x2c>
1a0029dc:	e7e0      	b.n	1a0029a0 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0029de:	4813      	ldr	r0, [pc, #76]	; (1a002a2c <vTaskSwitchContext+0xc4>)
1a0029e0:	009a      	lsls	r2, r3, #2
1a0029e2:	18d4      	adds	r4, r2, r3
1a0029e4:	00a1      	lsls	r1, r4, #2
1a0029e6:	4401      	add	r1, r0
1a0029e8:	684c      	ldr	r4, [r1, #4]
1a0029ea:	6864      	ldr	r4, [r4, #4]
1a0029ec:	604c      	str	r4, [r1, #4]
1a0029ee:	441a      	add	r2, r3
1a0029f0:	0091      	lsls	r1, r2, #2
1a0029f2:	3108      	adds	r1, #8
1a0029f4:	4408      	add	r0, r1
1a0029f6:	4284      	cmp	r4, r0
1a0029f8:	d009      	beq.n	1a002a0e <vTaskSwitchContext+0xa6>
1a0029fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0029fe:	009a      	lsls	r2, r3, #2
1a002a00:	4b0a      	ldr	r3, [pc, #40]	; (1a002a2c <vTaskSwitchContext+0xc4>)
1a002a02:	4413      	add	r3, r2
1a002a04:	685b      	ldr	r3, [r3, #4]
1a002a06:	68da      	ldr	r2, [r3, #12]
1a002a08:	4b06      	ldr	r3, [pc, #24]	; (1a002a24 <vTaskSwitchContext+0xbc>)
1a002a0a:	601a      	str	r2, [r3, #0]
}
1a002a0c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002a0e:	6861      	ldr	r1, [r4, #4]
1a002a10:	4806      	ldr	r0, [pc, #24]	; (1a002a2c <vTaskSwitchContext+0xc4>)
1a002a12:	2214      	movs	r2, #20
1a002a14:	fb02 0203 	mla	r2, r2, r3, r0
1a002a18:	6051      	str	r1, [r2, #4]
1a002a1a:	e7ee      	b.n	1a0029fa <vTaskSwitchContext+0x92>
1a002a1c:	10002aac 	.word	0x10002aac
1a002a20:	10002b2c 	.word	0x10002b2c
1a002a24:	10002a08 	.word	0x10002a08
1a002a28:	10002ab4 	.word	0x10002ab4
1a002a2c:	10002a14 	.word	0x10002a14

1a002a30 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a002a30:	b940      	cbnz	r0, 1a002a44 <vTaskPlaceOnEventList+0x14>
1a002a32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a36:	f383 8811 	msr	BASEPRI, r3
1a002a3a:	f3bf 8f6f 	isb	sy
1a002a3e:	f3bf 8f4f 	dsb	sy
1a002a42:	e7fe      	b.n	1a002a42 <vTaskPlaceOnEventList+0x12>
{
1a002a44:	b510      	push	{r4, lr}
1a002a46:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002a48:	4b04      	ldr	r3, [pc, #16]	; (1a002a5c <vTaskPlaceOnEventList+0x2c>)
1a002a4a:	6819      	ldr	r1, [r3, #0]
1a002a4c:	3118      	adds	r1, #24
1a002a4e:	f7ff fb74 	bl	1a00213a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a002a52:	2101      	movs	r1, #1
1a002a54:	4620      	mov	r0, r4
1a002a56:	f7ff fcf9 	bl	1a00244c <prvAddCurrentTaskToDelayedList>
}
1a002a5a:	bd10      	pop	{r4, pc}
1a002a5c:	10002a08 	.word	0x10002a08

1a002a60 <vTaskPlaceOnEventListRestricted>:
	{
1a002a60:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a002a62:	b940      	cbnz	r0, 1a002a76 <vTaskPlaceOnEventListRestricted+0x16>
1a002a64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a68:	f383 8811 	msr	BASEPRI, r3
1a002a6c:	f3bf 8f6f 	isb	sy
1a002a70:	f3bf 8f4f 	dsb	sy
1a002a74:	e7fe      	b.n	1a002a74 <vTaskPlaceOnEventListRestricted+0x14>
1a002a76:	460c      	mov	r4, r1
1a002a78:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002a7a:	4a06      	ldr	r2, [pc, #24]	; (1a002a94 <vTaskPlaceOnEventListRestricted+0x34>)
1a002a7c:	6811      	ldr	r1, [r2, #0]
1a002a7e:	3118      	adds	r1, #24
1a002a80:	f7ff fb4f 	bl	1a002122 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a002a84:	b10d      	cbz	r5, 1a002a8a <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a002a86:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a002a8a:	4629      	mov	r1, r5
1a002a8c:	4620      	mov	r0, r4
1a002a8e:	f7ff fcdd 	bl	1a00244c <prvAddCurrentTaskToDelayedList>
	}
1a002a92:	bd38      	pop	{r3, r4, r5, pc}
1a002a94:	10002a08 	.word	0x10002a08

1a002a98 <xTaskRemoveFromEventList>:
{
1a002a98:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a002a9a:	68c3      	ldr	r3, [r0, #12]
1a002a9c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a002a9e:	b944      	cbnz	r4, 1a002ab2 <xTaskRemoveFromEventList+0x1a>
1a002aa0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002aa4:	f383 8811 	msr	BASEPRI, r3
1a002aa8:	f3bf 8f6f 	isb	sy
1a002aac:	f3bf 8f4f 	dsb	sy
1a002ab0:	e7fe      	b.n	1a002ab0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002ab2:	f104 0518 	add.w	r5, r4, #24
1a002ab6:	4628      	mov	r0, r5
1a002ab8:	f7ff fb59 	bl	1a00216e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002abc:	4b13      	ldr	r3, [pc, #76]	; (1a002b0c <xTaskRemoveFromEventList+0x74>)
1a002abe:	681b      	ldr	r3, [r3, #0]
1a002ac0:	b9e3      	cbnz	r3, 1a002afc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002ac2:	1d25      	adds	r5, r4, #4
1a002ac4:	4628      	mov	r0, r5
1a002ac6:	f7ff fb52 	bl	1a00216e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a002aca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002acc:	2201      	movs	r2, #1
1a002ace:	409a      	lsls	r2, r3
1a002ad0:	490f      	ldr	r1, [pc, #60]	; (1a002b10 <xTaskRemoveFromEventList+0x78>)
1a002ad2:	6808      	ldr	r0, [r1, #0]
1a002ad4:	4302      	orrs	r2, r0
1a002ad6:	600a      	str	r2, [r1, #0]
1a002ad8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002adc:	009a      	lsls	r2, r3, #2
1a002ade:	4629      	mov	r1, r5
1a002ae0:	480c      	ldr	r0, [pc, #48]	; (1a002b14 <xTaskRemoveFromEventList+0x7c>)
1a002ae2:	4410      	add	r0, r2
1a002ae4:	f7ff fb1d 	bl	1a002122 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a002ae8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002aea:	4b0b      	ldr	r3, [pc, #44]	; (1a002b18 <xTaskRemoveFromEventList+0x80>)
1a002aec:	681b      	ldr	r3, [r3, #0]
1a002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002af0:	429a      	cmp	r2, r3
1a002af2:	d908      	bls.n	1a002b06 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002af4:	2001      	movs	r0, #1
1a002af6:	4b09      	ldr	r3, [pc, #36]	; (1a002b1c <xTaskRemoveFromEventList+0x84>)
1a002af8:	6018      	str	r0, [r3, #0]
}
1a002afa:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a002afc:	4629      	mov	r1, r5
1a002afe:	4808      	ldr	r0, [pc, #32]	; (1a002b20 <xTaskRemoveFromEventList+0x88>)
1a002b00:	f7ff fb0f 	bl	1a002122 <vListInsertEnd>
1a002b04:	e7f0      	b.n	1a002ae8 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a002b06:	2000      	movs	r0, #0
	return xReturn;
1a002b08:	e7f7      	b.n	1a002afa <xTaskRemoveFromEventList+0x62>
1a002b0a:	bf00      	nop
1a002b0c:	10002aac 	.word	0x10002aac
1a002b10:	10002ab4 	.word	0x10002ab4
1a002b14:	10002a14 	.word	0x10002a14
1a002b18:	10002a08 	.word	0x10002a08
1a002b1c:	10002b2c 	.word	0x10002b2c
1a002b20:	10002ae8 	.word	0x10002ae8

1a002b24 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a002b24:	4b03      	ldr	r3, [pc, #12]	; (1a002b34 <vTaskInternalSetTimeOutState+0x10>)
1a002b26:	681b      	ldr	r3, [r3, #0]
1a002b28:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a002b2a:	4b03      	ldr	r3, [pc, #12]	; (1a002b38 <vTaskInternalSetTimeOutState+0x14>)
1a002b2c:	681b      	ldr	r3, [r3, #0]
1a002b2e:	6043      	str	r3, [r0, #4]
}
1a002b30:	4770      	bx	lr
1a002b32:	bf00      	nop
1a002b34:	10002ae4 	.word	0x10002ae4
1a002b38:	10002b28 	.word	0x10002b28

1a002b3c <xTaskCheckForTimeOut>:
{
1a002b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a002b3e:	b150      	cbz	r0, 1a002b56 <xTaskCheckForTimeOut+0x1a>
1a002b40:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a002b42:	b989      	cbnz	r1, 1a002b68 <xTaskCheckForTimeOut+0x2c>
1a002b44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b48:	f383 8811 	msr	BASEPRI, r3
1a002b4c:	f3bf 8f6f 	isb	sy
1a002b50:	f3bf 8f4f 	dsb	sy
1a002b54:	e7fe      	b.n	1a002b54 <xTaskCheckForTimeOut+0x18>
1a002b56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b5a:	f383 8811 	msr	BASEPRI, r3
1a002b5e:	f3bf 8f6f 	isb	sy
1a002b62:	f3bf 8f4f 	dsb	sy
1a002b66:	e7fe      	b.n	1a002b66 <xTaskCheckForTimeOut+0x2a>
1a002b68:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a002b6a:	f000 fc2b 	bl	1a0033c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a002b6e:	4b11      	ldr	r3, [pc, #68]	; (1a002bb4 <xTaskCheckForTimeOut+0x78>)
1a002b70:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a002b72:	6868      	ldr	r0, [r5, #4]
1a002b74:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a002b76:	6823      	ldr	r3, [r4, #0]
1a002b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002b7c:	d016      	beq.n	1a002bac <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002b7e:	682f      	ldr	r7, [r5, #0]
1a002b80:	4e0d      	ldr	r6, [pc, #52]	; (1a002bb8 <xTaskCheckForTimeOut+0x7c>)
1a002b82:	6836      	ldr	r6, [r6, #0]
1a002b84:	42b7      	cmp	r7, r6
1a002b86:	d001      	beq.n	1a002b8c <xTaskCheckForTimeOut+0x50>
1a002b88:	4288      	cmp	r0, r1
1a002b8a:	d911      	bls.n	1a002bb0 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002b8c:	4293      	cmp	r3, r2
1a002b8e:	d803      	bhi.n	1a002b98 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002b90:	2300      	movs	r3, #0
1a002b92:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a002b94:	2401      	movs	r4, #1
1a002b96:	e005      	b.n	1a002ba4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a002b98:	1a9b      	subs	r3, r3, r2
1a002b9a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002b9c:	4628      	mov	r0, r5
1a002b9e:	f7ff ffc1 	bl	1a002b24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a002ba2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002ba4:	f000 fc30 	bl	1a003408 <vPortExitCritical>
}
1a002ba8:	4620      	mov	r0, r4
1a002baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a002bac:	2400      	movs	r4, #0
1a002bae:	e7f9      	b.n	1a002ba4 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a002bb0:	2401      	movs	r4, #1
1a002bb2:	e7f7      	b.n	1a002ba4 <xTaskCheckForTimeOut+0x68>
1a002bb4:	10002b28 	.word	0x10002b28
1a002bb8:	10002ae4 	.word	0x10002ae4

1a002bbc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a002bbc:	4b01      	ldr	r3, [pc, #4]	; (1a002bc4 <vTaskMissedYield+0x8>)
1a002bbe:	2201      	movs	r2, #1
1a002bc0:	601a      	str	r2, [r3, #0]
}
1a002bc2:	4770      	bx	lr
1a002bc4:	10002b2c 	.word	0x10002b2c

1a002bc8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a002bc8:	4b05      	ldr	r3, [pc, #20]	; (1a002be0 <xTaskGetSchedulerState+0x18>)
1a002bca:	681b      	ldr	r3, [r3, #0]
1a002bcc:	b133      	cbz	r3, 1a002bdc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002bce:	4b05      	ldr	r3, [pc, #20]	; (1a002be4 <xTaskGetSchedulerState+0x1c>)
1a002bd0:	681b      	ldr	r3, [r3, #0]
1a002bd2:	b10b      	cbz	r3, 1a002bd8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002bd4:	2000      	movs	r0, #0
	}
1a002bd6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a002bd8:	2002      	movs	r0, #2
1a002bda:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a002bdc:	2001      	movs	r0, #1
1a002bde:	4770      	bx	lr
1a002be0:	10002afc 	.word	0x10002afc
1a002be4:	10002aac 	.word	0x10002aac

1a002be8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a002be8:	2800      	cmp	r0, #0
1a002bea:	d050      	beq.n	1a002c8e <xTaskPriorityInherit+0xa6>
	{
1a002bec:	b538      	push	{r3, r4, r5, lr}
1a002bee:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a002bf0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a002bf2:	4928      	ldr	r1, [pc, #160]	; (1a002c94 <xTaskPriorityInherit+0xac>)
1a002bf4:	6809      	ldr	r1, [r1, #0]
1a002bf6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a002bf8:	428a      	cmp	r2, r1
1a002bfa:	d23e      	bcs.n	1a002c7a <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002bfc:	6981      	ldr	r1, [r0, #24]
1a002bfe:	2900      	cmp	r1, #0
1a002c00:	db05      	blt.n	1a002c0e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002c02:	4924      	ldr	r1, [pc, #144]	; (1a002c94 <xTaskPriorityInherit+0xac>)
1a002c04:	6809      	ldr	r1, [r1, #0]
1a002c06:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a002c08:	f1c1 0107 	rsb	r1, r1, #7
1a002c0c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a002c0e:	6960      	ldr	r0, [r4, #20]
1a002c10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a002c14:	0091      	lsls	r1, r2, #2
1a002c16:	4a20      	ldr	r2, [pc, #128]	; (1a002c98 <xTaskPriorityInherit+0xb0>)
1a002c18:	440a      	add	r2, r1
1a002c1a:	4290      	cmp	r0, r2
1a002c1c:	d005      	beq.n	1a002c2a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002c1e:	4a1d      	ldr	r2, [pc, #116]	; (1a002c94 <xTaskPriorityInherit+0xac>)
1a002c20:	6812      	ldr	r2, [r2, #0]
1a002c22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a002c24:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a002c26:	2001      	movs	r0, #1
	}
1a002c28:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002c2a:	1d25      	adds	r5, r4, #4
1a002c2c:	4628      	mov	r0, r5
1a002c2e:	f7ff fa9e 	bl	1a00216e <uxListRemove>
1a002c32:	b968      	cbnz	r0, 1a002c50 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a002c34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002c36:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002c3a:	008a      	lsls	r2, r1, #2
1a002c3c:	4916      	ldr	r1, [pc, #88]	; (1a002c98 <xTaskPriorityInherit+0xb0>)
1a002c3e:	588a      	ldr	r2, [r1, r2]
1a002c40:	b932      	cbnz	r2, 1a002c50 <xTaskPriorityInherit+0x68>
1a002c42:	2201      	movs	r2, #1
1a002c44:	409a      	lsls	r2, r3
1a002c46:	4915      	ldr	r1, [pc, #84]	; (1a002c9c <xTaskPriorityInherit+0xb4>)
1a002c48:	680b      	ldr	r3, [r1, #0]
1a002c4a:	ea23 0302 	bic.w	r3, r3, r2
1a002c4e:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002c50:	4b10      	ldr	r3, [pc, #64]	; (1a002c94 <xTaskPriorityInherit+0xac>)
1a002c52:	681b      	ldr	r3, [r3, #0]
1a002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002c56:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a002c58:	2401      	movs	r4, #1
1a002c5a:	fa04 f203 	lsl.w	r2, r4, r3
1a002c5e:	490f      	ldr	r1, [pc, #60]	; (1a002c9c <xTaskPriorityInherit+0xb4>)
1a002c60:	6808      	ldr	r0, [r1, #0]
1a002c62:	4302      	orrs	r2, r0
1a002c64:	600a      	str	r2, [r1, #0]
1a002c66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002c6a:	009a      	lsls	r2, r3, #2
1a002c6c:	4629      	mov	r1, r5
1a002c6e:	480a      	ldr	r0, [pc, #40]	; (1a002c98 <xTaskPriorityInherit+0xb0>)
1a002c70:	4410      	add	r0, r2
1a002c72:	f7ff fa56 	bl	1a002122 <vListInsertEnd>
				xReturn = pdTRUE;
1a002c76:	4620      	mov	r0, r4
1a002c78:	e7d6      	b.n	1a002c28 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a002c7a:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a002c7c:	4b05      	ldr	r3, [pc, #20]	; (1a002c94 <xTaskPriorityInherit+0xac>)
1a002c7e:	681b      	ldr	r3, [r3, #0]
1a002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002c82:	429a      	cmp	r2, r3
1a002c84:	d201      	bcs.n	1a002c8a <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a002c86:	2001      	movs	r0, #1
		return xReturn;
1a002c88:	e7ce      	b.n	1a002c28 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a002c8a:	2000      	movs	r0, #0
1a002c8c:	e7cc      	b.n	1a002c28 <xTaskPriorityInherit+0x40>
1a002c8e:	2000      	movs	r0, #0
	}
1a002c90:	4770      	bx	lr
1a002c92:	bf00      	nop
1a002c94:	10002a08 	.word	0x10002a08
1a002c98:	10002a14 	.word	0x10002a14
1a002c9c:	10002ab4 	.word	0x10002ab4

1a002ca0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002ca0:	2800      	cmp	r0, #0
1a002ca2:	d049      	beq.n	1a002d38 <xTaskPriorityDisinherit+0x98>
	{
1a002ca4:	b538      	push	{r3, r4, r5, lr}
1a002ca6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002ca8:	4a26      	ldr	r2, [pc, #152]	; (1a002d44 <xTaskPriorityDisinherit+0xa4>)
1a002caa:	6812      	ldr	r2, [r2, #0]
1a002cac:	4282      	cmp	r2, r0
1a002cae:	d008      	beq.n	1a002cc2 <xTaskPriorityDisinherit+0x22>
1a002cb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cb4:	f383 8811 	msr	BASEPRI, r3
1a002cb8:	f3bf 8f6f 	isb	sy
1a002cbc:	f3bf 8f4f 	dsb	sy
1a002cc0:	e7fe      	b.n	1a002cc0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a002cc2:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a002cc4:	b942      	cbnz	r2, 1a002cd8 <xTaskPriorityDisinherit+0x38>
1a002cc6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cca:	f383 8811 	msr	BASEPRI, r3
1a002cce:	f3bf 8f6f 	isb	sy
1a002cd2:	f3bf 8f4f 	dsb	sy
1a002cd6:	e7fe      	b.n	1a002cd6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a002cd8:	3a01      	subs	r2, #1
1a002cda:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002cdc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a002cde:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a002ce0:	4288      	cmp	r0, r1
1a002ce2:	d02b      	beq.n	1a002d3c <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a002ce4:	bb62      	cbnz	r2, 1a002d40 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002ce6:	1d25      	adds	r5, r4, #4
1a002ce8:	4628      	mov	r0, r5
1a002cea:	f7ff fa40 	bl	1a00216e <uxListRemove>
1a002cee:	b970      	cbnz	r0, 1a002d0e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002cf0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002cf2:	2314      	movs	r3, #20
1a002cf4:	fb03 f302 	mul.w	r3, r3, r2
1a002cf8:	4913      	ldr	r1, [pc, #76]	; (1a002d48 <xTaskPriorityDisinherit+0xa8>)
1a002cfa:	58cb      	ldr	r3, [r1, r3]
1a002cfc:	b93b      	cbnz	r3, 1a002d0e <xTaskPriorityDisinherit+0x6e>
1a002cfe:	2301      	movs	r3, #1
1a002d00:	fa03 f202 	lsl.w	r2, r3, r2
1a002d04:	4911      	ldr	r1, [pc, #68]	; (1a002d4c <xTaskPriorityDisinherit+0xac>)
1a002d06:	680b      	ldr	r3, [r1, #0]
1a002d08:	ea23 0302 	bic.w	r3, r3, r2
1a002d0c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a002d0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a002d10:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002d12:	f1c3 0207 	rsb	r2, r3, #7
1a002d16:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a002d18:	2401      	movs	r4, #1
1a002d1a:	fa04 f203 	lsl.w	r2, r4, r3
1a002d1e:	490b      	ldr	r1, [pc, #44]	; (1a002d4c <xTaskPriorityDisinherit+0xac>)
1a002d20:	6808      	ldr	r0, [r1, #0]
1a002d22:	4302      	orrs	r2, r0
1a002d24:	600a      	str	r2, [r1, #0]
1a002d26:	4629      	mov	r1, r5
1a002d28:	4a07      	ldr	r2, [pc, #28]	; (1a002d48 <xTaskPriorityDisinherit+0xa8>)
1a002d2a:	2014      	movs	r0, #20
1a002d2c:	fb00 2003 	mla	r0, r0, r3, r2
1a002d30:	f7ff f9f7 	bl	1a002122 <vListInsertEnd>
					xReturn = pdTRUE;
1a002d34:	4620      	mov	r0, r4
	}
1a002d36:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a002d38:	2000      	movs	r0, #0
	}
1a002d3a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002d3c:	2000      	movs	r0, #0
1a002d3e:	e7fa      	b.n	1a002d36 <xTaskPriorityDisinherit+0x96>
1a002d40:	2000      	movs	r0, #0
		return xReturn;
1a002d42:	e7f8      	b.n	1a002d36 <xTaskPriorityDisinherit+0x96>
1a002d44:	10002a08 	.word	0x10002a08
1a002d48:	10002a14 	.word	0x10002a14
1a002d4c:	10002ab4 	.word	0x10002ab4

1a002d50 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a002d50:	2800      	cmp	r0, #0
1a002d52:	d055      	beq.n	1a002e00 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a002d54:	b538      	push	{r3, r4, r5, lr}
1a002d56:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a002d58:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a002d5a:	b940      	cbnz	r0, 1a002d6e <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002d5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d60:	f383 8811 	msr	BASEPRI, r3
1a002d64:	f3bf 8f6f 	isb	sy
1a002d68:	f3bf 8f4f 	dsb	sy
1a002d6c:	e7fe      	b.n	1a002d6c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a002d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a002d70:	428a      	cmp	r2, r1
1a002d72:	d200      	bcs.n	1a002d76 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a002d74:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a002d76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a002d78:	4291      	cmp	r1, r2
1a002d7a:	d001      	beq.n	1a002d80 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002d7c:	2801      	cmp	r0, #1
1a002d7e:	d000      	beq.n	1a002d82 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a002d80:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a002d82:	4820      	ldr	r0, [pc, #128]	; (1a002e04 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a002d84:	6800      	ldr	r0, [r0, #0]
1a002d86:	4298      	cmp	r0, r3
1a002d88:	d108      	bne.n	1a002d9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a002d8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d8e:	f383 8811 	msr	BASEPRI, r3
1a002d92:	f3bf 8f6f 	isb	sy
1a002d96:	f3bf 8f4f 	dsb	sy
1a002d9a:	e7fe      	b.n	1a002d9a <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a002d9c:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002d9e:	6998      	ldr	r0, [r3, #24]
1a002da0:	2800      	cmp	r0, #0
1a002da2:	db02      	blt.n	1a002daa <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002da4:	f1c2 0207 	rsb	r2, r2, #7
1a002da8:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a002daa:	695a      	ldr	r2, [r3, #20]
1a002dac:	4816      	ldr	r0, [pc, #88]	; (1a002e08 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002dae:	2414      	movs	r4, #20
1a002db0:	fb04 0101 	mla	r1, r4, r1, r0
1a002db4:	428a      	cmp	r2, r1
1a002db6:	d1e3      	bne.n	1a002d80 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a002db8:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002dba:	1d1d      	adds	r5, r3, #4
1a002dbc:	4628      	mov	r0, r5
1a002dbe:	f7ff f9d6 	bl	1a00216e <uxListRemove>
1a002dc2:	b970      	cbnz	r0, 1a002de2 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002dc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002dc6:	2314      	movs	r3, #20
1a002dc8:	fb03 f302 	mul.w	r3, r3, r2
1a002dcc:	490e      	ldr	r1, [pc, #56]	; (1a002e08 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002dce:	58cb      	ldr	r3, [r1, r3]
1a002dd0:	b93b      	cbnz	r3, 1a002de2 <vTaskPriorityDisinheritAfterTimeout+0x92>
1a002dd2:	2301      	movs	r3, #1
1a002dd4:	fa03 f202 	lsl.w	r2, r3, r2
1a002dd8:	490c      	ldr	r1, [pc, #48]	; (1a002e0c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a002dda:	680b      	ldr	r3, [r1, #0]
1a002ddc:	ea23 0302 	bic.w	r3, r3, r2
1a002de0:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a002de2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002de4:	2301      	movs	r3, #1
1a002de6:	4093      	lsls	r3, r2
1a002de8:	4908      	ldr	r1, [pc, #32]	; (1a002e0c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a002dea:	6808      	ldr	r0, [r1, #0]
1a002dec:	4303      	orrs	r3, r0
1a002dee:	600b      	str	r3, [r1, #0]
1a002df0:	4629      	mov	r1, r5
1a002df2:	4b05      	ldr	r3, [pc, #20]	; (1a002e08 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002df4:	2014      	movs	r0, #20
1a002df6:	fb00 3002 	mla	r0, r0, r2, r3
1a002dfa:	f7ff f992 	bl	1a002122 <vListInsertEnd>
	}
1a002dfe:	e7bf      	b.n	1a002d80 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a002e00:	4770      	bx	lr
1a002e02:	bf00      	nop
1a002e04:	10002a08 	.word	0x10002a08
1a002e08:	10002a14 	.word	0x10002a14
1a002e0c:	10002ab4 	.word	0x10002ab4

1a002e10 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a002e10:	4b05      	ldr	r3, [pc, #20]	; (1a002e28 <pvTaskIncrementMutexHeldCount+0x18>)
1a002e12:	681b      	ldr	r3, [r3, #0]
1a002e14:	b123      	cbz	r3, 1a002e20 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a002e16:	4b04      	ldr	r3, [pc, #16]	; (1a002e28 <pvTaskIncrementMutexHeldCount+0x18>)
1a002e18:	681a      	ldr	r2, [r3, #0]
1a002e1a:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a002e1c:	3301      	adds	r3, #1
1a002e1e:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a002e20:	4b01      	ldr	r3, [pc, #4]	; (1a002e28 <pvTaskIncrementMutexHeldCount+0x18>)
1a002e22:	6818      	ldr	r0, [r3, #0]
	}
1a002e24:	4770      	bx	lr
1a002e26:	bf00      	nop
1a002e28:	10002a08 	.word	0x10002a08

1a002e2c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002e2c:	4b06      	ldr	r3, [pc, #24]	; (1a002e48 <prvGetNextExpireTime+0x1c>)
1a002e2e:	681a      	ldr	r2, [r3, #0]
1a002e30:	6813      	ldr	r3, [r2, #0]
1a002e32:	fab3 f383 	clz	r3, r3
1a002e36:	095b      	lsrs	r3, r3, #5
1a002e38:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a002e3a:	b913      	cbnz	r3, 1a002e42 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002e3c:	68d3      	ldr	r3, [r2, #12]
1a002e3e:	6818      	ldr	r0, [r3, #0]
1a002e40:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a002e42:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002e44:	4770      	bx	lr
1a002e46:	bf00      	nop
1a002e48:	10002b30 	.word	0x10002b30

1a002e4c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002e4c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a002e4e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002e50:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a002e52:	4291      	cmp	r1, r2
1a002e54:	d80c      	bhi.n	1a002e70 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002e56:	1ad2      	subs	r2, r2, r3
1a002e58:	6983      	ldr	r3, [r0, #24]
1a002e5a:	429a      	cmp	r2, r3
1a002e5c:	d301      	bcc.n	1a002e62 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002e5e:	2001      	movs	r0, #1
1a002e60:	e010      	b.n	1a002e84 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002e62:	1d01      	adds	r1, r0, #4
1a002e64:	4b09      	ldr	r3, [pc, #36]	; (1a002e8c <prvInsertTimerInActiveList+0x40>)
1a002e66:	6818      	ldr	r0, [r3, #0]
1a002e68:	f7ff f967 	bl	1a00213a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002e6c:	2000      	movs	r0, #0
1a002e6e:	e009      	b.n	1a002e84 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002e70:	429a      	cmp	r2, r3
1a002e72:	d201      	bcs.n	1a002e78 <prvInsertTimerInActiveList+0x2c>
1a002e74:	4299      	cmp	r1, r3
1a002e76:	d206      	bcs.n	1a002e86 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002e78:	1d01      	adds	r1, r0, #4
1a002e7a:	4b05      	ldr	r3, [pc, #20]	; (1a002e90 <prvInsertTimerInActiveList+0x44>)
1a002e7c:	6818      	ldr	r0, [r3, #0]
1a002e7e:	f7ff f95c 	bl	1a00213a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002e82:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002e84:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a002e86:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002e88:	e7fc      	b.n	1a002e84 <prvInsertTimerInActiveList+0x38>
1a002e8a:	bf00      	nop
1a002e8c:	10002b34 	.word	0x10002b34
1a002e90:	10002b30 	.word	0x10002b30

1a002e94 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002e94:	b530      	push	{r4, r5, lr}
1a002e96:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002e98:	f000 fa94 	bl	1a0033c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002e9c:	4b11      	ldr	r3, [pc, #68]	; (1a002ee4 <prvCheckForValidListAndQueue+0x50>)
1a002e9e:	681b      	ldr	r3, [r3, #0]
1a002ea0:	b11b      	cbz	r3, 1a002eaa <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002ea2:	f000 fab1 	bl	1a003408 <vPortExitCritical>
}
1a002ea6:	b003      	add	sp, #12
1a002ea8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a002eaa:	4d0f      	ldr	r5, [pc, #60]	; (1a002ee8 <prvCheckForValidListAndQueue+0x54>)
1a002eac:	4628      	mov	r0, r5
1a002eae:	f7ff f92a 	bl	1a002106 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002eb2:	4c0e      	ldr	r4, [pc, #56]	; (1a002eec <prvCheckForValidListAndQueue+0x58>)
1a002eb4:	4620      	mov	r0, r4
1a002eb6:	f7ff f926 	bl	1a002106 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a002eba:	4b0d      	ldr	r3, [pc, #52]	; (1a002ef0 <prvCheckForValidListAndQueue+0x5c>)
1a002ebc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002ebe:	4b0d      	ldr	r3, [pc, #52]	; (1a002ef4 <prvCheckForValidListAndQueue+0x60>)
1a002ec0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002ec2:	2300      	movs	r3, #0
1a002ec4:	9300      	str	r3, [sp, #0]
1a002ec6:	4b0c      	ldr	r3, [pc, #48]	; (1a002ef8 <prvCheckForValidListAndQueue+0x64>)
1a002ec8:	4a0c      	ldr	r2, [pc, #48]	; (1a002efc <prvCheckForValidListAndQueue+0x68>)
1a002eca:	2110      	movs	r1, #16
1a002ecc:	200a      	movs	r0, #10
1a002ece:	f7fe fcca 	bl	1a001866 <xQueueGenericCreateStatic>
1a002ed2:	4b04      	ldr	r3, [pc, #16]	; (1a002ee4 <prvCheckForValidListAndQueue+0x50>)
1a002ed4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002ed6:	2800      	cmp	r0, #0
1a002ed8:	d0e3      	beq.n	1a002ea2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a002eda:	4909      	ldr	r1, [pc, #36]	; (1a002f00 <prvCheckForValidListAndQueue+0x6c>)
1a002edc:	f7ff f8d6 	bl	1a00208c <vQueueAddToRegistry>
1a002ee0:	e7df      	b.n	1a002ea2 <prvCheckForValidListAndQueue+0xe>
1a002ee2:	bf00      	nop
1a002ee4:	10002c54 	.word	0x10002c54
1a002ee8:	10002bd8 	.word	0x10002bd8
1a002eec:	10002bec 	.word	0x10002bec
1a002ef0:	10002b30 	.word	0x10002b30
1a002ef4:	10002b34 	.word	0x10002b34
1a002ef8:	10002c04 	.word	0x10002c04
1a002efc:	10002b38 	.word	0x10002b38
1a002f00:	1a00585c 	.word	0x1a00585c

1a002f04 <prvInitialiseNewTimer>:
{
1a002f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f08:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a002f0a:	b941      	cbnz	r1, 1a002f1e <prvInitialiseNewTimer+0x1a>
1a002f0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f10:	f383 8811 	msr	BASEPRI, r3
1a002f14:	f3bf 8f6f 	isb	sy
1a002f18:	f3bf 8f4f 	dsb	sy
1a002f1c:	e7fe      	b.n	1a002f1c <prvInitialiseNewTimer+0x18>
1a002f1e:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a002f20:	b174      	cbz	r4, 1a002f40 <prvInitialiseNewTimer+0x3c>
1a002f22:	461d      	mov	r5, r3
1a002f24:	4616      	mov	r6, r2
1a002f26:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a002f28:	f7ff ffb4 	bl	1a002e94 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a002f2c:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a002f30:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a002f32:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a002f34:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a002f36:	9b06      	ldr	r3, [sp, #24]
1a002f38:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a002f3a:	1d20      	adds	r0, r4, #4
1a002f3c:	f7ff f8ee 	bl	1a00211c <vListInitialiseItem>
}
1a002f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002f44 <xTimerCreateTimerTask>:
{
1a002f44:	b510      	push	{r4, lr}
1a002f46:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002f48:	f7ff ffa4 	bl	1a002e94 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002f4c:	4b12      	ldr	r3, [pc, #72]	; (1a002f98 <xTimerCreateTimerTask+0x54>)
1a002f4e:	681b      	ldr	r3, [r3, #0]
1a002f50:	b1cb      	cbz	r3, 1a002f86 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002f52:	2400      	movs	r4, #0
1a002f54:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002f56:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002f58:	aa07      	add	r2, sp, #28
1a002f5a:	a906      	add	r1, sp, #24
1a002f5c:	a805      	add	r0, sp, #20
1a002f5e:	f7ff f927 	bl	1a0021b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002f62:	9b05      	ldr	r3, [sp, #20]
1a002f64:	9302      	str	r3, [sp, #8]
1a002f66:	9b06      	ldr	r3, [sp, #24]
1a002f68:	9301      	str	r3, [sp, #4]
1a002f6a:	2304      	movs	r3, #4
1a002f6c:	9300      	str	r3, [sp, #0]
1a002f6e:	4623      	mov	r3, r4
1a002f70:	9a07      	ldr	r2, [sp, #28]
1a002f72:	490a      	ldr	r1, [pc, #40]	; (1a002f9c <xTimerCreateTimerTask+0x58>)
1a002f74:	480a      	ldr	r0, [pc, #40]	; (1a002fa0 <xTimerCreateTimerTask+0x5c>)
1a002f76:	f7ff fab5 	bl	1a0024e4 <xTaskCreateStatic>
1a002f7a:	4b0a      	ldr	r3, [pc, #40]	; (1a002fa4 <xTimerCreateTimerTask+0x60>)
1a002f7c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002f7e:	b110      	cbz	r0, 1a002f86 <xTimerCreateTimerTask+0x42>
}
1a002f80:	2001      	movs	r0, #1
1a002f82:	b008      	add	sp, #32
1a002f84:	bd10      	pop	{r4, pc}
1a002f86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f8a:	f383 8811 	msr	BASEPRI, r3
1a002f8e:	f3bf 8f6f 	isb	sy
1a002f92:	f3bf 8f4f 	dsb	sy
1a002f96:	e7fe      	b.n	1a002f96 <xTimerCreateTimerTask+0x52>
1a002f98:	10002c54 	.word	0x10002c54
1a002f9c:	1a005864 	.word	0x1a005864
1a002fa0:	1a0032d5 	.word	0x1a0032d5
1a002fa4:	10002c58 	.word	0x10002c58

1a002fa8 <xTimerCreateStatic>:
	{
1a002fa8:	b530      	push	{r4, r5, lr}
1a002faa:	b085      	sub	sp, #20
1a002fac:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a002fae:	2530      	movs	r5, #48	; 0x30
1a002fb0:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a002fb2:	9d03      	ldr	r5, [sp, #12]
1a002fb4:	2d30      	cmp	r5, #48	; 0x30
1a002fb6:	d008      	beq.n	1a002fca <xTimerCreateStatic+0x22>
1a002fb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fbc:	f383 8811 	msr	BASEPRI, r3
1a002fc0:	f3bf 8f6f 	isb	sy
1a002fc4:	f3bf 8f4f 	dsb	sy
1a002fc8:	e7fe      	b.n	1a002fc8 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a002fca:	b944      	cbnz	r4, 1a002fde <xTimerCreateStatic+0x36>
1a002fcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fd0:	f383 8811 	msr	BASEPRI, r3
1a002fd4:	f3bf 8f6f 	isb	sy
1a002fd8:	f3bf 8f4f 	dsb	sy
1a002fdc:	e7fe      	b.n	1a002fdc <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002fde:	9401      	str	r4, [sp, #4]
1a002fe0:	9d08      	ldr	r5, [sp, #32]
1a002fe2:	9500      	str	r5, [sp, #0]
1a002fe4:	f7ff ff8e 	bl	1a002f04 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a002fe8:	2301      	movs	r3, #1
1a002fea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002fee:	4620      	mov	r0, r4
1a002ff0:	b005      	add	sp, #20
1a002ff2:	bd30      	pop	{r4, r5, pc}

1a002ff4 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002ff4:	b1c8      	cbz	r0, 1a00302a <xTimerGenericCommand+0x36>
{
1a002ff6:	b530      	push	{r4, r5, lr}
1a002ff8:	b085      	sub	sp, #20
1a002ffa:	4615      	mov	r5, r2
1a002ffc:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002ffe:	4a17      	ldr	r2, [pc, #92]	; (1a00305c <xTimerGenericCommand+0x68>)
1a003000:	6810      	ldr	r0, [r2, #0]
1a003002:	b340      	cbz	r0, 1a003056 <xTimerGenericCommand+0x62>
1a003004:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a003006:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a003008:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00300a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a00300c:	2905      	cmp	r1, #5
1a00300e:	dc1d      	bgt.n	1a00304c <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a003010:	f7ff fdda 	bl	1a002bc8 <xTaskGetSchedulerState>
1a003014:	2802      	cmp	r0, #2
1a003016:	d011      	beq.n	1a00303c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a003018:	2300      	movs	r3, #0
1a00301a:	461a      	mov	r2, r3
1a00301c:	4669      	mov	r1, sp
1a00301e:	480f      	ldr	r0, [pc, #60]	; (1a00305c <xTimerGenericCommand+0x68>)
1a003020:	6800      	ldr	r0, [r0, #0]
1a003022:	f7fe fc8f 	bl	1a001944 <xQueueGenericSend>
}
1a003026:	b005      	add	sp, #20
1a003028:	bd30      	pop	{r4, r5, pc}
1a00302a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00302e:	f383 8811 	msr	BASEPRI, r3
1a003032:	f3bf 8f6f 	isb	sy
1a003036:	f3bf 8f4f 	dsb	sy
1a00303a:	e7fe      	b.n	1a00303a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a00303c:	2300      	movs	r3, #0
1a00303e:	9a08      	ldr	r2, [sp, #32]
1a003040:	4669      	mov	r1, sp
1a003042:	4806      	ldr	r0, [pc, #24]	; (1a00305c <xTimerGenericCommand+0x68>)
1a003044:	6800      	ldr	r0, [r0, #0]
1a003046:	f7fe fc7d 	bl	1a001944 <xQueueGenericSend>
1a00304a:	e7ec      	b.n	1a003026 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a00304c:	2300      	movs	r3, #0
1a00304e:	4669      	mov	r1, sp
1a003050:	f7fe fd36 	bl	1a001ac0 <xQueueGenericSendFromISR>
1a003054:	e7e7      	b.n	1a003026 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a003056:	2000      	movs	r0, #0
	return xReturn;
1a003058:	e7e5      	b.n	1a003026 <xTimerGenericCommand+0x32>
1a00305a:	bf00      	nop
1a00305c:	10002c54 	.word	0x10002c54

1a003060 <prvSwitchTimerLists>:
{
1a003060:	b570      	push	{r4, r5, r6, lr}
1a003062:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a003064:	4b1a      	ldr	r3, [pc, #104]	; (1a0030d0 <prvSwitchTimerLists+0x70>)
1a003066:	681b      	ldr	r3, [r3, #0]
1a003068:	681a      	ldr	r2, [r3, #0]
1a00306a:	b352      	cbz	r2, 1a0030c2 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00306c:	68db      	ldr	r3, [r3, #12]
1a00306e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a003070:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a003072:	1d25      	adds	r5, r4, #4
1a003074:	4628      	mov	r0, r5
1a003076:	f7ff f87a 	bl	1a00216e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00307a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00307c:	4620      	mov	r0, r4
1a00307e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a003080:	69e3      	ldr	r3, [r4, #28]
1a003082:	2b01      	cmp	r3, #1
1a003084:	d1ee      	bne.n	1a003064 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a003086:	69a3      	ldr	r3, [r4, #24]
1a003088:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00308a:	429e      	cmp	r6, r3
1a00308c:	d207      	bcs.n	1a00309e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00308e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a003090:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a003092:	4629      	mov	r1, r5
1a003094:	4b0e      	ldr	r3, [pc, #56]	; (1a0030d0 <prvSwitchTimerLists+0x70>)
1a003096:	6818      	ldr	r0, [r3, #0]
1a003098:	f7ff f84f 	bl	1a00213a <vListInsert>
1a00309c:	e7e2      	b.n	1a003064 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00309e:	2100      	movs	r1, #0
1a0030a0:	9100      	str	r1, [sp, #0]
1a0030a2:	460b      	mov	r3, r1
1a0030a4:	4632      	mov	r2, r6
1a0030a6:	4620      	mov	r0, r4
1a0030a8:	f7ff ffa4 	bl	1a002ff4 <xTimerGenericCommand>
				configASSERT( xResult );
1a0030ac:	2800      	cmp	r0, #0
1a0030ae:	d1d9      	bne.n	1a003064 <prvSwitchTimerLists+0x4>
1a0030b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0030b4:	f383 8811 	msr	BASEPRI, r3
1a0030b8:	f3bf 8f6f 	isb	sy
1a0030bc:	f3bf 8f4f 	dsb	sy
1a0030c0:	e7fe      	b.n	1a0030c0 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a0030c2:	4a04      	ldr	r2, [pc, #16]	; (1a0030d4 <prvSwitchTimerLists+0x74>)
1a0030c4:	6810      	ldr	r0, [r2, #0]
1a0030c6:	4902      	ldr	r1, [pc, #8]	; (1a0030d0 <prvSwitchTimerLists+0x70>)
1a0030c8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a0030ca:	6013      	str	r3, [r2, #0]
}
1a0030cc:	b002      	add	sp, #8
1a0030ce:	bd70      	pop	{r4, r5, r6, pc}
1a0030d0:	10002b30 	.word	0x10002b30
1a0030d4:	10002b34 	.word	0x10002b34

1a0030d8 <prvSampleTimeNow>:
{
1a0030d8:	b538      	push	{r3, r4, r5, lr}
1a0030da:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a0030dc:	f7ff fac0 	bl	1a002660 <xTaskGetTickCount>
1a0030e0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a0030e2:	4b07      	ldr	r3, [pc, #28]	; (1a003100 <prvSampleTimeNow+0x28>)
1a0030e4:	681b      	ldr	r3, [r3, #0]
1a0030e6:	4283      	cmp	r3, r0
1a0030e8:	d805      	bhi.n	1a0030f6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a0030ea:	2300      	movs	r3, #0
1a0030ec:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a0030ee:	4b04      	ldr	r3, [pc, #16]	; (1a003100 <prvSampleTimeNow+0x28>)
1a0030f0:	601c      	str	r4, [r3, #0]
}
1a0030f2:	4620      	mov	r0, r4
1a0030f4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a0030f6:	f7ff ffb3 	bl	1a003060 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0030fa:	2301      	movs	r3, #1
1a0030fc:	602b      	str	r3, [r5, #0]
1a0030fe:	e7f6      	b.n	1a0030ee <prvSampleTimeNow+0x16>
1a003100:	10002c00 	.word	0x10002c00

1a003104 <prvProcessExpiredTimer>:
{
1a003104:	b570      	push	{r4, r5, r6, lr}
1a003106:	b082      	sub	sp, #8
1a003108:	4605      	mov	r5, r0
1a00310a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00310c:	4b14      	ldr	r3, [pc, #80]	; (1a003160 <prvProcessExpiredTimer+0x5c>)
1a00310e:	681b      	ldr	r3, [r3, #0]
1a003110:	68db      	ldr	r3, [r3, #12]
1a003112:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a003114:	1d20      	adds	r0, r4, #4
1a003116:	f7ff f82a 	bl	1a00216e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00311a:	69e3      	ldr	r3, [r4, #28]
1a00311c:	2b01      	cmp	r3, #1
1a00311e:	d004      	beq.n	1a00312a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a003120:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a003122:	4620      	mov	r0, r4
1a003124:	4798      	blx	r3
}
1a003126:	b002      	add	sp, #8
1a003128:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00312a:	69a1      	ldr	r1, [r4, #24]
1a00312c:	462b      	mov	r3, r5
1a00312e:	4632      	mov	r2, r6
1a003130:	4429      	add	r1, r5
1a003132:	4620      	mov	r0, r4
1a003134:	f7ff fe8a 	bl	1a002e4c <prvInsertTimerInActiveList>
1a003138:	2800      	cmp	r0, #0
1a00313a:	d0f1      	beq.n	1a003120 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00313c:	2100      	movs	r1, #0
1a00313e:	9100      	str	r1, [sp, #0]
1a003140:	460b      	mov	r3, r1
1a003142:	462a      	mov	r2, r5
1a003144:	4620      	mov	r0, r4
1a003146:	f7ff ff55 	bl	1a002ff4 <xTimerGenericCommand>
			configASSERT( xResult );
1a00314a:	2800      	cmp	r0, #0
1a00314c:	d1e8      	bne.n	1a003120 <prvProcessExpiredTimer+0x1c>
1a00314e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003152:	f383 8811 	msr	BASEPRI, r3
1a003156:	f3bf 8f6f 	isb	sy
1a00315a:	f3bf 8f4f 	dsb	sy
1a00315e:	e7fe      	b.n	1a00315e <prvProcessExpiredTimer+0x5a>
1a003160:	10002b30 	.word	0x10002b30

1a003164 <prvProcessTimerOrBlockTask>:
{
1a003164:	b570      	push	{r4, r5, r6, lr}
1a003166:	b082      	sub	sp, #8
1a003168:	4606      	mov	r6, r0
1a00316a:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a00316c:	f7ff fa70 	bl	1a002650 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a003170:	a801      	add	r0, sp, #4
1a003172:	f7ff ffb1 	bl	1a0030d8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a003176:	9b01      	ldr	r3, [sp, #4]
1a003178:	bb1b      	cbnz	r3, 1a0031c2 <prvProcessTimerOrBlockTask+0x5e>
1a00317a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a00317c:	b90c      	cbnz	r4, 1a003182 <prvProcessTimerOrBlockTask+0x1e>
1a00317e:	42b0      	cmp	r0, r6
1a003180:	d218      	bcs.n	1a0031b4 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a003182:	b12c      	cbz	r4, 1a003190 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a003184:	4b11      	ldr	r3, [pc, #68]	; (1a0031cc <prvProcessTimerOrBlockTask+0x68>)
1a003186:	681b      	ldr	r3, [r3, #0]
1a003188:	681c      	ldr	r4, [r3, #0]
1a00318a:	fab4 f484 	clz	r4, r4
1a00318e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a003190:	4622      	mov	r2, r4
1a003192:	1b71      	subs	r1, r6, r5
1a003194:	4b0e      	ldr	r3, [pc, #56]	; (1a0031d0 <prvProcessTimerOrBlockTask+0x6c>)
1a003196:	6818      	ldr	r0, [r3, #0]
1a003198:	f7fe ff8c 	bl	1a0020b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00319c:	f7ff faf2 	bl	1a002784 <xTaskResumeAll>
1a0031a0:	b988      	cbnz	r0, 1a0031c6 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a0031a2:	4b0c      	ldr	r3, [pc, #48]	; (1a0031d4 <prvProcessTimerOrBlockTask+0x70>)
1a0031a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0031a8:	601a      	str	r2, [r3, #0]
1a0031aa:	f3bf 8f4f 	dsb	sy
1a0031ae:	f3bf 8f6f 	isb	sy
1a0031b2:	e008      	b.n	1a0031c6 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a0031b4:	f7ff fae6 	bl	1a002784 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0031b8:	4629      	mov	r1, r5
1a0031ba:	4630      	mov	r0, r6
1a0031bc:	f7ff ffa2 	bl	1a003104 <prvProcessExpiredTimer>
1a0031c0:	e001      	b.n	1a0031c6 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a0031c2:	f7ff fadf 	bl	1a002784 <xTaskResumeAll>
}
1a0031c6:	b002      	add	sp, #8
1a0031c8:	bd70      	pop	{r4, r5, r6, pc}
1a0031ca:	bf00      	nop
1a0031cc:	10002b34 	.word	0x10002b34
1a0031d0:	10002c54 	.word	0x10002c54
1a0031d4:	e000ed04 	.word	0xe000ed04

1a0031d8 <prvProcessReceivedCommands>:
{
1a0031d8:	b530      	push	{r4, r5, lr}
1a0031da:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0031dc:	e002      	b.n	1a0031e4 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0031de:	9b04      	ldr	r3, [sp, #16]
1a0031e0:	2b00      	cmp	r3, #0
1a0031e2:	da0f      	bge.n	1a003204 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0031e4:	2200      	movs	r2, #0
1a0031e6:	a904      	add	r1, sp, #16
1a0031e8:	4b39      	ldr	r3, [pc, #228]	; (1a0032d0 <prvProcessReceivedCommands+0xf8>)
1a0031ea:	6818      	ldr	r0, [r3, #0]
1a0031ec:	f7fe fd28 	bl	1a001c40 <xQueueReceive>
1a0031f0:	2800      	cmp	r0, #0
1a0031f2:	d06a      	beq.n	1a0032ca <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0031f4:	9b04      	ldr	r3, [sp, #16]
1a0031f6:	2b00      	cmp	r3, #0
1a0031f8:	daf1      	bge.n	1a0031de <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0031fa:	9907      	ldr	r1, [sp, #28]
1a0031fc:	9806      	ldr	r0, [sp, #24]
1a0031fe:	9b05      	ldr	r3, [sp, #20]
1a003200:	4798      	blx	r3
1a003202:	e7ec      	b.n	1a0031de <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a003204:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a003206:	6963      	ldr	r3, [r4, #20]
1a003208:	b113      	cbz	r3, 1a003210 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00320a:	1d20      	adds	r0, r4, #4
1a00320c:	f7fe ffaf 	bl	1a00216e <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a003210:	a803      	add	r0, sp, #12
1a003212:	f7ff ff61 	bl	1a0030d8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a003216:	9b04      	ldr	r3, [sp, #16]
1a003218:	2b09      	cmp	r3, #9
1a00321a:	d8e3      	bhi.n	1a0031e4 <prvProcessReceivedCommands+0xc>
1a00321c:	a201      	add	r2, pc, #4	; (adr r2, 1a003224 <prvProcessReceivedCommands+0x4c>)
1a00321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a003222:	bf00      	nop
1a003224:	1a00324d 	.word	0x1a00324d
1a003228:	1a00324d 	.word	0x1a00324d
1a00322c:	1a00324d 	.word	0x1a00324d
1a003230:	1a0031e5 	.word	0x1a0031e5
1a003234:	1a003295 	.word	0x1a003295
1a003238:	1a0032bb 	.word	0x1a0032bb
1a00323c:	1a00324d 	.word	0x1a00324d
1a003240:	1a00324d 	.word	0x1a00324d
1a003244:	1a0031e5 	.word	0x1a0031e5
1a003248:	1a003295 	.word	0x1a003295
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a00324c:	9905      	ldr	r1, [sp, #20]
1a00324e:	69a5      	ldr	r5, [r4, #24]
1a003250:	460b      	mov	r3, r1
1a003252:	4602      	mov	r2, r0
1a003254:	4429      	add	r1, r5
1a003256:	4620      	mov	r0, r4
1a003258:	f7ff fdf8 	bl	1a002e4c <prvInsertTimerInActiveList>
1a00325c:	2800      	cmp	r0, #0
1a00325e:	d0c1      	beq.n	1a0031e4 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a003260:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a003262:	4620      	mov	r0, r4
1a003264:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a003266:	69e3      	ldr	r3, [r4, #28]
1a003268:	2b01      	cmp	r3, #1
1a00326a:	d1bb      	bne.n	1a0031e4 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a00326c:	69a2      	ldr	r2, [r4, #24]
1a00326e:	2100      	movs	r1, #0
1a003270:	9100      	str	r1, [sp, #0]
1a003272:	460b      	mov	r3, r1
1a003274:	9805      	ldr	r0, [sp, #20]
1a003276:	4402      	add	r2, r0
1a003278:	4620      	mov	r0, r4
1a00327a:	f7ff febb 	bl	1a002ff4 <xTimerGenericCommand>
							configASSERT( xResult );
1a00327e:	2800      	cmp	r0, #0
1a003280:	d1b0      	bne.n	1a0031e4 <prvProcessReceivedCommands+0xc>
1a003282:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003286:	f383 8811 	msr	BASEPRI, r3
1a00328a:	f3bf 8f6f 	isb	sy
1a00328e:	f3bf 8f4f 	dsb	sy
1a003292:	e7fe      	b.n	1a003292 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a003294:	9905      	ldr	r1, [sp, #20]
1a003296:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a003298:	b131      	cbz	r1, 1a0032a8 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00329a:	4603      	mov	r3, r0
1a00329c:	4602      	mov	r2, r0
1a00329e:	4401      	add	r1, r0
1a0032a0:	4620      	mov	r0, r4
1a0032a2:	f7ff fdd3 	bl	1a002e4c <prvInsertTimerInActiveList>
					break;
1a0032a6:	e79d      	b.n	1a0031e4 <prvProcessReceivedCommands+0xc>
1a0032a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0032ac:	f383 8811 	msr	BASEPRI, r3
1a0032b0:	f3bf 8f6f 	isb	sy
1a0032b4:	f3bf 8f4f 	dsb	sy
1a0032b8:	e7fe      	b.n	1a0032b8 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a0032ba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a0032be:	2b00      	cmp	r3, #0
1a0032c0:	d190      	bne.n	1a0031e4 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a0032c2:	4620      	mov	r0, r4
1a0032c4:	f7fe f9c8 	bl	1a001658 <vPortFree>
1a0032c8:	e78c      	b.n	1a0031e4 <prvProcessReceivedCommands+0xc>
}
1a0032ca:	b009      	add	sp, #36	; 0x24
1a0032cc:	bd30      	pop	{r4, r5, pc}
1a0032ce:	bf00      	nop
1a0032d0:	10002c54 	.word	0x10002c54

1a0032d4 <prvTimerTask>:
{
1a0032d4:	b500      	push	{lr}
1a0032d6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a0032d8:	a801      	add	r0, sp, #4
1a0032da:	f7ff fda7 	bl	1a002e2c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a0032de:	9901      	ldr	r1, [sp, #4]
1a0032e0:	f7ff ff40 	bl	1a003164 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a0032e4:	f7ff ff78 	bl	1a0031d8 <prvProcessReceivedCommands>
1a0032e8:	e7f6      	b.n	1a0032d8 <prvTimerTask+0x4>
1a0032ea:	Address 0x000000001a0032ea is out of bounds.


1a0032ec <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a0032ec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a0032ee:	2300      	movs	r3, #0
1a0032f0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0032f2:	4b0d      	ldr	r3, [pc, #52]	; (1a003328 <prvTaskExitError+0x3c>)
1a0032f4:	681b      	ldr	r3, [r3, #0]
1a0032f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0032fa:	d008      	beq.n	1a00330e <prvTaskExitError+0x22>
1a0032fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003300:	f383 8811 	msr	BASEPRI, r3
1a003304:	f3bf 8f6f 	isb	sy
1a003308:	f3bf 8f4f 	dsb	sy
1a00330c:	e7fe      	b.n	1a00330c <prvTaskExitError+0x20>
1a00330e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003312:	f383 8811 	msr	BASEPRI, r3
1a003316:	f3bf 8f6f 	isb	sy
1a00331a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a00331e:	9b01      	ldr	r3, [sp, #4]
1a003320:	2b00      	cmp	r3, #0
1a003322:	d0fc      	beq.n	1a00331e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a003324:	b002      	add	sp, #8
1a003326:	4770      	bx	lr
1a003328:	10000000 	.word	0x10000000

1a00332c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a00332c:	4808      	ldr	r0, [pc, #32]	; (1a003350 <prvPortStartFirstTask+0x24>)
1a00332e:	6800      	ldr	r0, [r0, #0]
1a003330:	6800      	ldr	r0, [r0, #0]
1a003332:	f380 8808 	msr	MSP, r0
1a003336:	f04f 0000 	mov.w	r0, #0
1a00333a:	f380 8814 	msr	CONTROL, r0
1a00333e:	b662      	cpsie	i
1a003340:	b661      	cpsie	f
1a003342:	f3bf 8f4f 	dsb	sy
1a003346:	f3bf 8f6f 	isb	sy
1a00334a:	df00      	svc	0
1a00334c:	bf00      	nop
1a00334e:	0000      	.short	0x0000
1a003350:	e000ed08 	.word	0xe000ed08

1a003354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a003354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a003364 <vPortEnableVFP+0x10>
1a003358:	6801      	ldr	r1, [r0, #0]
1a00335a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00335e:	6001      	str	r1, [r0, #0]
1a003360:	4770      	bx	lr
1a003362:	0000      	.short	0x0000
1a003364:	e000ed88 	.word	0xe000ed88

1a003368 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a003368:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a00336c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a003370:	f021 0101 	bic.w	r1, r1, #1
1a003374:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a003378:	4b05      	ldr	r3, [pc, #20]	; (1a003390 <pxPortInitialiseStack+0x28>)
1a00337a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a00337e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a003382:	f06f 0302 	mvn.w	r3, #2
1a003386:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00338a:	3844      	subs	r0, #68	; 0x44
1a00338c:	4770      	bx	lr
1a00338e:	bf00      	nop
1a003390:	1a0032ed 	.word	0x1a0032ed
1a003394:	ffffffff 	.word	0xffffffff
1a003398:	ffffffff 	.word	0xffffffff
1a00339c:	ffffffff 	.word	0xffffffff

1a0033a0 <SVC_Handler>:
	__asm volatile (
1a0033a0:	4b07      	ldr	r3, [pc, #28]	; (1a0033c0 <pxCurrentTCBConst2>)
1a0033a2:	6819      	ldr	r1, [r3, #0]
1a0033a4:	6808      	ldr	r0, [r1, #0]
1a0033a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0033aa:	f380 8809 	msr	PSP, r0
1a0033ae:	f3bf 8f6f 	isb	sy
1a0033b2:	f04f 0000 	mov.w	r0, #0
1a0033b6:	f380 8811 	msr	BASEPRI, r0
1a0033ba:	4770      	bx	lr
1a0033bc:	f3af 8000 	nop.w

1a0033c0 <pxCurrentTCBConst2>:
1a0033c0:	10002a08 	.word	0x10002a08

1a0033c4 <vPortEnterCritical>:
1a0033c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0033c8:	f383 8811 	msr	BASEPRI, r3
1a0033cc:	f3bf 8f6f 	isb	sy
1a0033d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a0033d4:	4a0a      	ldr	r2, [pc, #40]	; (1a003400 <vPortEnterCritical+0x3c>)
1a0033d6:	6813      	ldr	r3, [r2, #0]
1a0033d8:	3301      	adds	r3, #1
1a0033da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0033dc:	2b01      	cmp	r3, #1
1a0033de:	d000      	beq.n	1a0033e2 <vPortEnterCritical+0x1e>
}
1a0033e0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0033e2:	4b08      	ldr	r3, [pc, #32]	; (1a003404 <vPortEnterCritical+0x40>)
1a0033e4:	681b      	ldr	r3, [r3, #0]
1a0033e6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0033ea:	d0f9      	beq.n	1a0033e0 <vPortEnterCritical+0x1c>
1a0033ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0033f0:	f383 8811 	msr	BASEPRI, r3
1a0033f4:	f3bf 8f6f 	isb	sy
1a0033f8:	f3bf 8f4f 	dsb	sy
1a0033fc:	e7fe      	b.n	1a0033fc <vPortEnterCritical+0x38>
1a0033fe:	bf00      	nop
1a003400:	10000000 	.word	0x10000000
1a003404:	e000ed04 	.word	0xe000ed04

1a003408 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a003408:	4b09      	ldr	r3, [pc, #36]	; (1a003430 <vPortExitCritical+0x28>)
1a00340a:	681b      	ldr	r3, [r3, #0]
1a00340c:	b943      	cbnz	r3, 1a003420 <vPortExitCritical+0x18>
1a00340e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003412:	f383 8811 	msr	BASEPRI, r3
1a003416:	f3bf 8f6f 	isb	sy
1a00341a:	f3bf 8f4f 	dsb	sy
1a00341e:	e7fe      	b.n	1a00341e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a003420:	3b01      	subs	r3, #1
1a003422:	4a03      	ldr	r2, [pc, #12]	; (1a003430 <vPortExitCritical+0x28>)
1a003424:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a003426:	b90b      	cbnz	r3, 1a00342c <vPortExitCritical+0x24>
	__asm volatile
1a003428:	f383 8811 	msr	BASEPRI, r3
}
1a00342c:	4770      	bx	lr
1a00342e:	bf00      	nop
1a003430:	10000000 	.word	0x10000000
1a003434:	ffffffff 	.word	0xffffffff
1a003438:	ffffffff 	.word	0xffffffff
1a00343c:	ffffffff 	.word	0xffffffff

1a003440 <PendSV_Handler>:
	__asm volatile
1a003440:	f3ef 8009 	mrs	r0, PSP
1a003444:	f3bf 8f6f 	isb	sy
1a003448:	4b15      	ldr	r3, [pc, #84]	; (1a0034a0 <pxCurrentTCBConst>)
1a00344a:	681a      	ldr	r2, [r3, #0]
1a00344c:	f01e 0f10 	tst.w	lr, #16
1a003450:	bf08      	it	eq
1a003452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a003456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00345a:	6010      	str	r0, [r2, #0]
1a00345c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a003460:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a003464:	f380 8811 	msr	BASEPRI, r0
1a003468:	f3bf 8f4f 	dsb	sy
1a00346c:	f3bf 8f6f 	isb	sy
1a003470:	f7ff fa7a 	bl	1a002968 <vTaskSwitchContext>
1a003474:	f04f 0000 	mov.w	r0, #0
1a003478:	f380 8811 	msr	BASEPRI, r0
1a00347c:	bc09      	pop	{r0, r3}
1a00347e:	6819      	ldr	r1, [r3, #0]
1a003480:	6808      	ldr	r0, [r1, #0]
1a003482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003486:	f01e 0f10 	tst.w	lr, #16
1a00348a:	bf08      	it	eq
1a00348c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a003490:	f380 8809 	msr	PSP, r0
1a003494:	f3bf 8f6f 	isb	sy
1a003498:	4770      	bx	lr
1a00349a:	bf00      	nop
1a00349c:	f3af 8000 	nop.w

1a0034a0 <pxCurrentTCBConst>:
1a0034a0:	10002a08 	.word	0x10002a08

1a0034a4 <SysTick_Handler>:
{
1a0034a4:	b508      	push	{r3, lr}
	__asm volatile
1a0034a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0034aa:	f383 8811 	msr	BASEPRI, r3
1a0034ae:	f3bf 8f6f 	isb	sy
1a0034b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a0034b6:	f7ff f8d9 	bl	1a00266c <xTaskIncrementTick>
1a0034ba:	b118      	cbz	r0, 1a0034c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0034bc:	4b03      	ldr	r3, [pc, #12]	; (1a0034cc <SysTick_Handler+0x28>)
1a0034be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0034c2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0034c4:	2300      	movs	r3, #0
1a0034c6:	f383 8811 	msr	BASEPRI, r3
}
1a0034ca:	bd08      	pop	{r3, pc}
1a0034cc:	e000ed04 	.word	0xe000ed04

1a0034d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0034d0:	4a08      	ldr	r2, [pc, #32]	; (1a0034f4 <vPortSetupTimerInterrupt+0x24>)
1a0034d2:	2300      	movs	r3, #0
1a0034d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0034d6:	4908      	ldr	r1, [pc, #32]	; (1a0034f8 <vPortSetupTimerInterrupt+0x28>)
1a0034d8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0034da:	4b08      	ldr	r3, [pc, #32]	; (1a0034fc <vPortSetupTimerInterrupt+0x2c>)
1a0034dc:	681b      	ldr	r3, [r3, #0]
1a0034de:	4908      	ldr	r1, [pc, #32]	; (1a003500 <vPortSetupTimerInterrupt+0x30>)
1a0034e0:	fba1 1303 	umull	r1, r3, r1, r3
1a0034e4:	099b      	lsrs	r3, r3, #6
1a0034e6:	3b01      	subs	r3, #1
1a0034e8:	4906      	ldr	r1, [pc, #24]	; (1a003504 <vPortSetupTimerInterrupt+0x34>)
1a0034ea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0034ec:	2307      	movs	r3, #7
1a0034ee:	6013      	str	r3, [r2, #0]
}
1a0034f0:	4770      	bx	lr
1a0034f2:	bf00      	nop
1a0034f4:	e000e010 	.word	0xe000e010
1a0034f8:	e000e018 	.word	0xe000e018
1a0034fc:	10002d18 	.word	0x10002d18
1a003500:	10624dd3 	.word	0x10624dd3
1a003504:	e000e014 	.word	0xe000e014

1a003508 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a003508:	4b3a      	ldr	r3, [pc, #232]	; (1a0035f4 <xPortStartScheduler+0xec>)
1a00350a:	681a      	ldr	r2, [r3, #0]
1a00350c:	4b3a      	ldr	r3, [pc, #232]	; (1a0035f8 <xPortStartScheduler+0xf0>)
1a00350e:	429a      	cmp	r2, r3
1a003510:	d00d      	beq.n	1a00352e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a003512:	4b38      	ldr	r3, [pc, #224]	; (1a0035f4 <xPortStartScheduler+0xec>)
1a003514:	681a      	ldr	r2, [r3, #0]
1a003516:	4b39      	ldr	r3, [pc, #228]	; (1a0035fc <xPortStartScheduler+0xf4>)
1a003518:	429a      	cmp	r2, r3
1a00351a:	d111      	bne.n	1a003540 <xPortStartScheduler+0x38>
	__asm volatile
1a00351c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003520:	f383 8811 	msr	BASEPRI, r3
1a003524:	f3bf 8f6f 	isb	sy
1a003528:	f3bf 8f4f 	dsb	sy
1a00352c:	e7fe      	b.n	1a00352c <xPortStartScheduler+0x24>
1a00352e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003532:	f383 8811 	msr	BASEPRI, r3
1a003536:	f3bf 8f6f 	isb	sy
1a00353a:	f3bf 8f4f 	dsb	sy
1a00353e:	e7fe      	b.n	1a00353e <xPortStartScheduler+0x36>
{
1a003540:	b510      	push	{r4, lr}
1a003542:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a003544:	4b2e      	ldr	r3, [pc, #184]	; (1a003600 <xPortStartScheduler+0xf8>)
1a003546:	781a      	ldrb	r2, [r3, #0]
1a003548:	b2d2      	uxtb	r2, r2
1a00354a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00354c:	22ff      	movs	r2, #255	; 0xff
1a00354e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a003550:	781b      	ldrb	r3, [r3, #0]
1a003552:	b2db      	uxtb	r3, r3
1a003554:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a003558:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00355c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a003560:	4a28      	ldr	r2, [pc, #160]	; (1a003604 <xPortStartScheduler+0xfc>)
1a003562:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a003564:	4b28      	ldr	r3, [pc, #160]	; (1a003608 <xPortStartScheduler+0x100>)
1a003566:	2207      	movs	r2, #7
1a003568:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00356a:	e009      	b.n	1a003580 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00356c:	4a26      	ldr	r2, [pc, #152]	; (1a003608 <xPortStartScheduler+0x100>)
1a00356e:	6813      	ldr	r3, [r2, #0]
1a003570:	3b01      	subs	r3, #1
1a003572:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a003574:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003578:	005b      	lsls	r3, r3, #1
1a00357a:	b2db      	uxtb	r3, r3
1a00357c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a003580:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003584:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003588:	d1f0      	bne.n	1a00356c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00358a:	4b1f      	ldr	r3, [pc, #124]	; (1a003608 <xPortStartScheduler+0x100>)
1a00358c:	681b      	ldr	r3, [r3, #0]
1a00358e:	2b04      	cmp	r3, #4
1a003590:	d008      	beq.n	1a0035a4 <xPortStartScheduler+0x9c>
1a003592:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003596:	f383 8811 	msr	BASEPRI, r3
1a00359a:	f3bf 8f6f 	isb	sy
1a00359e:	f3bf 8f4f 	dsb	sy
1a0035a2:	e7fe      	b.n	1a0035a2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0035a4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0035a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0035aa:	4a17      	ldr	r2, [pc, #92]	; (1a003608 <xPortStartScheduler+0x100>)
1a0035ac:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0035ae:	9b01      	ldr	r3, [sp, #4]
1a0035b0:	b2db      	uxtb	r3, r3
1a0035b2:	4a13      	ldr	r2, [pc, #76]	; (1a003600 <xPortStartScheduler+0xf8>)
1a0035b4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0035b6:	4b15      	ldr	r3, [pc, #84]	; (1a00360c <xPortStartScheduler+0x104>)
1a0035b8:	681a      	ldr	r2, [r3, #0]
1a0035ba:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0035be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0035c0:	681a      	ldr	r2, [r3, #0]
1a0035c2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0035c6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0035c8:	f7ff ff82 	bl	1a0034d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0035cc:	2400      	movs	r4, #0
1a0035ce:	4b10      	ldr	r3, [pc, #64]	; (1a003610 <xPortStartScheduler+0x108>)
1a0035d0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0035d2:	f7ff febf 	bl	1a003354 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0035d6:	4a0f      	ldr	r2, [pc, #60]	; (1a003614 <xPortStartScheduler+0x10c>)
1a0035d8:	6813      	ldr	r3, [r2, #0]
1a0035da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0035de:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0035e0:	f7ff fea4 	bl	1a00332c <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0035e4:	f7ff f9c0 	bl	1a002968 <vTaskSwitchContext>
	prvTaskExitError();
1a0035e8:	f7ff fe80 	bl	1a0032ec <prvTaskExitError>
}
1a0035ec:	4620      	mov	r0, r4
1a0035ee:	b002      	add	sp, #8
1a0035f0:	bd10      	pop	{r4, pc}
1a0035f2:	bf00      	nop
1a0035f4:	e000ed00 	.word	0xe000ed00
1a0035f8:	410fc271 	.word	0x410fc271
1a0035fc:	410fc270 	.word	0x410fc270
1a003600:	e000e400 	.word	0xe000e400
1a003604:	10002c5c 	.word	0x10002c5c
1a003608:	10002c60 	.word	0x10002c60
1a00360c:	e000ed20 	.word	0xe000ed20
1a003610:	10000000 	.word	0x10000000
1a003614:	e000ef34 	.word	0xe000ef34

1a003618 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a003618:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00361c:	2b0f      	cmp	r3, #15
1a00361e:	d90f      	bls.n	1a003640 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a003620:	4a10      	ldr	r2, [pc, #64]	; (1a003664 <vPortValidateInterruptPriority+0x4c>)
1a003622:	5c9b      	ldrb	r3, [r3, r2]
1a003624:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a003626:	4a10      	ldr	r2, [pc, #64]	; (1a003668 <vPortValidateInterruptPriority+0x50>)
1a003628:	7812      	ldrb	r2, [r2, #0]
1a00362a:	429a      	cmp	r2, r3
1a00362c:	d908      	bls.n	1a003640 <vPortValidateInterruptPriority+0x28>
1a00362e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003632:	f383 8811 	msr	BASEPRI, r3
1a003636:	f3bf 8f6f 	isb	sy
1a00363a:	f3bf 8f4f 	dsb	sy
1a00363e:	e7fe      	b.n	1a00363e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a003640:	4b0a      	ldr	r3, [pc, #40]	; (1a00366c <vPortValidateInterruptPriority+0x54>)
1a003642:	681b      	ldr	r3, [r3, #0]
1a003644:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a003648:	4a09      	ldr	r2, [pc, #36]	; (1a003670 <vPortValidateInterruptPriority+0x58>)
1a00364a:	6812      	ldr	r2, [r2, #0]
1a00364c:	4293      	cmp	r3, r2
1a00364e:	d908      	bls.n	1a003662 <vPortValidateInterruptPriority+0x4a>
1a003650:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003654:	f383 8811 	msr	BASEPRI, r3
1a003658:	f3bf 8f6f 	isb	sy
1a00365c:	f3bf 8f4f 	dsb	sy
1a003660:	e7fe      	b.n	1a003660 <vPortValidateInterruptPriority+0x48>
	}
1a003662:	4770      	bx	lr
1a003664:	e000e3f0 	.word	0xe000e3f0
1a003668:	10002c5c 	.word	0x10002c5c
1a00366c:	e000ed0c 	.word	0xe000ed0c
1a003670:	10002c60 	.word	0x10002c60

1a003674 <dacInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  DAC_ENABLE, DAC_DISABLE
 * @return: none
*/
void dacInit( dacInit_t config )
{
1a003674:	b510      	push	{r4, lr}

   switch(config) {
1a003676:	b110      	cbz	r0, 1a00367e <dacInit+0xa>
1a003678:	2801      	cmp	r0, #1
1a00367a:	d00f      	beq.n	1a00369c <dacInit+0x28>
      /* Disable DAC peripheral */
      Chip_DAC_DeInit( LPC_DAC );
      break;
   }

}
1a00367c:	bd10      	pop	{r4, pc}
      Chip_DAC_Init(LPC_DAC);
1a00367e:	4c09      	ldr	r4, [pc, #36]	; (1a0036a4 <dacInit+0x30>)
1a003680:	4620      	mov	r0, r4
1a003682:	f000 fd66 	bl	1a004152 <Chip_DAC_Init>
 */
STATIC INLINE void Chip_DAC_ConfigDAConverterControl(LPC_DAC_T *pDAC, uint32_t dacFlags)
{
	uint32_t temp;

	temp = pDAC->CTRL & ~DAC_DACCTRL_MASK;
1a003686:	6863      	ldr	r3, [r4, #4]
1a003688:	f023 030f 	bic.w	r3, r3, #15
	pDAC->CTRL = temp | dacFlags;
1a00368c:	f043 0308 	orr.w	r3, r3, #8
1a003690:	6063      	str	r3, [r4, #4]
      Chip_DAC_UpdateValue(LPC_DAC, 0);
1a003692:	2100      	movs	r1, #0
1a003694:	4620      	mov	r0, r4
1a003696:	f000 fd48 	bl	1a00412a <Chip_DAC_UpdateValue>
      break;
1a00369a:	e7ef      	b.n	1a00367c <dacInit+0x8>
      Chip_DAC_DeInit( LPC_DAC );
1a00369c:	4801      	ldr	r0, [pc, #4]	; (1a0036a4 <dacInit+0x30>)
1a00369e:	f000 fd3f 	bl	1a004120 <Chip_DAC_DeInit>
}
1a0036a2:	e7eb      	b.n	1a00367c <dacInit+0x8>
1a0036a4:	400e1000 	.word	0x400e1000

1a0036a8 <dacWrite>:
 * @return  none
 */
void dacWrite( dacMap_t analogOutput, uint16_t value )
{

   if( analogOutput == AO ) {
1a0036a8:	2842      	cmp	r0, #66	; 0x42
1a0036aa:	d000      	beq.n	1a0036ae <dacWrite+0x6>
1a0036ac:	4770      	bx	lr
{
1a0036ae:	b508      	push	{r3, lr}
      if( value > 1023 ) {
1a0036b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
1a0036b4:	d301      	bcc.n	1a0036ba <dacWrite+0x12>
         value = 1023;
1a0036b6:	f240 31ff 	movw	r1, #1023	; 0x3ff
      }
      Chip_DAC_UpdateValue( LPC_DAC, value );
1a0036ba:	4802      	ldr	r0, [pc, #8]	; (1a0036c4 <dacWrite+0x1c>)
1a0036bc:	f000 fd35 	bl	1a00412a <Chip_DAC_UpdateValue>
   }
}
1a0036c0:	bd08      	pop	{r3, pc}
1a0036c2:	bf00      	nop
1a0036c4:	400e1000 	.word	0x400e1000

1a0036c8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0036c8:	4b04      	ldr	r3, [pc, #16]	; (1a0036dc <cyclesCounterInit+0x14>)
1a0036ca:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a0036cc:	4b04      	ldr	r3, [pc, #16]	; (1a0036e0 <cyclesCounterInit+0x18>)
1a0036ce:	681a      	ldr	r2, [r3, #0]
1a0036d0:	6813      	ldr	r3, [r2, #0]
1a0036d2:	f043 0301 	orr.w	r3, r3, #1
1a0036d6:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0036d8:	2001      	movs	r0, #1
1a0036da:	4770      	bx	lr
1a0036dc:	10000004 	.word	0x10000004
1a0036e0:	10000008 	.word	0x10000008

1a0036e4 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a0036e4:	2301      	movs	r3, #1
1a0036e6:	fa03 f000 	lsl.w	r0, r3, r0
1a0036ea:	4b01      	ldr	r3, [pc, #4]	; (1a0036f0 <clearInterrupt+0xc>)
1a0036ec:	6258      	str	r0, [r3, #36]	; 0x24
}
1a0036ee:	4770      	bx	lr
1a0036f0:	40087000 	.word	0x40087000

1a0036f4 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a0036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a0036f6:	4b12      	ldr	r3, [pc, #72]	; (1a003740 <serveInterrupt+0x4c>)
1a0036f8:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a0036fa:	4b12      	ldr	r3, [pc, #72]	; (1a003744 <serveInterrupt+0x50>)
1a0036fc:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0036fe:	2301      	movs	r3, #1
1a003700:	4083      	lsls	r3, r0
1a003702:	420b      	tst	r3, r1
1a003704:	d111      	bne.n	1a00372a <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a003706:	4910      	ldr	r1, [pc, #64]	; (1a003748 <serveInterrupt+0x54>)
1a003708:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00370a:	4d10      	ldr	r5, [pc, #64]	; (1a00374c <serveInterrupt+0x58>)
1a00370c:	0051      	lsls	r1, r2, #1
1a00370e:	188f      	adds	r7, r1, r2
1a003710:	00fc      	lsls	r4, r7, #3
1a003712:	4627      	mov	r7, r4
1a003714:	442c      	add	r4, r5
1a003716:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a003718:	6864      	ldr	r4, [r4, #4]
1a00371a:	1b36      	subs	r6, r6, r4
1a00371c:	443d      	add	r5, r7
1a00371e:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a003720:	4a08      	ldr	r2, [pc, #32]	; (1a003744 <serveInterrupt+0x50>)
1a003722:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a003724:	f7ff ffde 	bl	1a0036e4 <clearInterrupt>
}
1a003728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00372a:	4907      	ldr	r1, [pc, #28]	; (1a003748 <serveInterrupt+0x54>)
1a00372c:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00372e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a003732:	00d1      	lsls	r1, r2, #3
1a003734:	4a05      	ldr	r2, [pc, #20]	; (1a00374c <serveInterrupt+0x58>)
1a003736:	440a      	add	r2, r1
1a003738:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00373a:	4a02      	ldr	r2, [pc, #8]	; (1a003744 <serveInterrupt+0x50>)
1a00373c:	61d3      	str	r3, [r2, #28]
1a00373e:	e7f1      	b.n	1a003724 <serveInterrupt+0x30>
1a003740:	1a00586c 	.word	0x1a00586c
1a003744:	40087000 	.word	0x40087000
1a003748:	40084000 	.word	0x40084000
1a00374c:	1000000c 	.word	0x1000000c

1a003750 <GPIO2_IRQHandler>:
//   serveInterrupt(1);
//}
// comentado para proyecto de materia Freertos

void GPIO2_IRQHandler(void)
{
1a003750:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a003752:	2002      	movs	r0, #2
1a003754:	f7ff ffce 	bl	1a0036f4 <serveInterrupt>
}
1a003758:	bd08      	pop	{r3, pc}
1a00375a:	Address 0x000000001a00375a is out of bounds.


1a00375c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00375c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00375e:	4d0b      	ldr	r5, [pc, #44]	; (1a00378c <gpioObtainPinInit+0x30>)
1a003760:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003764:	182c      	adds	r4, r5, r0
1a003766:	5628      	ldrsb	r0, [r5, r0]
1a003768:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00376a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00376e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003770:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003774:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003776:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00377a:	9b02      	ldr	r3, [sp, #8]
1a00377c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00377e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003782:	9b03      	ldr	r3, [sp, #12]
1a003784:	701a      	strb	r2, [r3, #0]
}
1a003786:	bc30      	pop	{r4, r5}
1a003788:	4770      	bx	lr
1a00378a:	bf00      	nop
1a00378c:	1a005870 	.word	0x1a005870

1a003790 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a003790:	b570      	push	{r4, r5, r6, lr}
1a003792:	b084      	sub	sp, #16
1a003794:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003796:	2300      	movs	r3, #0
1a003798:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00379c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0037a0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0037a4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0037a8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0037ac:	f10d 030b 	add.w	r3, sp, #11
1a0037b0:	9301      	str	r3, [sp, #4]
1a0037b2:	ab03      	add	r3, sp, #12
1a0037b4:	9300      	str	r3, [sp, #0]
1a0037b6:	f10d 030d 	add.w	r3, sp, #13
1a0037ba:	f10d 020e 	add.w	r2, sp, #14
1a0037be:	f10d 010f 	add.w	r1, sp, #15
1a0037c2:	f7ff ffcb 	bl	1a00375c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0037c6:	2c05      	cmp	r4, #5
1a0037c8:	f200 80a5 	bhi.w	1a003916 <gpioInit+0x186>
1a0037cc:	e8df f004 	tbb	[pc, r4]
1a0037d0:	45278109 	.word	0x45278109
1a0037d4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0037d6:	4851      	ldr	r0, [pc, #324]	; (1a00391c <gpioInit+0x18c>)
1a0037d8:	f001 fa58 	bl	1a004c8c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0037dc:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0037de:	b004      	add	sp, #16
1a0037e0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0037e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0037e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0037ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0037ee:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0037f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0037f6:	494a      	ldr	r1, [pc, #296]	; (1a003920 <gpioInit+0x190>)
1a0037f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0037fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003800:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003804:	2001      	movs	r0, #1
1a003806:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00380a:	4c44      	ldr	r4, [pc, #272]	; (1a00391c <gpioInit+0x18c>)
1a00380c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003810:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003814:	ea22 0201 	bic.w	r2, r2, r1
1a003818:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00381c:	e7df      	b.n	1a0037de <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00381e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003822:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003826:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00382a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00382e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003832:	493b      	ldr	r1, [pc, #236]	; (1a003920 <gpioInit+0x190>)
1a003834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003838:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00383c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003840:	2001      	movs	r0, #1
1a003842:	fa00 f102 	lsl.w	r1, r0, r2
1a003846:	4c35      	ldr	r4, [pc, #212]	; (1a00391c <gpioInit+0x18c>)
1a003848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00384c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003850:	ea22 0201 	bic.w	r2, r2, r1
1a003854:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003858:	e7c1      	b.n	1a0037de <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00385a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00385e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003862:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003866:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00386a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00386e:	492c      	ldr	r1, [pc, #176]	; (1a003920 <gpioInit+0x190>)
1a003870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003874:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003878:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00387c:	2001      	movs	r0, #1
1a00387e:	fa00 f102 	lsl.w	r1, r0, r2
1a003882:	4c26      	ldr	r4, [pc, #152]	; (1a00391c <gpioInit+0x18c>)
1a003884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003888:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00388c:	ea22 0201 	bic.w	r2, r2, r1
1a003890:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003894:	e7a3      	b.n	1a0037de <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003896:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00389a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00389e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0038a2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0038a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0038aa:	491d      	ldr	r1, [pc, #116]	; (1a003920 <gpioInit+0x190>)
1a0038ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0038b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0038b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0038b8:	2001      	movs	r0, #1
1a0038ba:	fa00 f102 	lsl.w	r1, r0, r2
1a0038be:	4c17      	ldr	r4, [pc, #92]	; (1a00391c <gpioInit+0x18c>)
1a0038c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0038c4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0038c8:	ea22 0201 	bic.w	r2, r2, r1
1a0038cc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0038d0:	e785      	b.n	1a0037de <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0038d2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0038d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0038da:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0038de:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0038e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0038e6:	490e      	ldr	r1, [pc, #56]	; (1a003920 <gpioInit+0x190>)
1a0038e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0038ec:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0038f0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0038f4:	2001      	movs	r0, #1
1a0038f6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0038fa:	4b08      	ldr	r3, [pc, #32]	; (1a00391c <gpioInit+0x18c>)
1a0038fc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003900:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003904:	4331      	orrs	r1, r6
1a003906:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00390a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a00390c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003910:	2100      	movs	r1, #0
1a003912:	5499      	strb	r1, [r3, r2]
1a003914:	e763      	b.n	1a0037de <gpioInit+0x4e>
      ret_val = 0;
1a003916:	2000      	movs	r0, #0
1a003918:	e761      	b.n	1a0037de <gpioInit+0x4e>
1a00391a:	bf00      	nop
1a00391c:	400f4000 	.word	0x400f4000
1a003920:	40086000 	.word	0x40086000

1a003924 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a003924:	b510      	push	{r4, lr}
1a003926:	b084      	sub	sp, #16
1a003928:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00392a:	2300      	movs	r3, #0
1a00392c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003930:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003934:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003938:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00393c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003940:	f10d 030b 	add.w	r3, sp, #11
1a003944:	9301      	str	r3, [sp, #4]
1a003946:	ab03      	add	r3, sp, #12
1a003948:	9300      	str	r3, [sp, #0]
1a00394a:	f10d 030d 	add.w	r3, sp, #13
1a00394e:	f10d 020e 	add.w	r2, sp, #14
1a003952:	f10d 010f 	add.w	r1, sp, #15
1a003956:	f7ff ff01 	bl	1a00375c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00395a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00395e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003962:	3400      	adds	r4, #0
1a003964:	bf18      	it	ne
1a003966:	2401      	movne	r4, #1
1a003968:	015b      	lsls	r3, r3, #5
1a00396a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00396e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003972:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a003974:	2001      	movs	r0, #1
1a003976:	b004      	add	sp, #16
1a003978:	bd10      	pop	{r4, pc}
1a00397a:	Address 0x000000001a00397a is out of bounds.


1a00397c <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00397c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a003980:	4909      	ldr	r1, [pc, #36]	; (1a0039a8 <tickerCallback+0x2c>)
1a003982:	e9d1 bc00 	ldrd	fp, ip, [r1]
1a003986:	f11b 0201 	adds.w	r2, fp, #1
1a00398a:	f14c 0300 	adc.w	r3, ip, #0
1a00398e:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a003992:	4b06      	ldr	r3, [pc, #24]	; (1a0039ac <tickerCallback+0x30>)
1a003994:	681b      	ldr	r3, [r3, #0]
1a003996:	b123      	cbz	r3, 1a0039a2 <tickerCallback+0x26>
      (* tickHookFunction )( callBackFuncParams );
1a003998:	4b04      	ldr	r3, [pc, #16]	; (1a0039ac <tickerCallback+0x30>)
1a00399a:	681b      	ldr	r3, [r3, #0]
1a00399c:	4a04      	ldr	r2, [pc, #16]	; (1a0039b0 <tickerCallback+0x34>)
1a00399e:	6810      	ldr	r0, [r2, #0]
1a0039a0:	4798      	blx	r3
   }
}
1a0039a2:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a0039a6:	bf00      	nop
1a0039a8:	10002d08 	.word	0x10002d08
1a0039ac:	10002c68 	.word	0x10002c68
1a0039b0:	10002c64 	.word	0x10002c64

1a0039b4 <tickInit>:
{
1a0039b4:	b510      	push	{r4, lr}
1a0039b6:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a0039b8:	4b0e      	ldr	r3, [pc, #56]	; (1a0039f4 <tickInit+0x40>)
1a0039ba:	9301      	str	r3, [sp, #4]
1a0039bc:	4b0e      	ldr	r3, [pc, #56]	; (1a0039f8 <tickInit+0x44>)
1a0039be:	9300      	str	r3, [sp, #0]
1a0039c0:	2300      	movs	r3, #0
1a0039c2:	2201      	movs	r2, #1
1a0039c4:	4601      	mov	r1, r0
1a0039c6:	480d      	ldr	r0, [pc, #52]	; (1a0039fc <tickInit+0x48>)
1a0039c8:	f7ff faee 	bl	1a002fa8 <xTimerCreateStatic>
         if (h == NULL)
1a0039cc:	b178      	cbz	r0, 1a0039ee <tickInit+0x3a>
1a0039ce:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a0039d0:	f7fe fe46 	bl	1a002660 <xTaskGetTickCount>
1a0039d4:	2300      	movs	r3, #0
1a0039d6:	9300      	str	r3, [sp, #0]
1a0039d8:	4602      	mov	r2, r0
1a0039da:	2101      	movs	r1, #1
1a0039dc:	4620      	mov	r0, r4
1a0039de:	f7ff fb09 	bl	1a002ff4 <xTimerGenericCommand>
1a0039e2:	2801      	cmp	r0, #1
1a0039e4:	bf14      	ite	ne
1a0039e6:	2000      	movne	r0, #0
1a0039e8:	2001      	moveq	r0, #1
}
1a0039ea:	b002      	add	sp, #8
1a0039ec:	bd10      	pop	{r4, pc}
            return 0;
1a0039ee:	2000      	movs	r0, #0
1a0039f0:	e7fb      	b.n	1a0039ea <tickInit+0x36>
1a0039f2:	bf00      	nop
1a0039f4:	10002c6c 	.word	0x10002c6c
1a0039f8:	1a00397d 	.word	0x1a00397d
1a0039fc:	1a0059a8 	.word	0x1a0059a8

1a003a00 <uartProcessIRQ>:
{
1a003a00:	b570      	push	{r4, r5, r6, lr}
1a003a02:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003a04:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003a08:	0093      	lsls	r3, r2, #2
1a003a0a:	4a25      	ldr	r2, [pc, #148]	; (1a003aa0 <uartProcessIRQ+0xa0>)
1a003a0c:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a003a0e:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003a10:	b2ed      	uxtb	r5, r5
1a003a12:	f015 0f01 	tst.w	r5, #1
1a003a16:	d00b      	beq.n	1a003a30 <uartProcessIRQ+0x30>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a003a18:	b930      	cbnz	r0, 1a003a28 <uartProcessIRQ+0x28>
1a003a1a:	4b22      	ldr	r3, [pc, #136]	; (1a003aa4 <uartProcessIRQ+0xa4>)
1a003a1c:	681b      	ldr	r3, [r3, #0]
1a003a1e:	b11b      	cbz	r3, 1a003a28 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a003a20:	4b20      	ldr	r3, [pc, #128]	; (1a003aa4 <uartProcessIRQ+0xa4>)
1a003a22:	681b      	ldr	r3, [r3, #0]
1a003a24:	2000      	movs	r0, #0
1a003a26:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003a28:	2c03      	cmp	r4, #3
1a003a2a:	d015      	beq.n	1a003a58 <uartProcessIRQ+0x58>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003a2c:	2c05      	cmp	r4, #5
1a003a2e:	d01c      	beq.n	1a003a6a <uartProcessIRQ+0x6a>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a003a30:	f015 0f20 	tst.w	r5, #32
1a003a34:	d00f      	beq.n	1a003a56 <uartProcessIRQ+0x56>
	return pUART->IER;
1a003a36:	6873      	ldr	r3, [r6, #4]
1a003a38:	f013 0f02 	tst.w	r3, #2
1a003a3c:	d00b      	beq.n	1a003a56 <uartProcessIRQ+0x56>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a003a3e:	b934      	cbnz	r4, 1a003a4e <uartProcessIRQ+0x4e>
1a003a40:	4b19      	ldr	r3, [pc, #100]	; (1a003aa8 <uartProcessIRQ+0xa8>)
1a003a42:	681b      	ldr	r3, [r3, #0]
1a003a44:	b11b      	cbz	r3, 1a003a4e <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART0)(0);
1a003a46:	4b18      	ldr	r3, [pc, #96]	; (1a003aa8 <uartProcessIRQ+0xa8>)
1a003a48:	681b      	ldr	r3, [r3, #0]
1a003a4a:	2000      	movs	r0, #0
1a003a4c:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003a4e:	2c03      	cmp	r4, #3
1a003a50:	d014      	beq.n	1a003a7c <uartProcessIRQ+0x7c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003a52:	2c05      	cmp	r4, #5
1a003a54:	d01b      	beq.n	1a003a8e <uartProcessIRQ+0x8e>
}
1a003a56:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003a58:	4b14      	ldr	r3, [pc, #80]	; (1a003aac <uartProcessIRQ+0xac>)
1a003a5a:	681b      	ldr	r3, [r3, #0]
1a003a5c:	2b00      	cmp	r3, #0
1a003a5e:	d0e5      	beq.n	1a003a2c <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART2)(0);
1a003a60:	4b12      	ldr	r3, [pc, #72]	; (1a003aac <uartProcessIRQ+0xac>)
1a003a62:	681b      	ldr	r3, [r3, #0]
1a003a64:	2000      	movs	r0, #0
1a003a66:	4798      	blx	r3
1a003a68:	e7e0      	b.n	1a003a2c <uartProcessIRQ+0x2c>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003a6a:	4b11      	ldr	r3, [pc, #68]	; (1a003ab0 <uartProcessIRQ+0xb0>)
1a003a6c:	681b      	ldr	r3, [r3, #0]
1a003a6e:	2b00      	cmp	r3, #0
1a003a70:	d0de      	beq.n	1a003a30 <uartProcessIRQ+0x30>
         (*rxIsrCallbackUART3)(0);
1a003a72:	4b0f      	ldr	r3, [pc, #60]	; (1a003ab0 <uartProcessIRQ+0xb0>)
1a003a74:	681b      	ldr	r3, [r3, #0]
1a003a76:	2000      	movs	r0, #0
1a003a78:	4798      	blx	r3
1a003a7a:	e7d9      	b.n	1a003a30 <uartProcessIRQ+0x30>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003a7c:	4b0d      	ldr	r3, [pc, #52]	; (1a003ab4 <uartProcessIRQ+0xb4>)
1a003a7e:	681b      	ldr	r3, [r3, #0]
1a003a80:	2b00      	cmp	r3, #0
1a003a82:	d0e6      	beq.n	1a003a52 <uartProcessIRQ+0x52>
         (*txIsrCallbackUART2)(0);
1a003a84:	4b0b      	ldr	r3, [pc, #44]	; (1a003ab4 <uartProcessIRQ+0xb4>)
1a003a86:	681b      	ldr	r3, [r3, #0]
1a003a88:	2000      	movs	r0, #0
1a003a8a:	4798      	blx	r3
1a003a8c:	e7e1      	b.n	1a003a52 <uartProcessIRQ+0x52>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003a8e:	4b0a      	ldr	r3, [pc, #40]	; (1a003ab8 <uartProcessIRQ+0xb8>)
1a003a90:	681b      	ldr	r3, [r3, #0]
1a003a92:	2b00      	cmp	r3, #0
1a003a94:	d0df      	beq.n	1a003a56 <uartProcessIRQ+0x56>
         (*txIsrCallbackUART3)(0);
1a003a96:	4b08      	ldr	r3, [pc, #32]	; (1a003ab8 <uartProcessIRQ+0xb8>)
1a003a98:	681b      	ldr	r3, [r3, #0]
1a003a9a:	2000      	movs	r0, #0
1a003a9c:	4798      	blx	r3
}
1a003a9e:	e7da      	b.n	1a003a56 <uartProcessIRQ+0x56>
1a003aa0:	1a0059b4 	.word	0x1a0059b4
1a003aa4:	10002c9c 	.word	0x10002c9c
1a003aa8:	10002ca8 	.word	0x10002ca8
1a003aac:	10002ca0 	.word	0x10002ca0
1a003ab0:	10002ca4 	.word	0x10002ca4
1a003ab4:	10002cac 	.word	0x10002cac
1a003ab8:	10002cb0 	.word	0x10002cb0

1a003abc <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003abc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003ac0:	0083      	lsls	r3, r0, #2
1a003ac2:	4a03      	ldr	r2, [pc, #12]	; (1a003ad0 <uartTxReady+0x14>)
1a003ac4:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a003ac6:	6958      	ldr	r0, [r3, #20]
}
1a003ac8:	f000 0020 	and.w	r0, r0, #32
1a003acc:	4770      	bx	lr
1a003ace:	bf00      	nop
1a003ad0:	1a0059b4 	.word	0x1a0059b4

1a003ad4 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003ad4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003ad8:	0083      	lsls	r3, r0, #2
1a003ada:	4a02      	ldr	r2, [pc, #8]	; (1a003ae4 <uartTxWrite+0x10>)
1a003adc:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a003ade:	6019      	str	r1, [r3, #0]
}
1a003ae0:	4770      	bx	lr
1a003ae2:	bf00      	nop
1a003ae4:	1a0059b4 	.word	0x1a0059b4

1a003ae8 <uartInit>:
{
1a003ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003aec:	4680      	mov	r8, r0
1a003aee:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003af0:	4c19      	ldr	r4, [pc, #100]	; (1a003b58 <uartInit+0x70>)
1a003af2:	0045      	lsls	r5, r0, #1
1a003af4:	182a      	adds	r2, r5, r0
1a003af6:	0093      	lsls	r3, r2, #2
1a003af8:	18e6      	adds	r6, r4, r3
1a003afa:	58e7      	ldr	r7, [r4, r3]
1a003afc:	4638      	mov	r0, r7
1a003afe:	f000 fb4b 	bl	1a004198 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003b02:	4649      	mov	r1, r9
1a003b04:	4638      	mov	r0, r7
1a003b06:	f000 fb71 	bl	1a0041ec <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003b0a:	2307      	movs	r3, #7
1a003b0c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003b0e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003b10:	2301      	movs	r3, #1
1a003b12:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003b14:	7930      	ldrb	r0, [r6, #4]
1a003b16:	7973      	ldrb	r3, [r6, #5]
1a003b18:	79b2      	ldrb	r2, [r6, #6]
1a003b1a:	f042 0218 	orr.w	r2, r2, #24
1a003b1e:	490f      	ldr	r1, [pc, #60]	; (1a003b5c <uartInit+0x74>)
1a003b20:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003b28:	79f0      	ldrb	r0, [r6, #7]
1a003b2a:	7a33      	ldrb	r3, [r6, #8]
1a003b2c:	7a72      	ldrb	r2, [r6, #9]
1a003b2e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003b32:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a003b3a:	f1b8 0f01 	cmp.w	r8, #1
1a003b3e:	d001      	beq.n	1a003b44 <uartInit+0x5c>
}
1a003b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003b44:	4a06      	ldr	r2, [pc, #24]	; (1a003b60 <uartInit+0x78>)
1a003b46:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003b48:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003b4e:	221a      	movs	r2, #26
1a003b50:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003b54:	e7f4      	b.n	1a003b40 <uartInit+0x58>
1a003b56:	bf00      	nop
1a003b58:	1a0059b4 	.word	0x1a0059b4
1a003b5c:	40086000 	.word	0x40086000
1a003b60:	40081000 	.word	0x40081000

1a003b64 <uartWriteByte>:
{
1a003b64:	b538      	push	{r3, r4, r5, lr}
1a003b66:	4604      	mov	r4, r0
1a003b68:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a003b6a:	4620      	mov	r0, r4
1a003b6c:	f7ff ffa6 	bl	1a003abc <uartTxReady>
1a003b70:	2800      	cmp	r0, #0
1a003b72:	d0fa      	beq.n	1a003b6a <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a003b74:	4629      	mov	r1, r5
1a003b76:	4620      	mov	r0, r4
1a003b78:	f7ff ffac 	bl	1a003ad4 <uartTxWrite>
}
1a003b7c:	bd38      	pop	{r3, r4, r5, pc}

1a003b7e <uartWriteString>:
{
1a003b7e:	b538      	push	{r3, r4, r5, lr}
1a003b80:	4605      	mov	r5, r0
1a003b82:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003b84:	e003      	b.n	1a003b8e <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a003b86:	4628      	mov	r0, r5
1a003b88:	f7ff ffec 	bl	1a003b64 <uartWriteByte>
      str++;
1a003b8c:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003b8e:	7821      	ldrb	r1, [r4, #0]
1a003b90:	2900      	cmp	r1, #0
1a003b92:	d1f8      	bne.n	1a003b86 <uartWriteString+0x8>
}
1a003b94:	bd38      	pop	{r3, r4, r5, pc}

1a003b96 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a003b96:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a003b98:	2003      	movs	r0, #3
1a003b9a:	f7ff ff31 	bl	1a003a00 <uartProcessIRQ>
}
1a003b9e:	bd08      	pop	{r3, pc}

1a003ba0 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a003ba0:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a003ba2:	2005      	movs	r0, #5
1a003ba4:	f7ff ff2c 	bl	1a003a00 <uartProcessIRQ>
}
1a003ba8:	bd08      	pop	{r3, pc}
1a003baa:	Address 0x000000001a003baa is out of bounds.


1a003bac <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a003bac:	b538      	push	{r3, r4, r5, lr}
1a003bae:	4604      	mov	r4, r0
1a003bb0:	460d      	mov	r5, r1
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003bb2:	4b08      	ldr	r3, [pc, #32]	; (1a003bd4 <i2cHardwareInit+0x28>)
1a003bb4:	f640 0208 	movw	r2, #2056	; 0x808
1a003bb8:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a003bbc:	f001 f908 	bl	1a004dd0 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a003bc0:	4629      	mov	r1, r5
1a003bc2:	4620      	mov	r0, r4
1a003bc4:	f001 f916 	bl	1a004df4 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a003bc8:	4903      	ldr	r1, [pc, #12]	; (1a003bd8 <i2cHardwareInit+0x2c>)
1a003bca:	4620      	mov	r0, r4
1a003bcc:	f001 f92e 	bl	1a004e2c <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a003bd0:	2001      	movs	r0, #1
1a003bd2:	bd38      	pop	{r3, r4, r5, pc}
1a003bd4:	40086000 	.word	0x40086000
1a003bd8:	1a004ea5 	.word	0x1a004ea5

1a003bdc <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a003bdc:	b500      	push	{lr}
1a003bde:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a003be0:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a003be4:	2100      	movs	r1, #0
1a003be6:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a003bea:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a003bee:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a003bf0:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a003bf4:	9b07      	ldr	r3, [sp, #28]
1a003bf6:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a003bf8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a003bfc:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a003c00:	4669      	mov	r1, sp
1a003c02:	4804      	ldr	r0, [pc, #16]	; (1a003c14 <i2cHardwareRead+0x38>)
1a003c04:	f001 f805 	bl	1a004c12 <Chip_I2CM_XferBlocking>
1a003c08:	b100      	cbz	r0, 1a003c0c <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a003c0a:	2001      	movs	r0, #1
}
1a003c0c:	b005      	add	sp, #20
1a003c0e:	f85d fb04 	ldr.w	pc, [sp], #4
1a003c12:	bf00      	nop
1a003c14:	400a1000 	.word	0x400a1000

1a003c18 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a003c18:	b108      	cbz	r0, 1a003c1e <i2cHardwareWrite+0x6>
      return FALSE;
1a003c1a:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a003c1c:	4770      	bx	lr
{
1a003c1e:	b500      	push	{lr}
1a003c20:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a003c22:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a003c26:	2100      	movs	r1, #0
1a003c28:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a003c2c:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a003c30:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a003c32:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a003c36:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a003c38:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a003c3c:	4669      	mov	r1, sp
1a003c3e:	4804      	ldr	r0, [pc, #16]	; (1a003c50 <i2cHardwareWrite+0x38>)
1a003c40:	f000 ffe7 	bl	1a004c12 <Chip_I2CM_XferBlocking>
1a003c44:	b100      	cbz	r0, 1a003c48 <i2cHardwareWrite+0x30>
   return TRUE;
1a003c46:	2001      	movs	r0, #1
}
1a003c48:	b005      	add	sp, #20
1a003c4a:	f85d fb04 	ldr.w	pc, [sp], #4
1a003c4e:	bf00      	nop
1a003c50:	400a1000 	.word	0x400a1000

1a003c54 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003c54:	b108      	cbz	r0, 1a003c5a <i2cInit+0x6>
      return FALSE;
1a003c56:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a003c58:	4770      	bx	lr
{
1a003c5a:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a003c5c:	f7ff ffa6 	bl	1a003bac <i2cHardwareInit>
}
1a003c60:	bd08      	pop	{r3, pc}

1a003c62 <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003c62:	b108      	cbz	r0, 1a003c68 <i2cRead+0x6>
      return FALSE;
1a003c64:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a003c66:	4770      	bx	lr
{
1a003c68:	b510      	push	{r4, lr}
1a003c6a:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a003c6c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a003c70:	9403      	str	r4, [sp, #12]
1a003c72:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a003c76:	9402      	str	r4, [sp, #8]
1a003c78:	9c07      	ldr	r4, [sp, #28]
1a003c7a:	9401      	str	r4, [sp, #4]
1a003c7c:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a003c80:	9400      	str	r4, [sp, #0]
1a003c82:	f7ff ffab 	bl	1a003bdc <i2cHardwareRead>
}
1a003c86:	b004      	add	sp, #16
1a003c88:	bd10      	pop	{r4, pc}

1a003c8a <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003c8a:	b108      	cbz	r0, 1a003c90 <i2cWrite+0x6>
      return FALSE;
1a003c8c:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a003c8e:	4770      	bx	lr
{
1a003c90:	b510      	push	{r4, lr}
1a003c92:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a003c94:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a003c98:	9400      	str	r4, [sp, #0]
1a003c9a:	f7ff ffbd 	bl	1a003c18 <i2cHardwareWrite>
}
1a003c9e:	b002      	add	sp, #8
1a003ca0:	bd10      	pop	{r4, pc}

1a003ca2 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a003ca2:	e7fe      	b.n	1a003ca2 <errorOcurred>

1a003ca4 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a003ca4:	4770      	bx	lr
1a003ca6:	Address 0x000000001a003ca6 is out of bounds.


1a003ca8 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a003ca8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003caa:	2400      	movs	r4, #0
1a003cac:	e001      	b.n	1a003cb2 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003cae:	3401      	adds	r4, #1
1a003cb0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003cb2:	2c03      	cmp	r4, #3
1a003cb4:	d812      	bhi.n	1a003cdc <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a003cb6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003cb8:	4b09      	ldr	r3, [pc, #36]	; (1a003ce0 <TIMER0_IRQHandler+0x38>)
1a003cba:	681a      	ldr	r2, [r3, #0]
1a003cbc:	f004 010f 	and.w	r1, r4, #15
1a003cc0:	2301      	movs	r3, #1
1a003cc2:	408b      	lsls	r3, r1
1a003cc4:	421a      	tst	r2, r3
1a003cc6:	d0f2      	beq.n	1a003cae <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003cc8:	4b06      	ldr	r3, [pc, #24]	; (1a003ce4 <TIMER0_IRQHandler+0x3c>)
1a003cca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a003cce:	2000      	movs	r0, #0
1a003cd0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003cd2:	2301      	movs	r3, #1
1a003cd4:	40ab      	lsls	r3, r5
1a003cd6:	4a02      	ldr	r2, [pc, #8]	; (1a003ce0 <TIMER0_IRQHandler+0x38>)
1a003cd8:	6013      	str	r3, [r2, #0]
1a003cda:	e7e8      	b.n	1a003cae <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a003cdc:	bd38      	pop	{r3, r4, r5, pc}
1a003cde:	bf00      	nop
1a003ce0:	40084000 	.word	0x40084000
1a003ce4:	10000054 	.word	0x10000054

1a003ce8 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a003ce8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003cea:	2400      	movs	r4, #0
1a003cec:	e001      	b.n	1a003cf2 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003cee:	3401      	adds	r4, #1
1a003cf0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003cf2:	2c03      	cmp	r4, #3
1a003cf4:	d813      	bhi.n	1a003d1e <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a003cf6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003cf8:	4b09      	ldr	r3, [pc, #36]	; (1a003d20 <TIMER1_IRQHandler+0x38>)
1a003cfa:	681a      	ldr	r2, [r3, #0]
1a003cfc:	f004 010f 	and.w	r1, r4, #15
1a003d00:	2301      	movs	r3, #1
1a003d02:	408b      	lsls	r3, r1
1a003d04:	421a      	tst	r2, r3
1a003d06:	d0f2      	beq.n	1a003cee <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003d08:	1d23      	adds	r3, r4, #4
1a003d0a:	4a06      	ldr	r2, [pc, #24]	; (1a003d24 <TIMER1_IRQHandler+0x3c>)
1a003d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003d10:	2000      	movs	r0, #0
1a003d12:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003d14:	2301      	movs	r3, #1
1a003d16:	40ab      	lsls	r3, r5
1a003d18:	4a01      	ldr	r2, [pc, #4]	; (1a003d20 <TIMER1_IRQHandler+0x38>)
1a003d1a:	6013      	str	r3, [r2, #0]
1a003d1c:	e7e7      	b.n	1a003cee <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a003d1e:	bd38      	pop	{r3, r4, r5, pc}
1a003d20:	40085000 	.word	0x40085000
1a003d24:	10000054 	.word	0x10000054

1a003d28 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a003d28:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003d2a:	2400      	movs	r4, #0
1a003d2c:	e001      	b.n	1a003d32 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003d2e:	3401      	adds	r4, #1
1a003d30:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003d32:	2c03      	cmp	r4, #3
1a003d34:	d814      	bhi.n	1a003d60 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a003d36:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003d38:	4b0a      	ldr	r3, [pc, #40]	; (1a003d64 <TIMER2_IRQHandler+0x3c>)
1a003d3a:	681a      	ldr	r2, [r3, #0]
1a003d3c:	f004 010f 	and.w	r1, r4, #15
1a003d40:	2301      	movs	r3, #1
1a003d42:	408b      	lsls	r3, r1
1a003d44:	421a      	tst	r2, r3
1a003d46:	d0f2      	beq.n	1a003d2e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003d48:	f104 0308 	add.w	r3, r4, #8
1a003d4c:	4a06      	ldr	r2, [pc, #24]	; (1a003d68 <TIMER2_IRQHandler+0x40>)
1a003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003d52:	2000      	movs	r0, #0
1a003d54:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003d56:	2301      	movs	r3, #1
1a003d58:	40ab      	lsls	r3, r5
1a003d5a:	4a02      	ldr	r2, [pc, #8]	; (1a003d64 <TIMER2_IRQHandler+0x3c>)
1a003d5c:	6013      	str	r3, [r2, #0]
1a003d5e:	e7e6      	b.n	1a003d2e <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a003d60:	bd38      	pop	{r3, r4, r5, pc}
1a003d62:	bf00      	nop
1a003d64:	400c3000 	.word	0x400c3000
1a003d68:	10000054 	.word	0x10000054

1a003d6c <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a003d6c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003d6e:	2400      	movs	r4, #0
1a003d70:	e001      	b.n	1a003d76 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003d72:	3401      	adds	r4, #1
1a003d74:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003d76:	2c03      	cmp	r4, #3
1a003d78:	d814      	bhi.n	1a003da4 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a003d7a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003d7c:	4b0a      	ldr	r3, [pc, #40]	; (1a003da8 <TIMER3_IRQHandler+0x3c>)
1a003d7e:	681a      	ldr	r2, [r3, #0]
1a003d80:	f004 010f 	and.w	r1, r4, #15
1a003d84:	2301      	movs	r3, #1
1a003d86:	408b      	lsls	r3, r1
1a003d88:	421a      	tst	r2, r3
1a003d8a:	d0f2      	beq.n	1a003d72 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003d8c:	f104 030c 	add.w	r3, r4, #12
1a003d90:	4a06      	ldr	r2, [pc, #24]	; (1a003dac <TIMER3_IRQHandler+0x40>)
1a003d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003d96:	2000      	movs	r0, #0
1a003d98:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003d9a:	2301      	movs	r3, #1
1a003d9c:	40ab      	lsls	r3, r5
1a003d9e:	4a02      	ldr	r2, [pc, #8]	; (1a003da8 <TIMER3_IRQHandler+0x3c>)
1a003da0:	6013      	str	r3, [r2, #0]
1a003da2:	e7e6      	b.n	1a003d72 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a003da4:	bd38      	pop	{r3, r4, r5, pc}
1a003da6:	bf00      	nop
1a003da8:	400c4000 	.word	0x400c4000
1a003dac:	10000054 	.word	0x10000054

1a003db0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003db0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003db2:	f000 fb13 	bl	1a0043dc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003db6:	4b3a      	ldr	r3, [pc, #232]	; (1a003ea0 <boardInit+0xf0>)
1a003db8:	6818      	ldr	r0, [r3, #0]
1a003dba:	f7ff fc85 	bl	1a0036c8 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a003dbe:	2001      	movs	r0, #1
1a003dc0:	2100      	movs	r1, #0
1a003dc2:	f7ff fdf7 	bl	1a0039b4 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a003dc6:	2105      	movs	r1, #5
1a003dc8:	2000      	movs	r0, #0
1a003dca:	f7ff fce1 	bl	1a003790 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a003dce:	2100      	movs	r1, #0
1a003dd0:	2024      	movs	r0, #36	; 0x24
1a003dd2:	f7ff fcdd 	bl	1a003790 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a003dd6:	2100      	movs	r1, #0
1a003dd8:	2025      	movs	r0, #37	; 0x25
1a003dda:	f7ff fcd9 	bl	1a003790 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a003dde:	2100      	movs	r1, #0
1a003de0:	2026      	movs	r0, #38	; 0x26
1a003de2:	f7ff fcd5 	bl	1a003790 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a003de6:	2100      	movs	r1, #0
1a003de8:	2027      	movs	r0, #39	; 0x27
1a003dea:	f7ff fcd1 	bl	1a003790 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a003dee:	2101      	movs	r1, #1
1a003df0:	2028      	movs	r0, #40	; 0x28
1a003df2:	f7ff fccd 	bl	1a003790 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a003df6:	2101      	movs	r1, #1
1a003df8:	2029      	movs	r0, #41	; 0x29
1a003dfa:	f7ff fcc9 	bl	1a003790 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a003dfe:	2101      	movs	r1, #1
1a003e00:	202a      	movs	r0, #42	; 0x2a
1a003e02:	f7ff fcc5 	bl	1a003790 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a003e06:	2101      	movs	r1, #1
1a003e08:	202b      	movs	r0, #43	; 0x2b
1a003e0a:	f7ff fcc1 	bl	1a003790 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a003e0e:	2101      	movs	r1, #1
1a003e10:	202c      	movs	r0, #44	; 0x2c
1a003e12:	f7ff fcbd 	bl	1a003790 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a003e16:	2101      	movs	r1, #1
1a003e18:	202d      	movs	r0, #45	; 0x2d
1a003e1a:	f7ff fcb9 	bl	1a003790 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a003e1e:	2100      	movs	r1, #0
1a003e20:	202e      	movs	r0, #46	; 0x2e
1a003e22:	f7ff fcb5 	bl	1a003790 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a003e26:	2100      	movs	r1, #0
1a003e28:	202f      	movs	r0, #47	; 0x2f
1a003e2a:	f7ff fcb1 	bl	1a003790 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a003e2e:	2100      	movs	r1, #0
1a003e30:	2030      	movs	r0, #48	; 0x30
1a003e32:	f7ff fcad 	bl	1a003790 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a003e36:	2100      	movs	r1, #0
1a003e38:	2031      	movs	r0, #49	; 0x31
1a003e3a:	f7ff fca9 	bl	1a003790 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a003e3e:	2100      	movs	r1, #0
1a003e40:	2032      	movs	r0, #50	; 0x32
1a003e42:	f7ff fca5 	bl	1a003790 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a003e46:	2100      	movs	r1, #0
1a003e48:	2033      	movs	r0, #51	; 0x33
1a003e4a:	f7ff fca1 	bl	1a003790 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a003e4e:	2100      	movs	r1, #0
1a003e50:	2034      	movs	r0, #52	; 0x34
1a003e52:	f7ff fc9d 	bl	1a003790 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a003e56:	2100      	movs	r1, #0
1a003e58:	2035      	movs	r0, #53	; 0x35
1a003e5a:	f7ff fc99 	bl	1a003790 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a003e5e:	2101      	movs	r1, #1
1a003e60:	2036      	movs	r0, #54	; 0x36
1a003e62:	f7ff fc95 	bl	1a003790 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a003e66:	2101      	movs	r1, #1
1a003e68:	2037      	movs	r0, #55	; 0x37
1a003e6a:	f7ff fc91 	bl	1a003790 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a003e6e:	2101      	movs	r1, #1
1a003e70:	2038      	movs	r0, #56	; 0x38
1a003e72:	f7ff fc8d 	bl	1a003790 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a003e76:	2101      	movs	r1, #1
1a003e78:	2039      	movs	r0, #57	; 0x39
1a003e7a:	f7ff fc89 	bl	1a003790 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a003e7e:	2101      	movs	r1, #1
1a003e80:	203a      	movs	r0, #58	; 0x3a
1a003e82:	f7ff fc85 	bl	1a003790 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a003e86:	2101      	movs	r1, #1
1a003e88:	203b      	movs	r0, #59	; 0x3b
1a003e8a:	f7ff fc81 	bl	1a003790 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a003e8e:	2101      	movs	r1, #1
1a003e90:	203c      	movs	r0, #60	; 0x3c
1a003e92:	f7ff fc7d 	bl	1a003790 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a003e96:	2101      	movs	r1, #1
1a003e98:	203d      	movs	r0, #61	; 0x3d
1a003e9a:	f7ff fc79 	bl	1a003790 <gpioInit>

}
1a003e9e:	bd08      	pop	{r3, pc}
1a003ea0:	10002d18 	.word	0x10002d18

1a003ea4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003ea4:	2200      	movs	r2, #0
1a003ea6:	2a05      	cmp	r2, #5
1a003ea8:	d819      	bhi.n	1a003ede <Board_LED_Init+0x3a>
{
1a003eaa:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a003eac:	490c      	ldr	r1, [pc, #48]	; (1a003ee0 <Board_LED_Init+0x3c>)
1a003eae:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a003eb2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a003eb6:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a003eb8:	4b0a      	ldr	r3, [pc, #40]	; (1a003ee4 <Board_LED_Init+0x40>)
1a003eba:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a003ebe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003ec2:	2001      	movs	r0, #1
1a003ec4:	40a0      	lsls	r0, r4
1a003ec6:	4301      	orrs	r1, r0
1a003ec8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a003ecc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a003ed0:	2100      	movs	r1, #0
1a003ed2:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003ed4:	3201      	adds	r2, #1
1a003ed6:	2a05      	cmp	r2, #5
1a003ed8:	d9e8      	bls.n	1a003eac <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a003eda:	bc70      	pop	{r4, r5, r6}
1a003edc:	4770      	bx	lr
1a003ede:	4770      	bx	lr
1a003ee0:	1a005a08 	.word	0x1a005a08
1a003ee4:	400f4000 	.word	0x400f4000

1a003ee8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003ee8:	2300      	movs	r3, #0
1a003eea:	2b03      	cmp	r3, #3
1a003eec:	d816      	bhi.n	1a003f1c <Board_TEC_Init+0x34>
{
1a003eee:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003ef0:	490b      	ldr	r1, [pc, #44]	; (1a003f20 <Board_TEC_Init+0x38>)
1a003ef2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003ef6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003efa:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a003efc:	4c09      	ldr	r4, [pc, #36]	; (1a003f24 <Board_TEC_Init+0x3c>)
1a003efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003f02:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003f06:	2001      	movs	r0, #1
1a003f08:	40a8      	lsls	r0, r5
1a003f0a:	ea21 0100 	bic.w	r1, r1, r0
1a003f0e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003f12:	3301      	adds	r3, #1
1a003f14:	2b03      	cmp	r3, #3
1a003f16:	d9eb      	bls.n	1a003ef0 <Board_TEC_Init+0x8>
    }
}
1a003f18:	bc30      	pop	{r4, r5}
1a003f1a:	4770      	bx	lr
1a003f1c:	4770      	bx	lr
1a003f1e:	bf00      	nop
1a003f20:	1a005a00 	.word	0x1a005a00
1a003f24:	400f4000 	.word	0x400f4000

1a003f28 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003f28:	2300      	movs	r3, #0
1a003f2a:	2b08      	cmp	r3, #8
1a003f2c:	d816      	bhi.n	1a003f5c <Board_GPIO_Init+0x34>
{
1a003f2e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003f30:	490b      	ldr	r1, [pc, #44]	; (1a003f60 <Board_GPIO_Init+0x38>)
1a003f32:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003f36:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003f3a:	784d      	ldrb	r5, [r1, #1]
1a003f3c:	4c09      	ldr	r4, [pc, #36]	; (1a003f64 <Board_GPIO_Init+0x3c>)
1a003f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003f42:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003f46:	2001      	movs	r0, #1
1a003f48:	40a8      	lsls	r0, r5
1a003f4a:	ea21 0100 	bic.w	r1, r1, r0
1a003f4e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003f52:	3301      	adds	r3, #1
1a003f54:	2b08      	cmp	r3, #8
1a003f56:	d9eb      	bls.n	1a003f30 <Board_GPIO_Init+0x8>
    }
}
1a003f58:	bc30      	pop	{r4, r5}
1a003f5a:	4770      	bx	lr
1a003f5c:	4770      	bx	lr
1a003f5e:	bf00      	nop
1a003f60:	1a005a14 	.word	0x1a005a14
1a003f64:	400f4000 	.word	0x400f4000

1a003f68 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a003f68:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a003f6a:	4c0b      	ldr	r4, [pc, #44]	; (1a003f98 <Board_SPI_Init+0x30>)
1a003f6c:	4620      	mov	r0, r4
1a003f6e:	f000 fff3 	bl	1a004f58 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003f72:	6863      	ldr	r3, [r4, #4]
1a003f74:	f023 0304 	bic.w	r3, r3, #4
1a003f78:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003f7a:	6823      	ldr	r3, [r4, #0]
1a003f7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003f80:	f043 0307 	orr.w	r3, r3, #7
1a003f84:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003f86:	4905      	ldr	r1, [pc, #20]	; (1a003f9c <Board_SPI_Init+0x34>)
1a003f88:	4620      	mov	r0, r4
1a003f8a:	f000 ffc6 	bl	1a004f1a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003f8e:	6863      	ldr	r3, [r4, #4]
1a003f90:	f043 0302 	orr.w	r3, r3, #2
1a003f94:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a003f96:	bd10      	pop	{r4, pc}
1a003f98:	400c5000 	.word	0x400c5000
1a003f9c:	000186a0 	.word	0x000186a0

1a003fa0 <Board_I2C_Init>:
{
1a003fa0:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a003fa2:	2000      	movs	r0, #0
1a003fa4:	f000 ff14 	bl	1a004dd0 <Chip_I2C_Init>
1a003fa8:	4b04      	ldr	r3, [pc, #16]	; (1a003fbc <Board_I2C_Init+0x1c>)
1a003faa:	f640 0208 	movw	r2, #2056	; 0x808
1a003fae:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003fb2:	4903      	ldr	r1, [pc, #12]	; (1a003fc0 <Board_I2C_Init+0x20>)
1a003fb4:	2000      	movs	r0, #0
1a003fb6:	f000 ff1d 	bl	1a004df4 <Chip_I2C_SetClockRate>
}
1a003fba:	bd08      	pop	{r3, pc}
1a003fbc:	40086000 	.word	0x40086000
1a003fc0:	000f4240 	.word	0x000f4240

1a003fc4 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a003fc4:	b510      	push	{r4, lr}
1a003fc6:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a003fc8:	4c08      	ldr	r4, [pc, #32]	; (1a003fec <Board_ADC_Init+0x28>)
1a003fca:	4669      	mov	r1, sp
1a003fcc:	4620      	mov	r0, r4
1a003fce:	f000 f9c5 	bl	1a00435c <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a003fd2:	4a07      	ldr	r2, [pc, #28]	; (1a003ff0 <Board_ADC_Init+0x2c>)
1a003fd4:	4669      	mov	r1, sp
1a003fd6:	4620      	mov	r0, r4
1a003fd8:	f000 f9e0 	bl	1a00439c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003fdc:	2200      	movs	r2, #0
1a003fde:	4669      	mov	r1, sp
1a003fe0:	4620      	mov	r0, r4
1a003fe2:	f000 f9f4 	bl	1a0043ce <Chip_ADC_SetResolution>
}
1a003fe6:	b002      	add	sp, #8
1a003fe8:	bd10      	pop	{r4, pc}
1a003fea:	bf00      	nop
1a003fec:	400e3000 	.word	0x400e3000
1a003ff0:	00061a80 	.word	0x00061a80

1a003ff4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003ff4:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a003ff6:	4c07      	ldr	r4, [pc, #28]	; (1a004014 <Board_Debug_Init+0x20>)
1a003ff8:	4620      	mov	r0, r4
1a003ffa:	f000 f8cd 	bl	1a004198 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a003ffe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a004002:	4620      	mov	r0, r4
1a004004:	f000 f912 	bl	1a00422c <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a004008:	2303      	movs	r3, #3
1a00400a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00400c:	2301      	movs	r3, #1
1a00400e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a004010:	bd10      	pop	{r4, pc}
1a004012:	bf00      	nop
1a004014:	400c1000 	.word	0x400c1000

1a004018 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a004018:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00401a:	f7ff ffeb 	bl	1a003ff4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00401e:	480b      	ldr	r0, [pc, #44]	; (1a00404c <Board_Init+0x34>)
1a004020:	f000 fe34 	bl	1a004c8c <Chip_GPIO_Init>

   Board_LED_Init();
1a004024:	f7ff ff3e 	bl	1a003ea4 <Board_LED_Init>
   Board_TEC_Init();
1a004028:	f7ff ff5e 	bl	1a003ee8 <Board_TEC_Init>
   Board_SPI_Init();
1a00402c:	f7ff ff9c 	bl	1a003f68 <Board_SPI_Init>
   Board_GPIO_Init();
1a004030:	f7ff ff7a 	bl	1a003f28 <Board_GPIO_Init>
   Board_I2C_Init();
1a004034:	f7ff ffb4 	bl	1a003fa0 <Board_I2C_Init>
   Board_ADC_Init();
1a004038:	f7ff ffc4 	bl	1a003fc4 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a00403c:	4a04      	ldr	r2, [pc, #16]	; (1a004050 <Board_Init+0x38>)
1a00403e:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a004042:	f043 0304 	orr.w	r3, r3, #4
1a004046:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a00404a:	bd08      	pop	{r3, pc}
1a00404c:	400f4000 	.word	0x400f4000
1a004050:	40043000 	.word	0x40043000

1a004054 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a004054:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a004056:	4a04      	ldr	r2, [pc, #16]	; (1a004068 <SystemInit+0x14>)
1a004058:	4b04      	ldr	r3, [pc, #16]	; (1a00406c <SystemInit+0x18>)
1a00405a:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a00405c:	f000 fdec 	bl	1a004c38 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a004060:	f000 f858 	bl	1a004114 <Board_SystemInit>
}
1a004064:	bd08      	pop	{r3, pc}
1a004066:	bf00      	nop
1a004068:	1a000000 	.word	0x1a000000
1a00406c:	e000ed08 	.word	0xe000ed08

1a004070 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a004070:	2300      	movs	r3, #0
1a004072:	2b25      	cmp	r3, #37	; 0x25
1a004074:	d812      	bhi.n	1a00409c <Board_SetupMuxing+0x2c>
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a004076:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a004078:	4a09      	ldr	r2, [pc, #36]	; (1a0040a0 <Board_SetupMuxing+0x30>)
1a00407a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00407e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a004082:	784a      	ldrb	r2, [r1, #1]
1a004084:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004086:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00408a:	4906      	ldr	r1, [pc, #24]	; (1a0040a4 <Board_SetupMuxing+0x34>)
1a00408c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a004090:	3301      	adds	r3, #1
1a004092:	2b25      	cmp	r3, #37	; 0x25
1a004094:	d9f0      	bls.n	1a004078 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a004096:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00409a:	4770      	bx	lr
1a00409c:	4770      	bx	lr
1a00409e:	bf00      	nop
1a0040a0:	1a005a38 	.word	0x1a005a38
1a0040a4:	40086000 	.word	0x40086000

1a0040a8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0040a8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0040aa:	4a17      	ldr	r2, [pc, #92]	; (1a004108 <Board_SetupClocking+0x60>)
1a0040ac:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0040b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0040b4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0040b8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0040bc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0040c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0040c4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0040c8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0040cc:	2201      	movs	r2, #1
1a0040ce:	490f      	ldr	r1, [pc, #60]	; (1a00410c <Board_SetupClocking+0x64>)
1a0040d0:	2006      	movs	r0, #6
1a0040d2:	f000 fc6f 	bl	1a0049b4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0040d6:	2400      	movs	r4, #0
1a0040d8:	e00a      	b.n	1a0040f0 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0040da:	480d      	ldr	r0, [pc, #52]	; (1a004110 <Board_SetupClocking+0x68>)
1a0040dc:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0040e0:	78cb      	ldrb	r3, [r1, #3]
1a0040e2:	788a      	ldrb	r2, [r1, #2]
1a0040e4:	7849      	ldrb	r1, [r1, #1]
1a0040e6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0040ea:	f000 fba5 	bl	1a004838 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0040ee:	3401      	adds	r4, #1
1a0040f0:	2c02      	cmp	r4, #2
1a0040f2:	d9f2      	bls.n	1a0040da <Board_SetupClocking+0x32>
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0040f4:	4b04      	ldr	r3, [pc, #16]	; (1a004108 <Board_SetupClocking+0x60>)
1a0040f6:	685a      	ldr	r2, [r3, #4]
1a0040f8:	f022 020c 	bic.w	r2, r2, #12
1a0040fc:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0040fe:	685a      	ldr	r2, [r3, #4]
1a004100:	f042 0203 	orr.w	r2, r2, #3
1a004104:	605a      	str	r2, [r3, #4]
}
1a004106:	bd10      	pop	{r4, pc}
1a004108:	40043000 	.word	0x40043000
1a00410c:	0c28cb00 	.word	0x0c28cb00
1a004110:	1a005a2c 	.word	0x1a005a2c

1a004114 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a004114:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a004116:	f7ff ffab 	bl	1a004070 <Board_SetupMuxing>
    Board_SetupClocking();
1a00411a:	f7ff ffc5 	bl	1a0040a8 <Board_SetupClocking>
}
1a00411e:	bd08      	pop	{r3, pc}

1a004120 <Chip_DAC_DeInit>:
	Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_1MHz);
}

/* Shutdown DAC peripheral */
void Chip_DAC_DeInit(LPC_DAC_T *pDAC)
{
1a004120:	b508      	push	{r3, lr}
	Chip_Clock_Disable(CLK_APB3_DAC);
1a004122:	2002      	movs	r0, #2
1a004124:	f000 fc06 	bl	1a004934 <Chip_Clock_Disable>
}
1a004128:	bd08      	pop	{r3, pc}

1a00412a <Chip_DAC_UpdateValue>:
/* Update value to DAC buffer*/
void Chip_DAC_UpdateValue(LPC_DAC_T *pDAC, uint32_t dac_value)
{
	uint32_t tmp;

	tmp = pDAC->CR & DAC_BIAS_EN;
1a00412a:	6803      	ldr	r3, [r0, #0]
1a00412c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	tmp |= DAC_VALUE(dac_value);
1a004130:	0189      	lsls	r1, r1, #6
1a004132:	b289      	uxth	r1, r1
1a004134:	4319      	orrs	r1, r3
	/* Update value */
	pDAC->CR = tmp;
1a004136:	6001      	str	r1, [r0, #0]
}
1a004138:	4770      	bx	lr

1a00413a <Chip_DAC_SetBias>:

/* Set Maximum update rate for DAC */
void Chip_DAC_SetBias(LPC_DAC_T *pDAC, uint32_t bias)
{
	pDAC->CR &= ~DAC_BIAS_EN;
1a00413a:	6803      	ldr	r3, [r0, #0]
1a00413c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a004140:	6003      	str	r3, [r0, #0]

	if (bias  == DAC_MAX_UPDATE_RATE_400kHz) {
1a004142:	2901      	cmp	r1, #1
1a004144:	d000      	beq.n	1a004148 <Chip_DAC_SetBias+0xe>
		pDAC->CR |= DAC_BIAS_EN;
	}
}
1a004146:	4770      	bx	lr
		pDAC->CR |= DAC_BIAS_EN;
1a004148:	6803      	ldr	r3, [r0, #0]
1a00414a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a00414e:	6003      	str	r3, [r0, #0]
}
1a004150:	e7f9      	b.n	1a004146 <Chip_DAC_SetBias+0xc>

1a004152 <Chip_DAC_Init>:
{
1a004152:	b510      	push	{r4, lr}
1a004154:	4604      	mov	r4, r0
	Chip_Clock_EnableOpts(CLK_APB3_DAC, true, true, 1);
1a004156:	2301      	movs	r3, #1
1a004158:	461a      	mov	r2, r3
1a00415a:	4619      	mov	r1, r3
1a00415c:	2002      	movs	r0, #2
1a00415e:	f000 fbb1 	bl	1a0048c4 <Chip_Clock_EnableOpts>
	Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_1MHz);
1a004162:	2100      	movs	r1, #0
1a004164:	4620      	mov	r0, r4
1a004166:	f7ff ffe8 	bl	1a00413a <Chip_DAC_SetBias>
}
1a00416a:	bd10      	pop	{r4, pc}

1a00416c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a00416c:	4b09      	ldr	r3, [pc, #36]	; (1a004194 <Chip_UART_GetIndex+0x28>)
1a00416e:	4298      	cmp	r0, r3
1a004170:	d009      	beq.n	1a004186 <Chip_UART_GetIndex+0x1a>
1a004172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a004176:	4298      	cmp	r0, r3
1a004178:	d007      	beq.n	1a00418a <Chip_UART_GetIndex+0x1e>
1a00417a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00417e:	4298      	cmp	r0, r3
1a004180:	d005      	beq.n	1a00418e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a004182:	2000      	movs	r0, #0
1a004184:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a004186:	2002      	movs	r0, #2
1a004188:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00418a:	2003      	movs	r0, #3
1a00418c:	4770      	bx	lr
			return 1;
1a00418e:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a004190:	4770      	bx	lr
1a004192:	bf00      	nop
1a004194:	400c1000 	.word	0x400c1000

1a004198 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a004198:	b530      	push	{r4, r5, lr}
1a00419a:	b083      	sub	sp, #12
1a00419c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00419e:	f7ff ffe5 	bl	1a00416c <Chip_UART_GetIndex>
1a0041a2:	2301      	movs	r3, #1
1a0041a4:	461a      	mov	r2, r3
1a0041a6:	4619      	mov	r1, r3
1a0041a8:	4d0e      	ldr	r5, [pc, #56]	; (1a0041e4 <Chip_UART_Init+0x4c>)
1a0041aa:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0041ae:	f000 fb89 	bl	1a0048c4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0041b2:	2307      	movs	r3, #7
1a0041b4:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0041b6:	2300      	movs	r3, #0
1a0041b8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0041ba:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0041bc:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0041be:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0041c0:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0041c2:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0041c4:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0041c6:	4b08      	ldr	r3, [pc, #32]	; (1a0041e8 <Chip_UART_Init+0x50>)
1a0041c8:	429c      	cmp	r4, r3
1a0041ca:	d006      	beq.n	1a0041da <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0041cc:	2303      	movs	r3, #3
1a0041ce:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0041d0:	2310      	movs	r3, #16
1a0041d2:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0041d4:	9b01      	ldr	r3, [sp, #4]
}
1a0041d6:	b003      	add	sp, #12
1a0041d8:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0041da:	2300      	movs	r3, #0
1a0041dc:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0041de:	69a3      	ldr	r3, [r4, #24]
1a0041e0:	9301      	str	r3, [sp, #4]
1a0041e2:	e7f3      	b.n	1a0041cc <Chip_UART_Init+0x34>
1a0041e4:	1a005ad8 	.word	0x1a005ad8
1a0041e8:	40082000 	.word	0x40082000

1a0041ec <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0041ec:	b538      	push	{r3, r4, r5, lr}
1a0041ee:	4605      	mov	r5, r0
1a0041f0:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0041f2:	f7ff ffbb 	bl	1a00416c <Chip_UART_GetIndex>
1a0041f6:	4b0c      	ldr	r3, [pc, #48]	; (1a004228 <Chip_UART_SetBaud+0x3c>)
1a0041f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0041fc:	f000 fbb4 	bl	1a004968 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a004200:	0123      	lsls	r3, r4, #4
1a004202:	fbb0 f3f3 	udiv	r3, r0, r3
1a004206:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a004208:	68ea      	ldr	r2, [r5, #12]
1a00420a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00420e:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a004210:	6029      	str	r1, [r5, #0]
1a004212:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a004216:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a004218:	68ea      	ldr	r2, [r5, #12]
1a00421a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00421e:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a004220:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a004224:	0900      	lsrs	r0, r0, #4
1a004226:	bd38      	pop	{r3, r4, r5, pc}
1a004228:	1a005ad0 	.word	0x1a005ad0

1a00422c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a00422c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004230:	b083      	sub	sp, #12
1a004232:	4683      	mov	fp, r0
1a004234:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a004236:	f7ff ff99 	bl	1a00416c <Chip_UART_GetIndex>
1a00423a:	4b35      	ldr	r3, [pc, #212]	; (1a004310 <Chip_UART_SetBaudFDR+0xe4>)
1a00423c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a004240:	f000 fb92 	bl	1a004968 <Chip_Clock_GetRate>
1a004244:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a004246:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00424a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00424c:	2300      	movs	r3, #0
1a00424e:	9301      	str	r3, [sp, #4]
1a004250:	46a2      	mov	sl, r4
1a004252:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a004254:	e02a      	b.n	1a0042ac <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a004256:	4242      	negs	r2, r0
				div ++;
1a004258:	1c4b      	adds	r3, r1, #1
1a00425a:	e017      	b.n	1a00428c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00425c:	b30a      	cbz	r2, 1a0042a2 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00425e:	4617      	mov	r7, r2
			sd = d;
1a004260:	9501      	str	r5, [sp, #4]
			sm = m;
1a004262:	46a2      	mov	sl, r4
			sdiv = div;
1a004264:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a004266:	3501      	adds	r5, #1
1a004268:	42ac      	cmp	r4, r5
1a00426a:	d91e      	bls.n	1a0042aa <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00426c:	0933      	lsrs	r3, r6, #4
1a00426e:	0730      	lsls	r0, r6, #28
1a004270:	fba4 0100 	umull	r0, r1, r4, r0
1a004274:	fb04 1103 	mla	r1, r4, r3, r1
1a004278:	1962      	adds	r2, r4, r5
1a00427a:	fb08 f202 	mul.w	r2, r8, r2
1a00427e:	2300      	movs	r3, #0
1a004280:	f001 f8d6 	bl	1a005430 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a004284:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a004286:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a004288:	2800      	cmp	r0, #0
1a00428a:	dbe4      	blt.n	1a004256 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00428c:	4297      	cmp	r7, r2
1a00428e:	d3ea      	bcc.n	1a004266 <Chip_UART_SetBaudFDR+0x3a>
1a004290:	2b00      	cmp	r3, #0
1a004292:	d0e8      	beq.n	1a004266 <Chip_UART_SetBaudFDR+0x3a>
1a004294:	0c19      	lsrs	r1, r3, #16
1a004296:	d1e6      	bne.n	1a004266 <Chip_UART_SetBaudFDR+0x3a>
1a004298:	2b02      	cmp	r3, #2
1a00429a:	d8df      	bhi.n	1a00425c <Chip_UART_SetBaudFDR+0x30>
1a00429c:	2d00      	cmp	r5, #0
1a00429e:	d0dd      	beq.n	1a00425c <Chip_UART_SetBaudFDR+0x30>
1a0042a0:	e7e1      	b.n	1a004266 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0042a2:	4617      	mov	r7, r2
			sd = d;
1a0042a4:	9501      	str	r5, [sp, #4]
			sm = m;
1a0042a6:	46a2      	mov	sl, r4
			sdiv = div;
1a0042a8:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0042aa:	3401      	adds	r4, #1
1a0042ac:	b11f      	cbz	r7, 1a0042b6 <Chip_UART_SetBaudFDR+0x8a>
1a0042ae:	2c0f      	cmp	r4, #15
1a0042b0:	d801      	bhi.n	1a0042b6 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0042b2:	2500      	movs	r5, #0
1a0042b4:	e7d8      	b.n	1a004268 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0042b6:	f1b9 0f00 	cmp.w	r9, #0
1a0042ba:	d024      	beq.n	1a004306 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0042bc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0042c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0042c4:	f8cb 300c 	str.w	r3, [fp, #12]
1a0042c8:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0042cc:	f8cb 3000 	str.w	r3, [fp]
1a0042d0:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0042d4:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0042d8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0042dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0042e0:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0042e4:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0042e8:	b2db      	uxtb	r3, r3
1a0042ea:	9901      	ldr	r1, [sp, #4]
1a0042ec:	f001 020f 	and.w	r2, r1, #15
1a0042f0:	4313      	orrs	r3, r2
1a0042f2:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0042f6:	0933      	lsrs	r3, r6, #4
1a0042f8:	fb0a f303 	mul.w	r3, sl, r3
1a0042fc:	448a      	add	sl, r1
1a0042fe:	fb09 f90a 	mul.w	r9, r9, sl
1a004302:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a004306:	4648      	mov	r0, r9
1a004308:	b003      	add	sp, #12
1a00430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00430e:	bf00      	nop
1a004310:	1a005ad0 	.word	0x1a005ad0

1a004314 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a004314:	4b03      	ldr	r3, [pc, #12]	; (1a004324 <Chip_ADC_GetClockIndex+0x10>)
1a004316:	4298      	cmp	r0, r3
1a004318:	d001      	beq.n	1a00431e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00431a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a00431c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00431e:	2004      	movs	r0, #4
1a004320:	4770      	bx	lr
1a004322:	bf00      	nop
1a004324:	400e4000 	.word	0x400e4000

1a004328 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a004328:	b570      	push	{r4, r5, r6, lr}
1a00432a:	460d      	mov	r5, r1
1a00432c:	4614      	mov	r4, r2
1a00432e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a004330:	f7ff fff0 	bl	1a004314 <Chip_ADC_GetClockIndex>
1a004334:	f000 fb18 	bl	1a004968 <Chip_Clock_GetRate>
	if (burstMode) {
1a004338:	b965      	cbnz	r5, 1a004354 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00433a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00433e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a004342:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a004346:	0064      	lsls	r4, r4, #1
1a004348:	fbb0 f0f4 	udiv	r0, r0, r4
1a00434c:	b2c0      	uxtb	r0, r0
1a00434e:	3801      	subs	r0, #1
	return div;
}
1a004350:	b2c0      	uxtb	r0, r0
1a004352:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a004354:	fb04 f406 	mul.w	r4, r4, r6
1a004358:	e7f3      	b.n	1a004342 <getClkDiv+0x1a>
1a00435a:	Address 0x000000001a00435a is out of bounds.


1a00435c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a00435c:	b538      	push	{r3, r4, r5, lr}
1a00435e:	4605      	mov	r5, r0
1a004360:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a004362:	f7ff ffd7 	bl	1a004314 <Chip_ADC_GetClockIndex>
1a004366:	2301      	movs	r3, #1
1a004368:	461a      	mov	r2, r3
1a00436a:	4619      	mov	r1, r3
1a00436c:	f000 faaa 	bl	1a0048c4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a004370:	2100      	movs	r1, #0
1a004372:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a004374:	4a08      	ldr	r2, [pc, #32]	; (1a004398 <Chip_ADC_Init+0x3c>)
1a004376:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a004378:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00437a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00437c:	230b      	movs	r3, #11
1a00437e:	4628      	mov	r0, r5
1a004380:	f7ff ffd2 	bl	1a004328 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a004384:	0200      	lsls	r0, r0, #8
1a004386:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00438a:	7920      	ldrb	r0, [r4, #4]
1a00438c:	0440      	lsls	r0, r0, #17
1a00438e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a004392:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a004394:	6028      	str	r0, [r5, #0]
}
1a004396:	bd38      	pop	{r3, r4, r5, pc}
1a004398:	00061a80 	.word	0x00061a80

1a00439c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00439c:	b570      	push	{r4, r5, r6, lr}
1a00439e:	4605      	mov	r5, r0
1a0043a0:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0043a2:	6804      	ldr	r4, [r0, #0]
1a0043a4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0043a8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0043ac:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0043ae:	790b      	ldrb	r3, [r1, #4]
1a0043b0:	f1c3 030b 	rsb	r3, r3, #11
1a0043b4:	b2db      	uxtb	r3, r3
1a0043b6:	7949      	ldrb	r1, [r1, #5]
1a0043b8:	f7ff ffb6 	bl	1a004328 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0043bc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0043c0:	7930      	ldrb	r0, [r6, #4]
1a0043c2:	0440      	lsls	r0, r0, #17
1a0043c4:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0043c8:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a0043ca:	6028      	str	r0, [r5, #0]
}
1a0043cc:	bd70      	pop	{r4, r5, r6, pc}

1a0043ce <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0043ce:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0043d0:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0043d2:	680a      	ldr	r2, [r1, #0]
1a0043d4:	f7ff ffe2 	bl	1a00439c <Chip_ADC_SetSampleRate>
}
1a0043d8:	bd08      	pop	{r3, pc}
1a0043da:	Address 0x000000001a0043da is out of bounds.


1a0043dc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0043dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0043de:	2069      	movs	r0, #105	; 0x69
1a0043e0:	f000 fac2 	bl	1a004968 <Chip_Clock_GetRate>
1a0043e4:	4b01      	ldr	r3, [pc, #4]	; (1a0043ec <SystemCoreClockUpdate+0x10>)
1a0043e6:	6018      	str	r0, [r3, #0]
}
1a0043e8:	bd08      	pop	{r3, pc}
1a0043ea:	bf00      	nop
1a0043ec:	10002d18 	.word	0x10002d18

1a0043f0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0043f0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0043f2:	680b      	ldr	r3, [r1, #0]
1a0043f4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0043f8:	d002      	beq.n	1a004400 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0043fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0043fe:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a004400:	4607      	mov	r7, r0
1a004402:	2501      	movs	r5, #1
1a004404:	e03b      	b.n	1a00447e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a004406:	694b      	ldr	r3, [r1, #20]
1a004408:	fb03 f302 	mul.w	r3, r3, r2
1a00440c:	fbb3 f3f5 	udiv	r3, r3, r5
1a004410:	e014      	b.n	1a00443c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a004412:	461c      	mov	r4, r3
1a004414:	e020      	b.n	1a004458 <pll_calc_divs+0x68>
		return -val;
1a004416:	f1cc 0c00 	rsb	ip, ip, #0
1a00441a:	e020      	b.n	1a00445e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a00441c:	3201      	adds	r2, #1
1a00441e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a004422:	dc26      	bgt.n	1a004472 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a004424:	680c      	ldr	r4, [r1, #0]
1a004426:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00442a:	d0ec      	beq.n	1a004406 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00442c:	1c73      	adds	r3, r6, #1
1a00442e:	fa02 fc03 	lsl.w	ip, r2, r3
1a004432:	694b      	ldr	r3, [r1, #20]
1a004434:	fb03 f30c 	mul.w	r3, r3, ip
1a004438:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00443c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a00448c <pll_calc_divs+0x9c>
1a004440:	4563      	cmp	r3, ip
1a004442:	d9eb      	bls.n	1a00441c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a004444:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a004490 <pll_calc_divs+0xa0>
1a004448:	4563      	cmp	r3, ip
1a00444a:	d812      	bhi.n	1a004472 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a00444c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a004450:	d1df      	bne.n	1a004412 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a004452:	1c74      	adds	r4, r6, #1
1a004454:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a004458:	ebb0 0c04 	subs.w	ip, r0, r4
1a00445c:	d4db      	bmi.n	1a004416 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00445e:	4567      	cmp	r7, ip
1a004460:	d9dc      	bls.n	1a00441c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a004462:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a004464:	1c77      	adds	r7, r6, #1
1a004466:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a004468:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00446a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00446c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00446e:	4667      	mov	r7, ip
1a004470:	e7d4      	b.n	1a00441c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a004472:	3601      	adds	r6, #1
1a004474:	2e03      	cmp	r6, #3
1a004476:	dc01      	bgt.n	1a00447c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a004478:	2201      	movs	r2, #1
1a00447a:	e7d0      	b.n	1a00441e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a00447c:	3501      	adds	r5, #1
1a00447e:	2d04      	cmp	r5, #4
1a004480:	dc01      	bgt.n	1a004486 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a004482:	2600      	movs	r6, #0
1a004484:	e7f6      	b.n	1a004474 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a004486:	bcf0      	pop	{r4, r5, r6, r7}
1a004488:	4770      	bx	lr
1a00448a:	bf00      	nop
1a00448c:	094c5eff 	.word	0x094c5eff
1a004490:	1312d000 	.word	0x1312d000

1a004494 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a004494:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004496:	b099      	sub	sp, #100	; 0x64
1a004498:	4605      	mov	r5, r0
1a00449a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00449c:	225c      	movs	r2, #92	; 0x5c
1a00449e:	2100      	movs	r1, #0
1a0044a0:	a801      	add	r0, sp, #4
1a0044a2:	f001 f974 	bl	1a00578e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0044a6:	2380      	movs	r3, #128	; 0x80
1a0044a8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0044aa:	6963      	ldr	r3, [r4, #20]
1a0044ac:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0044ae:	7923      	ldrb	r3, [r4, #4]
1a0044b0:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0044b4:	4669      	mov	r1, sp
1a0044b6:	4628      	mov	r0, r5
1a0044b8:	f7ff ff9a 	bl	1a0043f0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0044bc:	9b06      	ldr	r3, [sp, #24]
1a0044be:	42ab      	cmp	r3, r5
1a0044c0:	d027      	beq.n	1a004512 <pll_get_frac+0x7e>
	if (val < 0)
1a0044c2:	1aeb      	subs	r3, r5, r3
1a0044c4:	d42e      	bmi.n	1a004524 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0044c6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0044c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0044ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0044ce:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0044d0:	6963      	ldr	r3, [r4, #20]
1a0044d2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0044d4:	7923      	ldrb	r3, [r4, #4]
1a0044d6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0044da:	a910      	add	r1, sp, #64	; 0x40
1a0044dc:	4628      	mov	r0, r5
1a0044de:	f7ff ff87 	bl	1a0043f0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0044e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0044e4:	42ab      	cmp	r3, r5
1a0044e6:	d01f      	beq.n	1a004528 <pll_get_frac+0x94>
	if (val < 0)
1a0044e8:	1aeb      	subs	r3, r5, r3
1a0044ea:	d425      	bmi.n	1a004538 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0044ec:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0044ee:	4b2b      	ldr	r3, [pc, #172]	; (1a00459c <pll_get_frac+0x108>)
1a0044f0:	429d      	cmp	r5, r3
1a0044f2:	d923      	bls.n	1a00453c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0044f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0044f6:	1aed      	subs	r5, r5, r3
1a0044f8:	d433      	bmi.n	1a004562 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0044fa:	42ae      	cmp	r6, r5
1a0044fc:	dc3b      	bgt.n	1a004576 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0044fe:	42be      	cmp	r6, r7
1a004500:	dc31      	bgt.n	1a004566 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a004502:	466d      	mov	r5, sp
1a004504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004508:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00450c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a004510:	e006      	b.n	1a004520 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a004512:	466d      	mov	r5, sp
1a004514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004518:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00451c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a004520:	b019      	add	sp, #100	; 0x64
1a004522:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a004524:	425b      	negs	r3, r3
1a004526:	e7ce      	b.n	1a0044c6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a004528:	ad10      	add	r5, sp, #64	; 0x40
1a00452a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00452c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00452e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a004536:	e7f3      	b.n	1a004520 <pll_get_frac+0x8c>
		return -val;
1a004538:	425b      	negs	r3, r3
1a00453a:	e7d7      	b.n	1a0044ec <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a00453c:	2340      	movs	r3, #64	; 0x40
1a00453e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a004540:	6963      	ldr	r3, [r4, #20]
1a004542:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a004544:	a908      	add	r1, sp, #32
1a004546:	4628      	mov	r0, r5
1a004548:	f7ff ff52 	bl	1a0043f0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00454c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00454e:	42ab      	cmp	r3, r5
1a004550:	d1d0      	bne.n	1a0044f4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a004552:	ad08      	add	r5, sp, #32
1a004554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004558:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00455c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a004560:	e7de      	b.n	1a004520 <pll_get_frac+0x8c>
		return -val;
1a004562:	426d      	negs	r5, r5
1a004564:	e7c9      	b.n	1a0044fa <pll_get_frac+0x66>
			*ppll = pll[2];
1a004566:	ad10      	add	r5, sp, #64	; 0x40
1a004568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00456a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00456c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a004574:	e7d4      	b.n	1a004520 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a004576:	42af      	cmp	r7, r5
1a004578:	db07      	blt.n	1a00458a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00457a:	ad08      	add	r5, sp, #32
1a00457c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00457e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004580:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a004588:	e7ca      	b.n	1a004520 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00458a:	ad10      	add	r5, sp, #64	; 0x40
1a00458c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00458e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004590:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a004598:	e7c2      	b.n	1a004520 <pll_get_frac+0x8c>
1a00459a:	bf00      	nop
1a00459c:	068e7780 	.word	0x068e7780

1a0045a0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0045a0:	b430      	push	{r4, r5}
1a0045a2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0045a4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0045a6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0045a8:	e000      	b.n	1a0045ac <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0045aa:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0045ac:	281c      	cmp	r0, #28
1a0045ae:	d118      	bne.n	1a0045e2 <Chip_Clock_FindBaseClock+0x42>
1a0045b0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0045b4:	0051      	lsls	r1, r2, #1
1a0045b6:	4a0c      	ldr	r2, [pc, #48]	; (1a0045e8 <Chip_Clock_FindBaseClock+0x48>)
1a0045b8:	440a      	add	r2, r1
1a0045ba:	7914      	ldrb	r4, [r2, #4]
1a0045bc:	4284      	cmp	r4, r0
1a0045be:	d010      	beq.n	1a0045e2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0045c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0045c4:	004a      	lsls	r2, r1, #1
1a0045c6:	4908      	ldr	r1, [pc, #32]	; (1a0045e8 <Chip_Clock_FindBaseClock+0x48>)
1a0045c8:	5a8a      	ldrh	r2, [r1, r2]
1a0045ca:	42aa      	cmp	r2, r5
1a0045cc:	d8ed      	bhi.n	1a0045aa <Chip_Clock_FindBaseClock+0xa>
1a0045ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0045d2:	0051      	lsls	r1, r2, #1
1a0045d4:	4a04      	ldr	r2, [pc, #16]	; (1a0045e8 <Chip_Clock_FindBaseClock+0x48>)
1a0045d6:	440a      	add	r2, r1
1a0045d8:	8852      	ldrh	r2, [r2, #2]
1a0045da:	42aa      	cmp	r2, r5
1a0045dc:	d3e5      	bcc.n	1a0045aa <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0045de:	4620      	mov	r0, r4
1a0045e0:	e7e4      	b.n	1a0045ac <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0045e2:	bc30      	pop	{r4, r5}
1a0045e4:	4770      	bx	lr
1a0045e6:	bf00      	nop
1a0045e8:	1a005aec 	.word	0x1a005aec

1a0045ec <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0045ec:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0045ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0045f2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0045f4:	4a0d      	ldr	r2, [pc, #52]	; (1a00462c <Chip_Clock_EnableCrystal+0x40>)
1a0045f6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0045f8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0045fc:	6992      	ldr	r2, [r2, #24]
1a0045fe:	428a      	cmp	r2, r1
1a004600:	d001      	beq.n	1a004606 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a004602:	4a0a      	ldr	r2, [pc, #40]	; (1a00462c <Chip_Clock_EnableCrystal+0x40>)
1a004604:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a004606:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00460a:	4a09      	ldr	r2, [pc, #36]	; (1a004630 <Chip_Clock_EnableCrystal+0x44>)
1a00460c:	6811      	ldr	r1, [r2, #0]
1a00460e:	4a09      	ldr	r2, [pc, #36]	; (1a004634 <Chip_Clock_EnableCrystal+0x48>)
1a004610:	4291      	cmp	r1, r2
1a004612:	d901      	bls.n	1a004618 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a004614:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a004618:	4a04      	ldr	r2, [pc, #16]	; (1a00462c <Chip_Clock_EnableCrystal+0x40>)
1a00461a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a00461c:	9b01      	ldr	r3, [sp, #4]
1a00461e:	1e5a      	subs	r2, r3, #1
1a004620:	9201      	str	r2, [sp, #4]
1a004622:	2b00      	cmp	r3, #0
1a004624:	d1fa      	bne.n	1a00461c <Chip_Clock_EnableCrystal+0x30>
}
1a004626:	b002      	add	sp, #8
1a004628:	4770      	bx	lr
1a00462a:	bf00      	nop
1a00462c:	40050000 	.word	0x40050000
1a004630:	1a005a28 	.word	0x1a005a28
1a004634:	01312cff 	.word	0x01312cff

1a004638 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a004638:	3012      	adds	r0, #18
1a00463a:	4b05      	ldr	r3, [pc, #20]	; (1a004650 <Chip_Clock_GetDividerSource+0x18>)
1a00463c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a004640:	f010 0f01 	tst.w	r0, #1
1a004644:	d102      	bne.n	1a00464c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a004646:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00464a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00464c:	2011      	movs	r0, #17
}
1a00464e:	4770      	bx	lr
1a004650:	40050000 	.word	0x40050000

1a004654 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a004654:	f100 0212 	add.w	r2, r0, #18
1a004658:	4b03      	ldr	r3, [pc, #12]	; (1a004668 <Chip_Clock_GetDividerDivisor+0x14>)
1a00465a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00465e:	4b03      	ldr	r3, [pc, #12]	; (1a00466c <Chip_Clock_GetDividerDivisor+0x18>)
1a004660:	5c18      	ldrb	r0, [r3, r0]
}
1a004662:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a004666:	4770      	bx	lr
1a004668:	40050000 	.word	0x40050000
1a00466c:	1a005ae4 	.word	0x1a005ae4

1a004670 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a004670:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a004672:	2810      	cmp	r0, #16
1a004674:	d80a      	bhi.n	1a00468c <Chip_Clock_GetClockInputHz+0x1c>
1a004676:	e8df f000 	tbb	[pc, r0]
1a00467a:	0b42      	.short	0x0b42
1a00467c:	091f160d 	.word	0x091f160d
1a004680:	2b282522 	.word	0x2b282522
1a004684:	322e0909 	.word	0x322e0909
1a004688:	3a36      	.short	0x3a36
1a00468a:	3e          	.byte	0x3e
1a00468b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00468c:	2000      	movs	r0, #0
1a00468e:	e038      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a004690:	481e      	ldr	r0, [pc, #120]	; (1a00470c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a004692:	e036      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a004694:	4b1e      	ldr	r3, [pc, #120]	; (1a004710 <Chip_Clock_GetClockInputHz+0xa0>)
1a004696:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00469a:	f003 0307 	and.w	r3, r3, #7
1a00469e:	2b04      	cmp	r3, #4
1a0046a0:	d130      	bne.n	1a004704 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0046a2:	2000      	movs	r0, #0
1a0046a4:	e02d      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0046a6:	4b1a      	ldr	r3, [pc, #104]	; (1a004710 <Chip_Clock_GetClockInputHz+0xa0>)
1a0046a8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0046ac:	f003 0307 	and.w	r3, r3, #7
1a0046b0:	2b04      	cmp	r3, #4
1a0046b2:	d029      	beq.n	1a004708 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0046b4:	4817      	ldr	r0, [pc, #92]	; (1a004714 <Chip_Clock_GetClockInputHz+0xa4>)
1a0046b6:	e024      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0046b8:	4b17      	ldr	r3, [pc, #92]	; (1a004718 <Chip_Clock_GetClockInputHz+0xa8>)
1a0046ba:	6818      	ldr	r0, [r3, #0]
		break;
1a0046bc:	e021      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0046be:	4b17      	ldr	r3, [pc, #92]	; (1a00471c <Chip_Clock_GetClockInputHz+0xac>)
1a0046c0:	6818      	ldr	r0, [r3, #0]
		break;
1a0046c2:	e01e      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0046c4:	4b16      	ldr	r3, [pc, #88]	; (1a004720 <Chip_Clock_GetClockInputHz+0xb0>)
1a0046c6:	6818      	ldr	r0, [r3, #0]
		break;
1a0046c8:	e01b      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0046ca:	4b15      	ldr	r3, [pc, #84]	; (1a004720 <Chip_Clock_GetClockInputHz+0xb0>)
1a0046cc:	6858      	ldr	r0, [r3, #4]
		break;
1a0046ce:	e018      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0046d0:	f000 f86a 	bl	1a0047a8 <Chip_Clock_GetMainPLLHz>
		break;
1a0046d4:	e015      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0046d6:	2100      	movs	r1, #0
1a0046d8:	f000 f89c 	bl	1a004814 <Chip_Clock_GetDivRate>
		break;
1a0046dc:	e011      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0046de:	2101      	movs	r1, #1
1a0046e0:	f000 f898 	bl	1a004814 <Chip_Clock_GetDivRate>
		break;
1a0046e4:	e00d      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0046e6:	2102      	movs	r1, #2
1a0046e8:	f000 f894 	bl	1a004814 <Chip_Clock_GetDivRate>
		break;
1a0046ec:	e009      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0046ee:	2103      	movs	r1, #3
1a0046f0:	f000 f890 	bl	1a004814 <Chip_Clock_GetDivRate>
		break;
1a0046f4:	e005      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0046f6:	2104      	movs	r1, #4
1a0046f8:	f000 f88c 	bl	1a004814 <Chip_Clock_GetDivRate>
		break;
1a0046fc:	e001      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0046fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a004702:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a004704:	4803      	ldr	r0, [pc, #12]	; (1a004714 <Chip_Clock_GetClockInputHz+0xa4>)
1a004706:	e7fc      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a004708:	4806      	ldr	r0, [pc, #24]	; (1a004724 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00470a:	e7fa      	b.n	1a004702 <Chip_Clock_GetClockInputHz+0x92>
1a00470c:	00b71b00 	.word	0x00b71b00
1a004710:	40043000 	.word	0x40043000
1a004714:	017d7840 	.word	0x017d7840
1a004718:	1a0059fc 	.word	0x1a0059fc
1a00471c:	1a005a28 	.word	0x1a005a28
1a004720:	10002cb4 	.word	0x10002cb4
1a004724:	02faf080 	.word	0x02faf080

1a004728 <Chip_Clock_CalcMainPLLValue>:
{
1a004728:	b538      	push	{r3, r4, r5, lr}
1a00472a:	4605      	mov	r5, r0
1a00472c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00472e:	7908      	ldrb	r0, [r1, #4]
1a004730:	f7ff ff9e 	bl	1a004670 <Chip_Clock_GetClockInputHz>
1a004734:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a004736:	4b19      	ldr	r3, [pc, #100]	; (1a00479c <Chip_Clock_CalcMainPLLValue+0x74>)
1a004738:	442b      	add	r3, r5
1a00473a:	4a19      	ldr	r2, [pc, #100]	; (1a0047a0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00473c:	4293      	cmp	r3, r2
1a00473e:	d821      	bhi.n	1a004784 <Chip_Clock_CalcMainPLLValue+0x5c>
1a004740:	b318      	cbz	r0, 1a00478a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a004742:	2380      	movs	r3, #128	; 0x80
1a004744:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a004746:	2300      	movs	r3, #0
1a004748:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00474a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00474c:	fbb5 f3f0 	udiv	r3, r5, r0
1a004750:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a004752:	4a14      	ldr	r2, [pc, #80]	; (1a0047a4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a004754:	4295      	cmp	r5, r2
1a004756:	d903      	bls.n	1a004760 <Chip_Clock_CalcMainPLLValue+0x38>
1a004758:	fb03 f000 	mul.w	r0, r3, r0
1a00475c:	42a8      	cmp	r0, r5
1a00475e:	d007      	beq.n	1a004770 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a004760:	4621      	mov	r1, r4
1a004762:	4628      	mov	r0, r5
1a004764:	f7ff fe96 	bl	1a004494 <pll_get_frac>
		if (!ppll->nsel) {
1a004768:	68a3      	ldr	r3, [r4, #8]
1a00476a:	b18b      	cbz	r3, 1a004790 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a00476c:	3b01      	subs	r3, #1
1a00476e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a004770:	6923      	ldr	r3, [r4, #16]
1a004772:	b183      	cbz	r3, 1a004796 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a004774:	68e2      	ldr	r2, [r4, #12]
1a004776:	b10a      	cbz	r2, 1a00477c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a004778:	3a01      	subs	r2, #1
1a00477a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00477c:	3b01      	subs	r3, #1
1a00477e:	6123      	str	r3, [r4, #16]
	return 0;
1a004780:	2000      	movs	r0, #0
}
1a004782:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a004784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004788:	e7fb      	b.n	1a004782 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00478a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00478e:	e7f8      	b.n	1a004782 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a004790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004794:	e7f5      	b.n	1a004782 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a004796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00479a:	e7f2      	b.n	1a004782 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00479c:	ff6b3a10 	.word	0xff6b3a10
1a0047a0:	0b940510 	.word	0x0b940510
1a0047a4:	094c5eff 	.word	0x094c5eff

1a0047a8 <Chip_Clock_GetMainPLLHz>:
{
1a0047a8:	b530      	push	{r4, r5, lr}
1a0047aa:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0047ac:	4d17      	ldr	r5, [pc, #92]	; (1a00480c <Chip_Clock_GetMainPLLHz+0x64>)
1a0047ae:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0047b0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0047b4:	f7ff ff5c 	bl	1a004670 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0047b8:	4b15      	ldr	r3, [pc, #84]	; (1a004810 <Chip_Clock_GetMainPLLHz+0x68>)
1a0047ba:	681b      	ldr	r3, [r3, #0]
1a0047bc:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0047be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0047c0:	f013 0f01 	tst.w	r3, #1
1a0047c4:	d01f      	beq.n	1a004806 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0047c6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0047ca:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0047ce:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0047d2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0047d6:	3301      	adds	r3, #1
	n = nsel + 1;
1a0047d8:	3201      	adds	r2, #1
	p = ptab[psel];
1a0047da:	f10d 0c08 	add.w	ip, sp, #8
1a0047de:	4461      	add	r1, ip
1a0047e0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0047e4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0047e8:	d108      	bne.n	1a0047fc <Chip_Clock_GetMainPLLHz+0x54>
1a0047ea:	b93d      	cbnz	r5, 1a0047fc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0047ec:	0049      	lsls	r1, r1, #1
1a0047ee:	fbb3 f3f1 	udiv	r3, r3, r1
1a0047f2:	fbb0 f0f2 	udiv	r0, r0, r2
1a0047f6:	fb00 f003 	mul.w	r0, r0, r3
1a0047fa:	e005      	b.n	1a004808 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0047fc:	fbb0 f0f2 	udiv	r0, r0, r2
1a004800:	fb03 f000 	mul.w	r0, r3, r0
1a004804:	e000      	b.n	1a004808 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a004806:	2000      	movs	r0, #0
}
1a004808:	b003      	add	sp, #12
1a00480a:	bd30      	pop	{r4, r5, pc}
1a00480c:	40050000 	.word	0x40050000
1a004810:	1a005ae0 	.word	0x1a005ae0

1a004814 <Chip_Clock_GetDivRate>:
{
1a004814:	b538      	push	{r3, r4, r5, lr}
1a004816:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a004818:	4608      	mov	r0, r1
1a00481a:	f7ff ff0d 	bl	1a004638 <Chip_Clock_GetDividerSource>
1a00481e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a004820:	4620      	mov	r0, r4
1a004822:	f7ff ff17 	bl	1a004654 <Chip_Clock_GetDividerDivisor>
1a004826:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a004828:	4628      	mov	r0, r5
1a00482a:	f7ff ff21 	bl	1a004670 <Chip_Clock_GetClockInputHz>
1a00482e:	3401      	adds	r4, #1
}
1a004830:	fbb0 f0f4 	udiv	r0, r0, r4
1a004834:	bd38      	pop	{r3, r4, r5, pc}
1a004836:	Address 0x000000001a004836 is out of bounds.


1a004838 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a004838:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00483a:	f100 0416 	add.w	r4, r0, #22
1a00483e:	00a4      	lsls	r4, r4, #2
1a004840:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a004844:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a004848:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00484a:	281b      	cmp	r0, #27
1a00484c:	d813      	bhi.n	1a004876 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00484e:	2911      	cmp	r1, #17
1a004850:	d01a      	beq.n	1a004888 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a004852:	4d0e      	ldr	r5, [pc, #56]	; (1a00488c <Chip_Clock_SetBaseClock+0x54>)
1a004854:	4025      	ands	r5, r4

			if (autoblocken) {
1a004856:	b10a      	cbz	r2, 1a00485c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a004858:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a00485c:	b10b      	cbz	r3, 1a004862 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00485e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a004862:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a004866:	3016      	adds	r0, #22
1a004868:	0080      	lsls	r0, r0, #2
1a00486a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00486e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a004872:	6045      	str	r5, [r0, #4]
1a004874:	e008      	b.n	1a004888 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a004876:	f044 0401 	orr.w	r4, r4, #1
1a00487a:	3016      	adds	r0, #22
1a00487c:	0080      	lsls	r0, r0, #2
1a00487e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a004882:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a004886:	6044      	str	r4, [r0, #4]
	}
}
1a004888:	bc30      	pop	{r4, r5}
1a00488a:	4770      	bx	lr
1a00488c:	e0fff7fe 	.word	0xe0fff7fe

1a004890 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a004890:	281b      	cmp	r0, #27
1a004892:	d80c      	bhi.n	1a0048ae <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a004894:	3016      	adds	r0, #22
1a004896:	0080      	lsls	r0, r0, #2
1a004898:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00489c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0048a0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0048a2:	f010 0f01 	tst.w	r0, #1
1a0048a6:	d104      	bne.n	1a0048b2 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0048a8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0048ac:	4770      	bx	lr
		return CLKINPUT_PD;
1a0048ae:	2011      	movs	r0, #17
1a0048b0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0048b2:	2011      	movs	r0, #17
}
1a0048b4:	4770      	bx	lr

1a0048b6 <Chip_Clock_GetBaseClocktHz>:
{
1a0048b6:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0048b8:	f7ff ffea 	bl	1a004890 <Chip_Clock_GetBaseClock>
1a0048bc:	f7ff fed8 	bl	1a004670 <Chip_Clock_GetClockInputHz>
}
1a0048c0:	bd08      	pop	{r3, pc}
1a0048c2:	Address 0x000000001a0048c2 is out of bounds.


1a0048c4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0048c4:	b969      	cbnz	r1, 1a0048e2 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0048c6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0048c8:	b10a      	cbz	r2, 1a0048ce <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0048ca:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0048ce:	2b02      	cmp	r3, #2
1a0048d0:	d009      	beq.n	1a0048e6 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0048d2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0048d6:	d209      	bcs.n	1a0048ec <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0048d8:	3020      	adds	r0, #32
1a0048da:	4b07      	ldr	r3, [pc, #28]	; (1a0048f8 <Chip_Clock_EnableOpts+0x34>)
1a0048dc:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0048e0:	4770      	bx	lr
		reg |= (1 << 1);
1a0048e2:	2103      	movs	r1, #3
1a0048e4:	e7f0      	b.n	1a0048c8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0048e6:	f041 0120 	orr.w	r1, r1, #32
1a0048ea:	e7f2      	b.n	1a0048d2 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0048ec:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0048f0:	4b02      	ldr	r3, [pc, #8]	; (1a0048fc <Chip_Clock_EnableOpts+0x38>)
1a0048f2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0048f6:	4770      	bx	lr
1a0048f8:	40051000 	.word	0x40051000
1a0048fc:	40052000 	.word	0x40052000

1a004900 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a004900:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004904:	d208      	bcs.n	1a004918 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a004906:	4a09      	ldr	r2, [pc, #36]	; (1a00492c <Chip_Clock_Enable+0x2c>)
1a004908:	3020      	adds	r0, #32
1a00490a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00490e:	f043 0301 	orr.w	r3, r3, #1
1a004912:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a004916:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a004918:	4a05      	ldr	r2, [pc, #20]	; (1a004930 <Chip_Clock_Enable+0x30>)
1a00491a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00491e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a004922:	f043 0301 	orr.w	r3, r3, #1
1a004926:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00492a:	4770      	bx	lr
1a00492c:	40051000 	.word	0x40051000
1a004930:	40052000 	.word	0x40052000

1a004934 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a004934:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004938:	d208      	bcs.n	1a00494c <Chip_Clock_Disable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a00493a:	4a09      	ldr	r2, [pc, #36]	; (1a004960 <Chip_Clock_Disable+0x2c>)
1a00493c:	3020      	adds	r0, #32
1a00493e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a004942:	f023 0301 	bic.w	r3, r3, #1
1a004946:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00494a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a00494c:	4a05      	ldr	r2, [pc, #20]	; (1a004964 <Chip_Clock_Disable+0x30>)
1a00494e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a004952:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a004956:	f023 0301 	bic.w	r3, r3, #1
1a00495a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00495e:	4770      	bx	lr
1a004960:	40051000 	.word	0x40051000
1a004964:	40052000 	.word	0x40052000

1a004968 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a004968:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00496a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00496e:	d309      	bcc.n	1a004984 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a004970:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a004974:	4a0d      	ldr	r2, [pc, #52]	; (1a0049ac <Chip_Clock_GetRate+0x44>)
1a004976:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00497a:	f014 0f01 	tst.w	r4, #1
1a00497e:	d107      	bne.n	1a004990 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a004980:	2000      	movs	r0, #0
	}

	return rate;
}
1a004982:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a004984:	f100 0320 	add.w	r3, r0, #32
1a004988:	4a09      	ldr	r2, [pc, #36]	; (1a0049b0 <Chip_Clock_GetRate+0x48>)
1a00498a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00498e:	e7f4      	b.n	1a00497a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a004990:	f7ff fe06 	bl	1a0045a0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a004994:	f7ff ff8f 	bl	1a0048b6 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a004998:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00499c:	d103      	bne.n	1a0049a6 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00499e:	2301      	movs	r3, #1
		rate = rate / div;
1a0049a0:	fbb0 f0f3 	udiv	r0, r0, r3
1a0049a4:	e7ed      	b.n	1a004982 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0049a6:	2302      	movs	r3, #2
1a0049a8:	e7fa      	b.n	1a0049a0 <Chip_Clock_GetRate+0x38>
1a0049aa:	bf00      	nop
1a0049ac:	40052000 	.word	0x40052000
1a0049b0:	40051000 	.word	0x40051000

1a0049b4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0049b4:	b570      	push	{r4, r5, r6, lr}
1a0049b6:	b08a      	sub	sp, #40	; 0x28
1a0049b8:	4605      	mov	r5, r0
1a0049ba:	460e      	mov	r6, r1
1a0049bc:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0049be:	f242 7310 	movw	r3, #10000	; 0x2710
1a0049c2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0049c4:	2806      	cmp	r0, #6
1a0049c6:	d018      	beq.n	1a0049fa <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0049c8:	2300      	movs	r3, #0
1a0049ca:	2201      	movs	r2, #1
1a0049cc:	4629      	mov	r1, r5
1a0049ce:	2004      	movs	r0, #4
1a0049d0:	f7ff ff32 	bl	1a004838 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0049d4:	4a49      	ldr	r2, [pc, #292]	; (1a004afc <Chip_SetupCoreClock+0x148>)
1a0049d6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0049d8:	f043 0301 	orr.w	r3, r3, #1
1a0049dc:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0049de:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0049e2:	a901      	add	r1, sp, #4
1a0049e4:	4630      	mov	r0, r6
1a0049e6:	f7ff fe9f 	bl	1a004728 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0049ea:	4b45      	ldr	r3, [pc, #276]	; (1a004b00 <Chip_SetupCoreClock+0x14c>)
1a0049ec:	429e      	cmp	r6, r3
1a0049ee:	d916      	bls.n	1a004a1e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0049f0:	9b01      	ldr	r3, [sp, #4]
1a0049f2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0049f6:	d003      	beq.n	1a004a00 <Chip_SetupCoreClock+0x4c>
1a0049f8:	e7fe      	b.n	1a0049f8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0049fa:	f7ff fdf7 	bl	1a0045ec <Chip_Clock_EnableCrystal>
1a0049fe:	e7e3      	b.n	1a0049c8 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a004a00:	f013 0f80 	tst.w	r3, #128	; 0x80
1a004a04:	d005      	beq.n	1a004a12 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a004a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a004a0a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a004a0c:	2500      	movs	r5, #0
			direct = 1;
1a004a0e:	2601      	movs	r6, #1
1a004a10:	e007      	b.n	1a004a22 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a004a12:	9b04      	ldr	r3, [sp, #16]
1a004a14:	3301      	adds	r3, #1
1a004a16:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a004a18:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a004a1a:	2600      	movs	r6, #0
1a004a1c:	e001      	b.n	1a004a22 <Chip_SetupCoreClock+0x6e>
1a004a1e:	2500      	movs	r5, #0
1a004a20:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a004a22:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a004a26:	9b01      	ldr	r3, [sp, #4]
1a004a28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a004a2c:	9a05      	ldr	r2, [sp, #20]
1a004a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a004a32:	9a03      	ldr	r2, [sp, #12]
1a004a34:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a004a38:	9a04      	ldr	r2, [sp, #16]
1a004a3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004a3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004a42:	4a2e      	ldr	r2, [pc, #184]	; (1a004afc <Chip_SetupCoreClock+0x148>)
1a004a44:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a004a46:	4b2d      	ldr	r3, [pc, #180]	; (1a004afc <Chip_SetupCoreClock+0x148>)
1a004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a004a4a:	f013 0f01 	tst.w	r3, #1
1a004a4e:	d0fa      	beq.n	1a004a46 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a004a50:	2300      	movs	r3, #0
1a004a52:	2201      	movs	r2, #1
1a004a54:	2109      	movs	r1, #9
1a004a56:	2004      	movs	r0, #4
1a004a58:	f7ff feee 	bl	1a004838 <Chip_Clock_SetBaseClock>

	if (direct) {
1a004a5c:	b1fe      	cbz	r6, 1a004a9e <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a004a5e:	f242 7310 	movw	r3, #10000	; 0x2710
1a004a62:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a004a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004a66:	1e5a      	subs	r2, r3, #1
1a004a68:	9209      	str	r2, [sp, #36]	; 0x24
1a004a6a:	2b00      	cmp	r3, #0
1a004a6c:	d1fa      	bne.n	1a004a64 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a004a6e:	9b01      	ldr	r3, [sp, #4]
1a004a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004a74:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a004a76:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a004a7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a004a7e:	9a05      	ldr	r2, [sp, #20]
1a004a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a004a84:	9a03      	ldr	r2, [sp, #12]
1a004a86:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a004a8a:	9a04      	ldr	r2, [sp, #16]
1a004a8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004a94:	4a19      	ldr	r2, [pc, #100]	; (1a004afc <Chip_SetupCoreClock+0x148>)
1a004a96:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a004a98:	b36c      	cbz	r4, 1a004af6 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a004a9a:	2400      	movs	r4, #0
1a004a9c:	e029      	b.n	1a004af2 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a004a9e:	2d00      	cmp	r5, #0
1a004aa0:	d0fa      	beq.n	1a004a98 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a004aa2:	f242 7310 	movw	r3, #10000	; 0x2710
1a004aa6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a004aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004aaa:	1e5a      	subs	r2, r3, #1
1a004aac:	9209      	str	r2, [sp, #36]	; 0x24
1a004aae:	2b00      	cmp	r3, #0
1a004ab0:	d1fa      	bne.n	1a004aa8 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a004ab2:	9b04      	ldr	r3, [sp, #16]
1a004ab4:	1e5a      	subs	r2, r3, #1
1a004ab6:	9204      	str	r2, [sp, #16]
1a004ab8:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a004abc:	9b01      	ldr	r3, [sp, #4]
1a004abe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a004ac2:	9905      	ldr	r1, [sp, #20]
1a004ac4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004ac8:	9903      	ldr	r1, [sp, #12]
1a004aca:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a004ace:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004ad2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004ad6:	4a09      	ldr	r2, [pc, #36]	; (1a004afc <Chip_SetupCoreClock+0x148>)
1a004ad8:	6453      	str	r3, [r2, #68]	; 0x44
1a004ada:	e7dd      	b.n	1a004a98 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a004adc:	4809      	ldr	r0, [pc, #36]	; (1a004b04 <Chip_SetupCoreClock+0x150>)
1a004ade:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a004ae2:	78cb      	ldrb	r3, [r1, #3]
1a004ae4:	788a      	ldrb	r2, [r1, #2]
1a004ae6:	7849      	ldrb	r1, [r1, #1]
1a004ae8:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a004aec:	f7ff fea4 	bl	1a004838 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a004af0:	3401      	adds	r4, #1
1a004af2:	2c11      	cmp	r4, #17
1a004af4:	d9f2      	bls.n	1a004adc <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a004af6:	b00a      	add	sp, #40	; 0x28
1a004af8:	bd70      	pop	{r4, r5, r6, pc}
1a004afa:	bf00      	nop
1a004afc:	40050000 	.word	0x40050000
1a004b00:	068e7780 	.word	0x068e7780
1a004b04:	1a005b58 	.word	0x1a005b58

1a004b08 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a004b08:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a004b0a:	6843      	ldr	r3, [r0, #4]
1a004b0c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004b10:	2b30      	cmp	r3, #48	; 0x30
1a004b12:	d04a      	beq.n	1a004baa <Chip_I2CM_XferHandler+0xa2>
1a004b14:	d90f      	bls.n	1a004b36 <Chip_I2CM_XferHandler+0x2e>
1a004b16:	2b48      	cmp	r3, #72	; 0x48
1a004b18:	d06a      	beq.n	1a004bf0 <Chip_I2CM_XferHandler+0xe8>
1a004b1a:	d83a      	bhi.n	1a004b92 <Chip_I2CM_XferHandler+0x8a>
1a004b1c:	2b38      	cmp	r3, #56	; 0x38
1a004b1e:	d06b      	beq.n	1a004bf8 <Chip_I2CM_XferHandler+0xf0>
1a004b20:	2b40      	cmp	r3, #64	; 0x40
1a004b22:	d13e      	bne.n	1a004ba2 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a004b24:	88ca      	ldrh	r2, [r1, #6]
1a004b26:	2a01      	cmp	r2, #1
1a004b28:	d95a      	bls.n	1a004be0 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a004b2a:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a004b2c:	b9b2      	cbnz	r2, 1a004b5c <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a004b2e:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a004b30:	f023 0310 	bic.w	r3, r3, #16
1a004b34:	e012      	b.n	1a004b5c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004b36:	2b10      	cmp	r3, #16
1a004b38:	d007      	beq.n	1a004b4a <Chip_I2CM_XferHandler+0x42>
1a004b3a:	d81c      	bhi.n	1a004b76 <Chip_I2CM_XferHandler+0x6e>
1a004b3c:	b91b      	cbnz	r3, 1a004b46 <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a004b3e:	2303      	movs	r3, #3
1a004b40:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a004b42:	232c      	movs	r3, #44	; 0x2c
        break;
1a004b44:	e00a      	b.n	1a004b5c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004b46:	2b08      	cmp	r3, #8
1a004b48:	d12b      	bne.n	1a004ba2 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a004b4a:	780a      	ldrb	r2, [r1, #0]
1a004b4c:	888b      	ldrh	r3, [r1, #4]
1a004b4e:	fab3 f383 	clz	r3, r3
1a004b52:	095b      	lsrs	r3, r3, #5
1a004b54:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a004b58:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a004b5a:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a004b5c:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a004b60:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a004b62:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a004b66:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a004b68:	8848      	ldrh	r0, [r1, #2]
1a004b6a:	38ff      	subs	r0, #255	; 0xff
1a004b6c:	bf18      	it	ne
1a004b6e:	2001      	movne	r0, #1
}
1a004b70:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004b74:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004b76:	2b20      	cmp	r3, #32
1a004b78:	d017      	beq.n	1a004baa <Chip_I2CM_XferHandler+0xa2>
1a004b7a:	2b28      	cmp	r3, #40	; 0x28
1a004b7c:	d001      	beq.n	1a004b82 <Chip_I2CM_XferHandler+0x7a>
1a004b7e:	2b18      	cmp	r3, #24
1a004b80:	d10f      	bne.n	1a004ba2 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a004b82:	888b      	ldrh	r3, [r1, #4]
1a004b84:	b9cb      	cbnz	r3, 1a004bba <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a004b86:	88cb      	ldrh	r3, [r1, #6]
1a004b88:	2b00      	cmp	r3, #0
1a004b8a:	d139      	bne.n	1a004c00 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a004b8c:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a004b8e:	232c      	movs	r3, #44	; 0x2c
1a004b90:	e7e4      	b.n	1a004b5c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004b92:	2b58      	cmp	r3, #88	; 0x58
1a004b94:	d01b      	beq.n	1a004bce <Chip_I2CM_XferHandler+0xc6>
1a004b96:	2bf8      	cmp	r3, #248	; 0xf8
1a004b98:	d101      	bne.n	1a004b9e <Chip_I2CM_XferHandler+0x96>
      return 0;
1a004b9a:	2000      	movs	r0, #0
1a004b9c:	e7e8      	b.n	1a004b70 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a004b9e:	2b50      	cmp	r3, #80	; 0x50
1a004ba0:	d015      	beq.n	1a004bce <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a004ba2:	2301      	movs	r3, #1
1a004ba4:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a004ba6:	232c      	movs	r3, #44	; 0x2c
        break;
1a004ba8:	e7d8      	b.n	1a004b5c <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a004baa:	784b      	ldrb	r3, [r1, #1]
1a004bac:	f013 0f01 	tst.w	r3, #1
1a004bb0:	d1e7      	bne.n	1a004b82 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a004bb2:	2302      	movs	r3, #2
1a004bb4:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a004bb6:	232c      	movs	r3, #44	; 0x2c
			break;
1a004bb8:	e7d0      	b.n	1a004b5c <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a004bba:	688b      	ldr	r3, [r1, #8]
1a004bbc:	1c5a      	adds	r2, r3, #1
1a004bbe:	608a      	str	r2, [r1, #8]
1a004bc0:	781b      	ldrb	r3, [r3, #0]
1a004bc2:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a004bc4:	888b      	ldrh	r3, [r1, #4]
1a004bc6:	3b01      	subs	r3, #1
1a004bc8:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a004bca:	233c      	movs	r3, #60	; 0x3c
1a004bcc:	e7c6      	b.n	1a004b5c <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a004bce:	6882      	ldr	r2, [r0, #8]
1a004bd0:	68cb      	ldr	r3, [r1, #12]
1a004bd2:	1c5c      	adds	r4, r3, #1
1a004bd4:	60cc      	str	r4, [r1, #12]
1a004bd6:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a004bd8:	88cb      	ldrh	r3, [r1, #6]
1a004bda:	3b01      	subs	r3, #1
1a004bdc:	80cb      	strh	r3, [r1, #6]
1a004bde:	e7a1      	b.n	1a004b24 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a004be0:	784b      	ldrb	r3, [r1, #1]
1a004be2:	f013 0f02 	tst.w	r3, #2
1a004be6:	d101      	bne.n	1a004bec <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a004be8:	233c      	movs	r3, #60	; 0x3c
1a004bea:	e79f      	b.n	1a004b2c <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a004bec:	2338      	movs	r3, #56	; 0x38
1a004bee:	e79d      	b.n	1a004b2c <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a004bf0:	2304      	movs	r3, #4
1a004bf2:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a004bf4:	232c      	movs	r3, #44	; 0x2c
		break;
1a004bf6:	e7b1      	b.n	1a004b5c <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a004bf8:	2305      	movs	r3, #5
1a004bfa:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a004bfc:	233c      	movs	r3, #60	; 0x3c
		break;
1a004bfe:	e7ad      	b.n	1a004b5c <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a004c00:	231c      	movs	r3, #28
1a004c02:	e7ab      	b.n	1a004b5c <Chip_I2CM_XferHandler+0x54>

1a004c04 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a004c04:	23ff      	movs	r3, #255	; 0xff
1a004c06:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a004c08:	232c      	movs	r3, #44	; 0x2c
1a004c0a:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a004c0c:	2360      	movs	r3, #96	; 0x60
1a004c0e:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a004c10:	4770      	bx	lr

1a004c12 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a004c12:	b538      	push	{r3, r4, r5, lr}
1a004c14:	4604      	mov	r4, r0
1a004c16:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a004c18:	f7ff fff4 	bl	1a004c04 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a004c1c:	2000      	movs	r0, #0

	while (ret == 0) {
1a004c1e:	e007      	b.n	1a004c30 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a004c20:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a004c22:	f013 0f08 	tst.w	r3, #8
1a004c26:	d0fb      	beq.n	1a004c20 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a004c28:	4629      	mov	r1, r5
1a004c2a:	4620      	mov	r0, r4
1a004c2c:	f7ff ff6c 	bl	1a004b08 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a004c30:	2800      	cmp	r0, #0
1a004c32:	d0f5      	beq.n	1a004c20 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a004c34:	bd38      	pop	{r3, r4, r5, pc}
1a004c36:	Address 0x000000001a004c36 is out of bounds.


1a004c38 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a004c38:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a004c3a:	4b0f      	ldr	r3, [pc, #60]	; (1a004c78 <fpuInit+0x40>)
1a004c3c:	681b      	ldr	r3, [r3, #0]
1a004c3e:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a004c40:	4b0e      	ldr	r3, [pc, #56]	; (1a004c7c <fpuInit+0x44>)
1a004c42:	681b      	ldr	r3, [r3, #0]
1a004c44:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a004c46:	9a02      	ldr	r2, [sp, #8]
1a004c48:	4b0d      	ldr	r3, [pc, #52]	; (1a004c80 <fpuInit+0x48>)
1a004c4a:	429a      	cmp	r2, r3
1a004c4c:	d00c      	beq.n	1a004c68 <fpuInit+0x30>
1a004c4e:	2300      	movs	r3, #0

	if (vfpPresent) {
1a004c50:	b143      	cbz	r3, 1a004c64 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a004c52:	4a0c      	ldr	r2, [pc, #48]	; (1a004c84 <fpuInit+0x4c>)
1a004c54:	6813      	ldr	r3, [r2, #0]
1a004c56:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a004c58:	9b03      	ldr	r3, [sp, #12]
1a004c5a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a004c5e:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a004c60:	9b03      	ldr	r3, [sp, #12]
1a004c62:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a004c64:	b004      	add	sp, #16
1a004c66:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a004c68:	9a01      	ldr	r2, [sp, #4]
1a004c6a:	4b07      	ldr	r3, [pc, #28]	; (1a004c88 <fpuInit+0x50>)
1a004c6c:	429a      	cmp	r2, r3
1a004c6e:	d001      	beq.n	1a004c74 <fpuInit+0x3c>
1a004c70:	2300      	movs	r3, #0
1a004c72:	e7ed      	b.n	1a004c50 <fpuInit+0x18>
1a004c74:	2301      	movs	r3, #1
1a004c76:	e7eb      	b.n	1a004c50 <fpuInit+0x18>
1a004c78:	e000ef40 	.word	0xe000ef40
1a004c7c:	e000ef44 	.word	0xe000ef44
1a004c80:	10110021 	.word	0x10110021
1a004c84:	e000ed88 	.word	0xe000ed88
1a004c88:	11000011 	.word	0x11000011

1a004c8c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a004c8c:	4770      	bx	lr
1a004c8e:	Address 0x000000001a004c8e is out of bounds.


1a004c90 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a004c90:	2901      	cmp	r1, #1
1a004c92:	d000      	beq.n	1a004c96 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a004c94:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a004c96:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a004c9a:	0082      	lsls	r2, r0, #2
1a004c9c:	4b03      	ldr	r3, [pc, #12]	; (1a004cac <Chip_I2C_EventHandler+0x1c>)
1a004c9e:	4413      	add	r3, r2
1a004ca0:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a004ca2:	7d13      	ldrb	r3, [r2, #20]
1a004ca4:	b2db      	uxtb	r3, r3
1a004ca6:	2b04      	cmp	r3, #4
1a004ca8:	d0fb      	beq.n	1a004ca2 <Chip_I2C_EventHandler+0x12>
1a004caa:	e7f3      	b.n	1a004c94 <Chip_I2C_EventHandler+0x4>
1a004cac:	10000094 	.word	0x10000094

1a004cb0 <handleMasterXferState>:
{
1a004cb0:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a004cb2:	6843      	ldr	r3, [r0, #4]
1a004cb4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a004cb8:	2b58      	cmp	r3, #88	; 0x58
1a004cba:	d87e      	bhi.n	1a004dba <handleMasterXferState+0x10a>
1a004cbc:	e8df f003 	tbb	[pc, r3]
1a004cc0:	7d7d7d79 	.word	0x7d7d7d79
1a004cc4:	7d7d7d7d 	.word	0x7d7d7d7d
1a004cc8:	7d7d7d2f 	.word	0x7d7d7d2f
1a004ccc:	7d7d7d7d 	.word	0x7d7d7d7d
1a004cd0:	7d7d7d2f 	.word	0x7d7d7d2f
1a004cd4:	7d7d7d7d 	.word	0x7d7d7d7d
1a004cd8:	7d7d7d39 	.word	0x7d7d7d39
1a004cdc:	7d7d7d7d 	.word	0x7d7d7d7d
1a004ce0:	7d7d7d6d 	.word	0x7d7d7d6d
1a004ce4:	7d7d7d7d 	.word	0x7d7d7d7d
1a004ce8:	7d7d7d39 	.word	0x7d7d7d39
1a004cec:	7d7d7d7d 	.word	0x7d7d7d7d
1a004cf0:	7d7d7d71 	.word	0x7d7d7d71
1a004cf4:	7d7d7d7d 	.word	0x7d7d7d7d
1a004cf8:	7d7d7d75 	.word	0x7d7d7d75
1a004cfc:	7d7d7d7d 	.word	0x7d7d7d7d
1a004d00:	7d7d7d6b 	.word	0x7d7d7d6b
1a004d04:	7d7d7d7d 	.word	0x7d7d7d7d
1a004d08:	7d7d7d6d 	.word	0x7d7d7d6d
1a004d0c:	7d7d7d7d 	.word	0x7d7d7d7d
1a004d10:	7d7d7d2d 	.word	0x7d7d7d2d
1a004d14:	7d7d7d7d 	.word	0x7d7d7d7d
1a004d18:	4f          	.byte	0x4f
1a004d19:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a004d1a:	233c      	movs	r3, #60	; 0x3c
1a004d1c:	e020      	b.n	1a004d60 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a004d1e:	780a      	ldrb	r2, [r1, #0]
1a004d20:	688b      	ldr	r3, [r1, #8]
1a004d22:	fab3 f383 	clz	r3, r3
1a004d26:	095b      	lsrs	r3, r3, #5
1a004d28:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a004d2c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a004d2e:	233c      	movs	r3, #60	; 0x3c
		break;
1a004d30:	e023      	b.n	1a004d7a <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a004d32:	688b      	ldr	r3, [r1, #8]
1a004d34:	b94b      	cbnz	r3, 1a004d4a <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a004d36:	690b      	ldr	r3, [r1, #16]
1a004d38:	b123      	cbz	r3, 1a004d44 <handleMasterXferState+0x94>
1a004d3a:	f06f 0320 	mvn.w	r3, #32
1a004d3e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a004d42:	e01a      	b.n	1a004d7a <handleMasterXferState+0xca>
1a004d44:	f06f 0310 	mvn.w	r3, #16
1a004d48:	e7f9      	b.n	1a004d3e <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a004d4a:	684b      	ldr	r3, [r1, #4]
1a004d4c:	1c5a      	adds	r2, r3, #1
1a004d4e:	604a      	str	r2, [r1, #4]
1a004d50:	781b      	ldrb	r3, [r3, #0]
1a004d52:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a004d54:	688b      	ldr	r3, [r1, #8]
1a004d56:	3b01      	subs	r3, #1
1a004d58:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a004d5a:	233c      	movs	r3, #60	; 0x3c
1a004d5c:	e00d      	b.n	1a004d7a <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a004d5e:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a004d60:	6884      	ldr	r4, [r0, #8]
1a004d62:	68ca      	ldr	r2, [r1, #12]
1a004d64:	1c55      	adds	r5, r2, #1
1a004d66:	60cd      	str	r5, [r1, #12]
1a004d68:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a004d6a:	690a      	ldr	r2, [r1, #16]
1a004d6c:	3a01      	subs	r2, #1
1a004d6e:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a004d70:	690a      	ldr	r2, [r1, #16]
1a004d72:	2a01      	cmp	r2, #1
1a004d74:	dd01      	ble.n	1a004d7a <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a004d76:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a004d7a:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a004d7e:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a004d80:	f023 0210 	bic.w	r2, r3, #16
1a004d84:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a004d86:	f013 0f10 	tst.w	r3, #16
1a004d8a:	d018      	beq.n	1a004dbe <handleMasterXferState+0x10e>
1a004d8c:	7d0b      	ldrb	r3, [r1, #20]
1a004d8e:	2b02      	cmp	r3, #2
1a004d90:	d015      	beq.n	1a004dbe <handleMasterXferState+0x10e>
	return 1;
1a004d92:	2001      	movs	r0, #1
1a004d94:	e017      	b.n	1a004dc6 <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a004d96:	233c      	movs	r3, #60	; 0x3c
1a004d98:	e7ea      	b.n	1a004d70 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a004d9a:	2305      	movs	r3, #5
1a004d9c:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a004d9e:	232c      	movs	r3, #44	; 0x2c
		break;
1a004da0:	e7eb      	b.n	1a004d7a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a004da2:	2301      	movs	r3, #1
1a004da4:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a004da6:	232c      	movs	r3, #44	; 0x2c
		break;
1a004da8:	e7e7      	b.n	1a004d7a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a004daa:	2302      	movs	r3, #2
1a004dac:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a004dae:	233c      	movs	r3, #60	; 0x3c
		break;
1a004db0:	e7e3      	b.n	1a004d7a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a004db2:	2303      	movs	r3, #3
1a004db4:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a004db6:	232c      	movs	r3, #44	; 0x2c
1a004db8:	e7df      	b.n	1a004d7a <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a004dba:	233c      	movs	r3, #60	; 0x3c
1a004dbc:	e7dd      	b.n	1a004d7a <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a004dbe:	7d0b      	ldrb	r3, [r1, #20]
1a004dc0:	2b04      	cmp	r3, #4
1a004dc2:	d002      	beq.n	1a004dca <handleMasterXferState+0x11a>
		return 0;
1a004dc4:	2000      	movs	r0, #0
}
1a004dc6:	bc30      	pop	{r4, r5}
1a004dc8:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a004dca:	2000      	movs	r0, #0
1a004dcc:	7508      	strb	r0, [r1, #20]
1a004dce:	e7fa      	b.n	1a004dc6 <handleMasterXferState+0x116>

1a004dd0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a004dd0:	b570      	push	{r4, r5, r6, lr}
1a004dd2:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a004dd4:	4e06      	ldr	r6, [pc, #24]	; (1a004df0 <Chip_I2C_Init+0x20>)
1a004dd6:	00c4      	lsls	r4, r0, #3
1a004dd8:	1a22      	subs	r2, r4, r0
1a004dda:	0093      	lsls	r3, r2, #2
1a004ddc:	4433      	add	r3, r6
1a004dde:	8898      	ldrh	r0, [r3, #4]
1a004de0:	f7ff fd8e 	bl	1a004900 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a004de4:	1b64      	subs	r4, r4, r5
1a004de6:	00a3      	lsls	r3, r4, #2
1a004de8:	58f3      	ldr	r3, [r6, r3]
1a004dea:	226c      	movs	r2, #108	; 0x6c
1a004dec:	619a      	str	r2, [r3, #24]
}
1a004dee:	bd70      	pop	{r4, r5, r6, pc}
1a004df0:	10000094 	.word	0x10000094

1a004df4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a004df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004df8:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a004dfa:	4e0b      	ldr	r6, [pc, #44]	; (1a004e28 <Chip_I2C_SetClockRate+0x34>)
1a004dfc:	00c5      	lsls	r5, r0, #3
1a004dfe:	1a2b      	subs	r3, r5, r0
1a004e00:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a004e04:	eb06 0308 	add.w	r3, r6, r8
1a004e08:	8898      	ldrh	r0, [r3, #4]
1a004e0a:	f7ff fdad 	bl	1a004968 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a004e0e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a004e12:	f856 3008 	ldr.w	r3, [r6, r8]
1a004e16:	0842      	lsrs	r2, r0, #1
1a004e18:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a004e1a:	f856 3008 	ldr.w	r3, [r6, r8]
1a004e1e:	691a      	ldr	r2, [r3, #16]
1a004e20:	1a80      	subs	r0, r0, r2
1a004e22:	6158      	str	r0, [r3, #20]
}
1a004e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004e28:	10000094 	.word	0x10000094

1a004e2c <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a004e2c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a004e30:	009a      	lsls	r2, r3, #2
1a004e32:	4b09      	ldr	r3, [pc, #36]	; (1a004e58 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a004e34:	4413      	add	r3, r2
1a004e36:	691b      	ldr	r3, [r3, #16]
1a004e38:	b153      	cbz	r3, 1a004e50 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a004e3a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a004e3e:	0082      	lsls	r2, r0, #2
1a004e40:	4b05      	ldr	r3, [pc, #20]	; (1a004e58 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a004e42:	4413      	add	r3, r2
1a004e44:	6898      	ldr	r0, [r3, #8]
}
1a004e46:	4288      	cmp	r0, r1
1a004e48:	bf14      	ite	ne
1a004e4a:	2000      	movne	r0, #0
1a004e4c:	2001      	moveq	r0, #1
1a004e4e:	4770      	bx	lr
		iic->mEvent = event;
1a004e50:	4b01      	ldr	r3, [pc, #4]	; (1a004e58 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a004e52:	4413      	add	r3, r2
1a004e54:	6099      	str	r1, [r3, #8]
1a004e56:	e7f0      	b.n	1a004e3a <Chip_I2C_SetMasterEventHandler+0xe>
1a004e58:	10000094 	.word	0x10000094

1a004e5c <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a004e5c:	b510      	push	{r4, lr}
1a004e5e:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a004e60:	4809      	ldr	r0, [pc, #36]	; (1a004e88 <Chip_I2C_MasterStateHandler+0x2c>)
1a004e62:	00e3      	lsls	r3, r4, #3
1a004e64:	1b1b      	subs	r3, r3, r4
1a004e66:	009a      	lsls	r2, r3, #2
1a004e68:	1883      	adds	r3, r0, r2
1a004e6a:	6919      	ldr	r1, [r3, #16]
1a004e6c:	5880      	ldr	r0, [r0, r2]
1a004e6e:	f7ff ff1f 	bl	1a004cb0 <handleMasterXferState>
1a004e72:	b940      	cbnz	r0, 1a004e86 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a004e74:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a004e78:	009a      	lsls	r2, r3, #2
1a004e7a:	4b03      	ldr	r3, [pc, #12]	; (1a004e88 <Chip_I2C_MasterStateHandler+0x2c>)
1a004e7c:	4413      	add	r3, r2
1a004e7e:	689b      	ldr	r3, [r3, #8]
1a004e80:	2102      	movs	r1, #2
1a004e82:	4620      	mov	r0, r4
1a004e84:	4798      	blx	r3
	}
}
1a004e86:	bd10      	pop	{r4, pc}
1a004e88:	10000094 	.word	0x10000094

1a004e8c <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a004e8c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a004e90:	0083      	lsls	r3, r0, #2
1a004e92:	4a03      	ldr	r2, [pc, #12]	; (1a004ea0 <Chip_I2C_IsStateChanged+0x14>)
1a004e94:	58d3      	ldr	r3, [r2, r3]
1a004e96:	6818      	ldr	r0, [r3, #0]
}
1a004e98:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a004e9c:	4770      	bx	lr
1a004e9e:	bf00      	nop
1a004ea0:	10000094 	.word	0x10000094

1a004ea4 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a004ea4:	2901      	cmp	r1, #1
1a004ea6:	d000      	beq.n	1a004eaa <Chip_I2C_EventHandlerPolling+0x6>
1a004ea8:	4770      	bx	lr
{
1a004eaa:	b538      	push	{r3, r4, r5, lr}
1a004eac:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a004eae:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a004eb2:	009a      	lsls	r2, r3, #2
1a004eb4:	4b08      	ldr	r3, [pc, #32]	; (1a004ed8 <Chip_I2C_EventHandlerPolling+0x34>)
1a004eb6:	4413      	add	r3, r2
1a004eb8:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a004eba:	7d2b      	ldrb	r3, [r5, #20]
1a004ebc:	b2db      	uxtb	r3, r3
1a004ebe:	2b04      	cmp	r3, #4
1a004ec0:	d108      	bne.n	1a004ed4 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a004ec2:	4620      	mov	r0, r4
1a004ec4:	f7ff ffe2 	bl	1a004e8c <Chip_I2C_IsStateChanged>
1a004ec8:	2800      	cmp	r0, #0
1a004eca:	d0f6      	beq.n	1a004eba <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a004ecc:	4620      	mov	r0, r4
1a004ece:	f7ff ffc5 	bl	1a004e5c <Chip_I2C_MasterStateHandler>
1a004ed2:	e7f2      	b.n	1a004eba <Chip_I2C_EventHandlerPolling+0x16>
}
1a004ed4:	bd38      	pop	{r3, r4, r5, pc}
1a004ed6:	bf00      	nop
1a004ed8:	10000094 	.word	0x10000094

1a004edc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004edc:	4b03      	ldr	r3, [pc, #12]	; (1a004eec <Chip_SSP_GetClockIndex+0x10>)
1a004ede:	4298      	cmp	r0, r3
1a004ee0:	d001      	beq.n	1a004ee6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a004ee2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a004ee4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a004ee6:	20a5      	movs	r0, #165	; 0xa5
1a004ee8:	4770      	bx	lr
1a004eea:	bf00      	nop
1a004eec:	400c5000 	.word	0x400c5000

1a004ef0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004ef0:	4b04      	ldr	r3, [pc, #16]	; (1a004f04 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a004ef2:	4298      	cmp	r0, r3
1a004ef4:	d002      	beq.n	1a004efc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a004ef6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a004efa:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a004efc:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a004f00:	4770      	bx	lr
1a004f02:	bf00      	nop
1a004f04:	400c5000 	.word	0x400c5000

1a004f08 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a004f08:	6803      	ldr	r3, [r0, #0]
1a004f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a004f0e:	0209      	lsls	r1, r1, #8
1a004f10:	b289      	uxth	r1, r1
1a004f12:	4319      	orrs	r1, r3
1a004f14:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a004f16:	6102      	str	r2, [r0, #16]
}
1a004f18:	4770      	bx	lr

1a004f1a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a004f1a:	b570      	push	{r4, r5, r6, lr}
1a004f1c:	4606      	mov	r6, r0
1a004f1e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004f20:	f7ff ffe6 	bl	1a004ef0 <Chip_SSP_GetPeriphClockIndex>
1a004f24:	f7ff fd20 	bl	1a004968 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a004f28:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a004f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a004f2e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a004f30:	e000      	b.n	1a004f34 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a004f32:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a004f34:	42ab      	cmp	r3, r5
1a004f36:	d90b      	bls.n	1a004f50 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a004f38:	1c4c      	adds	r4, r1, #1
1a004f3a:	fb02 f304 	mul.w	r3, r2, r4
1a004f3e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a004f42:	429d      	cmp	r5, r3
1a004f44:	d2f6      	bcs.n	1a004f34 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a004f46:	2cff      	cmp	r4, #255	; 0xff
1a004f48:	d9f3      	bls.n	1a004f32 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a004f4a:	3202      	adds	r2, #2
				cr0_div = 0;
1a004f4c:	2100      	movs	r1, #0
1a004f4e:	e7f1      	b.n	1a004f34 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a004f50:	4630      	mov	r0, r6
1a004f52:	f7ff ffd9 	bl	1a004f08 <Chip_SSP_SetClockRate>
}
1a004f56:	bd70      	pop	{r4, r5, r6, pc}

1a004f58 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a004f58:	b510      	push	{r4, lr}
1a004f5a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a004f5c:	f7ff ffbe 	bl	1a004edc <Chip_SSP_GetClockIndex>
1a004f60:	f7ff fcce 	bl	1a004900 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004f64:	4620      	mov	r0, r4
1a004f66:	f7ff ffc3 	bl	1a004ef0 <Chip_SSP_GetPeriphClockIndex>
1a004f6a:	f7ff fcc9 	bl	1a004900 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a004f6e:	6863      	ldr	r3, [r4, #4]
1a004f70:	f023 0304 	bic.w	r3, r3, #4
1a004f74:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a004f76:	6823      	ldr	r3, [r4, #0]
1a004f78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a004f7c:	f043 0307 	orr.w	r3, r3, #7
1a004f80:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a004f82:	4902      	ldr	r1, [pc, #8]	; (1a004f8c <Chip_SSP_Init+0x34>)
1a004f84:	4620      	mov	r0, r4
1a004f86:	f7ff ffc8 	bl	1a004f1a <Chip_SSP_SetBitRate>
}
1a004f8a:	bd10      	pop	{r4, pc}
1a004f8c:	000186a0 	.word	0x000186a0

1a004f90 <ResetISR>:
void ResetISR(void) {
1a004f90:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a004f92:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a004f94:	4b18      	ldr	r3, [pc, #96]	; (1a004ff8 <ResetISR+0x68>)
1a004f96:	4a19      	ldr	r2, [pc, #100]	; (1a004ffc <ResetISR+0x6c>)
1a004f98:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a004f9a:	3304      	adds	r3, #4
1a004f9c:	4a18      	ldr	r2, [pc, #96]	; (1a005000 <ResetISR+0x70>)
1a004f9e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a004fa0:	2300      	movs	r3, #0
1a004fa2:	e005      	b.n	1a004fb0 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a004fa4:	4a17      	ldr	r2, [pc, #92]	; (1a005004 <ResetISR+0x74>)
1a004fa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a004faa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a004fae:	3301      	adds	r3, #1
1a004fb0:	2b07      	cmp	r3, #7
1a004fb2:	d9f7      	bls.n	1a004fa4 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a004fb4:	b662      	cpsie	i
    SystemInit();
1a004fb6:	f7ff f84d 	bl	1a004054 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a004fba:	4b13      	ldr	r3, [pc, #76]	; (1a005008 <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a004fbc:	e007      	b.n	1a004fce <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a004fbe:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a004fc2:	689a      	ldr	r2, [r3, #8]
1a004fc4:	6859      	ldr	r1, [r3, #4]
1a004fc6:	6818      	ldr	r0, [r3, #0]
1a004fc8:	f7fb f8e5 	bl	1a000196 <data_init>
        SectionLen = *SectionTableAddr++;
1a004fcc:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a004fce:	4a0f      	ldr	r2, [pc, #60]	; (1a00500c <ResetISR+0x7c>)
1a004fd0:	4293      	cmp	r3, r2
1a004fd2:	d3f4      	bcc.n	1a004fbe <ResetISR+0x2e>
1a004fd4:	e006      	b.n	1a004fe4 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a004fd6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a004fd8:	6859      	ldr	r1, [r3, #4]
1a004fda:	f854 0b08 	ldr.w	r0, [r4], #8
1a004fde:	f7fb f8e9 	bl	1a0001b4 <bss_init>
        SectionLen = *SectionTableAddr++;
1a004fe2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a004fe4:	4a0a      	ldr	r2, [pc, #40]	; (1a005010 <ResetISR+0x80>)
1a004fe6:	4293      	cmp	r3, r2
1a004fe8:	d3f5      	bcc.n	1a004fd6 <ResetISR+0x46>
    __libc_init_array();
1a004fea:	f000 fba1 	bl	1a005730 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a004fee:	f7ff f813 	bl	1a004018 <Board_Init>
    main();
1a004ff2:	f7fb fc9b 	bl	1a00092c <main>
1a004ff6:	e7fe      	b.n	1a004ff6 <ResetISR+0x66>
1a004ff8:	40053100 	.word	0x40053100
1a004ffc:	10df1000 	.word	0x10df1000
1a005000:	01dff7ff 	.word	0x01dff7ff
1a005004:	e000e280 	.word	0xe000e280
1a005008:	1a000114 	.word	0x1a000114
1a00500c:	1a000150 	.word	0x1a000150
1a005010:	1a000178 	.word	0x1a000178

1a005014 <_init>:
void _init(void) {}
1a005014:	4770      	bx	lr
1a005016:	Address 0x000000001a005016 is out of bounds.


1a005018 <__aeabi_drsub>:
1a005018:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a00501c:	e002      	b.n	1a005024 <__adddf3>
1a00501e:	bf00      	nop

1a005020 <__aeabi_dsub>:
1a005020:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a005024 <__adddf3>:
1a005024:	b530      	push	{r4, r5, lr}
1a005026:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00502a:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00502e:	ea94 0f05 	teq	r4, r5
1a005032:	bf08      	it	eq
1a005034:	ea90 0f02 	teqeq	r0, r2
1a005038:	bf1f      	itttt	ne
1a00503a:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00503e:	ea55 0c02 	orrsne.w	ip, r5, r2
1a005042:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a005046:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00504a:	f000 80e2 	beq.w	1a005212 <__adddf3+0x1ee>
1a00504e:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a005052:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a005056:	bfb8      	it	lt
1a005058:	426d      	neglt	r5, r5
1a00505a:	dd0c      	ble.n	1a005076 <__adddf3+0x52>
1a00505c:	442c      	add	r4, r5
1a00505e:	ea80 0202 	eor.w	r2, r0, r2
1a005062:	ea81 0303 	eor.w	r3, r1, r3
1a005066:	ea82 0000 	eor.w	r0, r2, r0
1a00506a:	ea83 0101 	eor.w	r1, r3, r1
1a00506e:	ea80 0202 	eor.w	r2, r0, r2
1a005072:	ea81 0303 	eor.w	r3, r1, r3
1a005076:	2d36      	cmp	r5, #54	; 0x36
1a005078:	bf88      	it	hi
1a00507a:	bd30      	pophi	{r4, r5, pc}
1a00507c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a005080:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a005084:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a005088:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a00508c:	d002      	beq.n	1a005094 <__adddf3+0x70>
1a00508e:	4240      	negs	r0, r0
1a005090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a005094:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a005098:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00509c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0050a0:	d002      	beq.n	1a0050a8 <__adddf3+0x84>
1a0050a2:	4252      	negs	r2, r2
1a0050a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0050a8:	ea94 0f05 	teq	r4, r5
1a0050ac:	f000 80a7 	beq.w	1a0051fe <__adddf3+0x1da>
1a0050b0:	f1a4 0401 	sub.w	r4, r4, #1
1a0050b4:	f1d5 0e20 	rsbs	lr, r5, #32
1a0050b8:	db0d      	blt.n	1a0050d6 <__adddf3+0xb2>
1a0050ba:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0050be:	fa22 f205 	lsr.w	r2, r2, r5
1a0050c2:	1880      	adds	r0, r0, r2
1a0050c4:	f141 0100 	adc.w	r1, r1, #0
1a0050c8:	fa03 f20e 	lsl.w	r2, r3, lr
1a0050cc:	1880      	adds	r0, r0, r2
1a0050ce:	fa43 f305 	asr.w	r3, r3, r5
1a0050d2:	4159      	adcs	r1, r3
1a0050d4:	e00e      	b.n	1a0050f4 <__adddf3+0xd0>
1a0050d6:	f1a5 0520 	sub.w	r5, r5, #32
1a0050da:	f10e 0e20 	add.w	lr, lr, #32
1a0050de:	2a01      	cmp	r2, #1
1a0050e0:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0050e4:	bf28      	it	cs
1a0050e6:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0050ea:	fa43 f305 	asr.w	r3, r3, r5
1a0050ee:	18c0      	adds	r0, r0, r3
1a0050f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0050f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0050f8:	d507      	bpl.n	1a00510a <__adddf3+0xe6>
1a0050fa:	f04f 0e00 	mov.w	lr, #0
1a0050fe:	f1dc 0c00 	rsbs	ip, ip, #0
1a005102:	eb7e 0000 	sbcs.w	r0, lr, r0
1a005106:	eb6e 0101 	sbc.w	r1, lr, r1
1a00510a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00510e:	d31b      	bcc.n	1a005148 <__adddf3+0x124>
1a005110:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a005114:	d30c      	bcc.n	1a005130 <__adddf3+0x10c>
1a005116:	0849      	lsrs	r1, r1, #1
1a005118:	ea5f 0030 	movs.w	r0, r0, rrx
1a00511c:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a005120:	f104 0401 	add.w	r4, r4, #1
1a005124:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a005128:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a00512c:	f080 809a 	bcs.w	1a005264 <__adddf3+0x240>
1a005130:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a005134:	bf08      	it	eq
1a005136:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00513a:	f150 0000 	adcs.w	r0, r0, #0
1a00513e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a005142:	ea41 0105 	orr.w	r1, r1, r5
1a005146:	bd30      	pop	{r4, r5, pc}
1a005148:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a00514c:	4140      	adcs	r0, r0
1a00514e:	eb41 0101 	adc.w	r1, r1, r1
1a005152:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005156:	f1a4 0401 	sub.w	r4, r4, #1
1a00515a:	d1e9      	bne.n	1a005130 <__adddf3+0x10c>
1a00515c:	f091 0f00 	teq	r1, #0
1a005160:	bf04      	itt	eq
1a005162:	4601      	moveq	r1, r0
1a005164:	2000      	moveq	r0, #0
1a005166:	fab1 f381 	clz	r3, r1
1a00516a:	bf08      	it	eq
1a00516c:	3320      	addeq	r3, #32
1a00516e:	f1a3 030b 	sub.w	r3, r3, #11
1a005172:	f1b3 0220 	subs.w	r2, r3, #32
1a005176:	da0c      	bge.n	1a005192 <__adddf3+0x16e>
1a005178:	320c      	adds	r2, #12
1a00517a:	dd08      	ble.n	1a00518e <__adddf3+0x16a>
1a00517c:	f102 0c14 	add.w	ip, r2, #20
1a005180:	f1c2 020c 	rsb	r2, r2, #12
1a005184:	fa01 f00c 	lsl.w	r0, r1, ip
1a005188:	fa21 f102 	lsr.w	r1, r1, r2
1a00518c:	e00c      	b.n	1a0051a8 <__adddf3+0x184>
1a00518e:	f102 0214 	add.w	r2, r2, #20
1a005192:	bfd8      	it	le
1a005194:	f1c2 0c20 	rsble	ip, r2, #32
1a005198:	fa01 f102 	lsl.w	r1, r1, r2
1a00519c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0051a0:	bfdc      	itt	le
1a0051a2:	ea41 010c 	orrle.w	r1, r1, ip
1a0051a6:	4090      	lslle	r0, r2
1a0051a8:	1ae4      	subs	r4, r4, r3
1a0051aa:	bfa2      	ittt	ge
1a0051ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0051b0:	4329      	orrge	r1, r5
1a0051b2:	bd30      	popge	{r4, r5, pc}
1a0051b4:	ea6f 0404 	mvn.w	r4, r4
1a0051b8:	3c1f      	subs	r4, #31
1a0051ba:	da1c      	bge.n	1a0051f6 <__adddf3+0x1d2>
1a0051bc:	340c      	adds	r4, #12
1a0051be:	dc0e      	bgt.n	1a0051de <__adddf3+0x1ba>
1a0051c0:	f104 0414 	add.w	r4, r4, #20
1a0051c4:	f1c4 0220 	rsb	r2, r4, #32
1a0051c8:	fa20 f004 	lsr.w	r0, r0, r4
1a0051cc:	fa01 f302 	lsl.w	r3, r1, r2
1a0051d0:	ea40 0003 	orr.w	r0, r0, r3
1a0051d4:	fa21 f304 	lsr.w	r3, r1, r4
1a0051d8:	ea45 0103 	orr.w	r1, r5, r3
1a0051dc:	bd30      	pop	{r4, r5, pc}
1a0051de:	f1c4 040c 	rsb	r4, r4, #12
1a0051e2:	f1c4 0220 	rsb	r2, r4, #32
1a0051e6:	fa20 f002 	lsr.w	r0, r0, r2
1a0051ea:	fa01 f304 	lsl.w	r3, r1, r4
1a0051ee:	ea40 0003 	orr.w	r0, r0, r3
1a0051f2:	4629      	mov	r1, r5
1a0051f4:	bd30      	pop	{r4, r5, pc}
1a0051f6:	fa21 f004 	lsr.w	r0, r1, r4
1a0051fa:	4629      	mov	r1, r5
1a0051fc:	bd30      	pop	{r4, r5, pc}
1a0051fe:	f094 0f00 	teq	r4, #0
1a005202:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a005206:	bf06      	itte	eq
1a005208:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a00520c:	3401      	addeq	r4, #1
1a00520e:	3d01      	subne	r5, #1
1a005210:	e74e      	b.n	1a0050b0 <__adddf3+0x8c>
1a005212:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a005216:	bf18      	it	ne
1a005218:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00521c:	d029      	beq.n	1a005272 <__adddf3+0x24e>
1a00521e:	ea94 0f05 	teq	r4, r5
1a005222:	bf08      	it	eq
1a005224:	ea90 0f02 	teqeq	r0, r2
1a005228:	d005      	beq.n	1a005236 <__adddf3+0x212>
1a00522a:	ea54 0c00 	orrs.w	ip, r4, r0
1a00522e:	bf04      	itt	eq
1a005230:	4619      	moveq	r1, r3
1a005232:	4610      	moveq	r0, r2
1a005234:	bd30      	pop	{r4, r5, pc}
1a005236:	ea91 0f03 	teq	r1, r3
1a00523a:	bf1e      	ittt	ne
1a00523c:	2100      	movne	r1, #0
1a00523e:	2000      	movne	r0, #0
1a005240:	bd30      	popne	{r4, r5, pc}
1a005242:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a005246:	d105      	bne.n	1a005254 <__adddf3+0x230>
1a005248:	0040      	lsls	r0, r0, #1
1a00524a:	4149      	adcs	r1, r1
1a00524c:	bf28      	it	cs
1a00524e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a005252:	bd30      	pop	{r4, r5, pc}
1a005254:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a005258:	bf3c      	itt	cc
1a00525a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a00525e:	bd30      	popcc	{r4, r5, pc}
1a005260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a005264:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a005268:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00526c:	f04f 0000 	mov.w	r0, #0
1a005270:	bd30      	pop	{r4, r5, pc}
1a005272:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a005276:	bf1a      	itte	ne
1a005278:	4619      	movne	r1, r3
1a00527a:	4610      	movne	r0, r2
1a00527c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a005280:	bf1c      	itt	ne
1a005282:	460b      	movne	r3, r1
1a005284:	4602      	movne	r2, r0
1a005286:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00528a:	bf06      	itte	eq
1a00528c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a005290:	ea91 0f03 	teqeq	r1, r3
1a005294:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a005298:	bd30      	pop	{r4, r5, pc}
1a00529a:	bf00      	nop

1a00529c <__aeabi_ui2d>:
1a00529c:	f090 0f00 	teq	r0, #0
1a0052a0:	bf04      	itt	eq
1a0052a2:	2100      	moveq	r1, #0
1a0052a4:	4770      	bxeq	lr
1a0052a6:	b530      	push	{r4, r5, lr}
1a0052a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0052ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0052b0:	f04f 0500 	mov.w	r5, #0
1a0052b4:	f04f 0100 	mov.w	r1, #0
1a0052b8:	e750      	b.n	1a00515c <__adddf3+0x138>
1a0052ba:	bf00      	nop

1a0052bc <__aeabi_i2d>:
1a0052bc:	f090 0f00 	teq	r0, #0
1a0052c0:	bf04      	itt	eq
1a0052c2:	2100      	moveq	r1, #0
1a0052c4:	4770      	bxeq	lr
1a0052c6:	b530      	push	{r4, r5, lr}
1a0052c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0052cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0052d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0052d4:	bf48      	it	mi
1a0052d6:	4240      	negmi	r0, r0
1a0052d8:	f04f 0100 	mov.w	r1, #0
1a0052dc:	e73e      	b.n	1a00515c <__adddf3+0x138>
1a0052de:	bf00      	nop

1a0052e0 <__aeabi_f2d>:
1a0052e0:	0042      	lsls	r2, r0, #1
1a0052e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0052e6:	ea4f 0131 	mov.w	r1, r1, rrx
1a0052ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0052ee:	bf1f      	itttt	ne
1a0052f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0052f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0052f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0052fc:	4770      	bxne	lr
1a0052fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a005302:	bf08      	it	eq
1a005304:	4770      	bxeq	lr
1a005306:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00530a:	bf04      	itt	eq
1a00530c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a005310:	4770      	bxeq	lr
1a005312:	b530      	push	{r4, r5, lr}
1a005314:	f44f 7460 	mov.w	r4, #896	; 0x380
1a005318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00531c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a005320:	e71c      	b.n	1a00515c <__adddf3+0x138>
1a005322:	bf00      	nop

1a005324 <__aeabi_ul2d>:
1a005324:	ea50 0201 	orrs.w	r2, r0, r1
1a005328:	bf08      	it	eq
1a00532a:	4770      	bxeq	lr
1a00532c:	b530      	push	{r4, r5, lr}
1a00532e:	f04f 0500 	mov.w	r5, #0
1a005332:	e00a      	b.n	1a00534a <__aeabi_l2d+0x16>

1a005334 <__aeabi_l2d>:
1a005334:	ea50 0201 	orrs.w	r2, r0, r1
1a005338:	bf08      	it	eq
1a00533a:	4770      	bxeq	lr
1a00533c:	b530      	push	{r4, r5, lr}
1a00533e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a005342:	d502      	bpl.n	1a00534a <__aeabi_l2d+0x16>
1a005344:	4240      	negs	r0, r0
1a005346:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00534a:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00534e:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a005352:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a005356:	f43f aed8 	beq.w	1a00510a <__adddf3+0xe6>
1a00535a:	f04f 0203 	mov.w	r2, #3
1a00535e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a005362:	bf18      	it	ne
1a005364:	3203      	addne	r2, #3
1a005366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00536a:	bf18      	it	ne
1a00536c:	3203      	addne	r2, #3
1a00536e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a005372:	f1c2 0320 	rsb	r3, r2, #32
1a005376:	fa00 fc03 	lsl.w	ip, r0, r3
1a00537a:	fa20 f002 	lsr.w	r0, r0, r2
1a00537e:	fa01 fe03 	lsl.w	lr, r1, r3
1a005382:	ea40 000e 	orr.w	r0, r0, lr
1a005386:	fa21 f102 	lsr.w	r1, r1, r2
1a00538a:	4414      	add	r4, r2
1a00538c:	e6bd      	b.n	1a00510a <__adddf3+0xe6>
1a00538e:	bf00      	nop

1a005390 <__aeabi_d2f>:
1a005390:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a005394:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a005398:	bf24      	itt	cs
1a00539a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a00539e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a0053a2:	d90d      	bls.n	1a0053c0 <__aeabi_d2f+0x30>
1a0053a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a0053a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0053ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0053b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a0053b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a0053b8:	bf08      	it	eq
1a0053ba:	f020 0001 	biceq.w	r0, r0, #1
1a0053be:	4770      	bx	lr
1a0053c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a0053c4:	d121      	bne.n	1a00540a <__aeabi_d2f+0x7a>
1a0053c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a0053ca:	bfbc      	itt	lt
1a0053cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a0053d0:	4770      	bxlt	lr
1a0053d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0053d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0053da:	f1c2 0218 	rsb	r2, r2, #24
1a0053de:	f1c2 0c20 	rsb	ip, r2, #32
1a0053e2:	fa10 f30c 	lsls.w	r3, r0, ip
1a0053e6:	fa20 f002 	lsr.w	r0, r0, r2
1a0053ea:	bf18      	it	ne
1a0053ec:	f040 0001 	orrne.w	r0, r0, #1
1a0053f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0053f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a0053f8:	fa03 fc0c 	lsl.w	ip, r3, ip
1a0053fc:	ea40 000c 	orr.w	r0, r0, ip
1a005400:	fa23 f302 	lsr.w	r3, r3, r2
1a005404:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a005408:	e7cc      	b.n	1a0053a4 <__aeabi_d2f+0x14>
1a00540a:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a00540e:	d107      	bne.n	1a005420 <__aeabi_d2f+0x90>
1a005410:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a005414:	bf1e      	ittt	ne
1a005416:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a00541a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a00541e:	4770      	bxne	lr
1a005420:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a005424:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a005428:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a00542c:	4770      	bx	lr
1a00542e:	bf00      	nop

1a005430 <__aeabi_uldivmod>:
1a005430:	b953      	cbnz	r3, 1a005448 <__aeabi_uldivmod+0x18>
1a005432:	b94a      	cbnz	r2, 1a005448 <__aeabi_uldivmod+0x18>
1a005434:	2900      	cmp	r1, #0
1a005436:	bf08      	it	eq
1a005438:	2800      	cmpeq	r0, #0
1a00543a:	bf1c      	itt	ne
1a00543c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a005440:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a005444:	f000 b972 	b.w	1a00572c <__aeabi_idiv0>
1a005448:	f1ad 0c08 	sub.w	ip, sp, #8
1a00544c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a005450:	f000 f806 	bl	1a005460 <__udivmoddi4>
1a005454:	f8dd e004 	ldr.w	lr, [sp, #4]
1a005458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00545c:	b004      	add	sp, #16
1a00545e:	4770      	bx	lr

1a005460 <__udivmoddi4>:
1a005460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005464:	9e08      	ldr	r6, [sp, #32]
1a005466:	4604      	mov	r4, r0
1a005468:	4688      	mov	r8, r1
1a00546a:	2b00      	cmp	r3, #0
1a00546c:	d14b      	bne.n	1a005506 <__udivmoddi4+0xa6>
1a00546e:	428a      	cmp	r2, r1
1a005470:	4615      	mov	r5, r2
1a005472:	d967      	bls.n	1a005544 <__udivmoddi4+0xe4>
1a005474:	fab2 f282 	clz	r2, r2
1a005478:	b14a      	cbz	r2, 1a00548e <__udivmoddi4+0x2e>
1a00547a:	f1c2 0720 	rsb	r7, r2, #32
1a00547e:	fa01 f302 	lsl.w	r3, r1, r2
1a005482:	fa20 f707 	lsr.w	r7, r0, r7
1a005486:	4095      	lsls	r5, r2
1a005488:	ea47 0803 	orr.w	r8, r7, r3
1a00548c:	4094      	lsls	r4, r2
1a00548e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005492:	0c23      	lsrs	r3, r4, #16
1a005494:	fbb8 f7fe 	udiv	r7, r8, lr
1a005498:	fa1f fc85 	uxth.w	ip, r5
1a00549c:	fb0e 8817 	mls	r8, lr, r7, r8
1a0054a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0054a4:	fb07 f10c 	mul.w	r1, r7, ip
1a0054a8:	4299      	cmp	r1, r3
1a0054aa:	d909      	bls.n	1a0054c0 <__udivmoddi4+0x60>
1a0054ac:	18eb      	adds	r3, r5, r3
1a0054ae:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0054b2:	f080 811b 	bcs.w	1a0056ec <__udivmoddi4+0x28c>
1a0054b6:	4299      	cmp	r1, r3
1a0054b8:	f240 8118 	bls.w	1a0056ec <__udivmoddi4+0x28c>
1a0054bc:	3f02      	subs	r7, #2
1a0054be:	442b      	add	r3, r5
1a0054c0:	1a5b      	subs	r3, r3, r1
1a0054c2:	b2a4      	uxth	r4, r4
1a0054c4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0054c8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0054cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0054d0:	fb00 fc0c 	mul.w	ip, r0, ip
1a0054d4:	45a4      	cmp	ip, r4
1a0054d6:	d909      	bls.n	1a0054ec <__udivmoddi4+0x8c>
1a0054d8:	192c      	adds	r4, r5, r4
1a0054da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0054de:	f080 8107 	bcs.w	1a0056f0 <__udivmoddi4+0x290>
1a0054e2:	45a4      	cmp	ip, r4
1a0054e4:	f240 8104 	bls.w	1a0056f0 <__udivmoddi4+0x290>
1a0054e8:	3802      	subs	r0, #2
1a0054ea:	442c      	add	r4, r5
1a0054ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0054f0:	eba4 040c 	sub.w	r4, r4, ip
1a0054f4:	2700      	movs	r7, #0
1a0054f6:	b11e      	cbz	r6, 1a005500 <__udivmoddi4+0xa0>
1a0054f8:	40d4      	lsrs	r4, r2
1a0054fa:	2300      	movs	r3, #0
1a0054fc:	e9c6 4300 	strd	r4, r3, [r6]
1a005500:	4639      	mov	r1, r7
1a005502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005506:	428b      	cmp	r3, r1
1a005508:	d909      	bls.n	1a00551e <__udivmoddi4+0xbe>
1a00550a:	2e00      	cmp	r6, #0
1a00550c:	f000 80eb 	beq.w	1a0056e6 <__udivmoddi4+0x286>
1a005510:	2700      	movs	r7, #0
1a005512:	e9c6 0100 	strd	r0, r1, [r6]
1a005516:	4638      	mov	r0, r7
1a005518:	4639      	mov	r1, r7
1a00551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00551e:	fab3 f783 	clz	r7, r3
1a005522:	2f00      	cmp	r7, #0
1a005524:	d147      	bne.n	1a0055b6 <__udivmoddi4+0x156>
1a005526:	428b      	cmp	r3, r1
1a005528:	d302      	bcc.n	1a005530 <__udivmoddi4+0xd0>
1a00552a:	4282      	cmp	r2, r0
1a00552c:	f200 80fa 	bhi.w	1a005724 <__udivmoddi4+0x2c4>
1a005530:	1a84      	subs	r4, r0, r2
1a005532:	eb61 0303 	sbc.w	r3, r1, r3
1a005536:	2001      	movs	r0, #1
1a005538:	4698      	mov	r8, r3
1a00553a:	2e00      	cmp	r6, #0
1a00553c:	d0e0      	beq.n	1a005500 <__udivmoddi4+0xa0>
1a00553e:	e9c6 4800 	strd	r4, r8, [r6]
1a005542:	e7dd      	b.n	1a005500 <__udivmoddi4+0xa0>
1a005544:	b902      	cbnz	r2, 1a005548 <__udivmoddi4+0xe8>
1a005546:	deff      	udf	#255	; 0xff
1a005548:	fab2 f282 	clz	r2, r2
1a00554c:	2a00      	cmp	r2, #0
1a00554e:	f040 808f 	bne.w	1a005670 <__udivmoddi4+0x210>
1a005552:	1b49      	subs	r1, r1, r5
1a005554:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005558:	fa1f f885 	uxth.w	r8, r5
1a00555c:	2701      	movs	r7, #1
1a00555e:	fbb1 fcfe 	udiv	ip, r1, lr
1a005562:	0c23      	lsrs	r3, r4, #16
1a005564:	fb0e 111c 	mls	r1, lr, ip, r1
1a005568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00556c:	fb08 f10c 	mul.w	r1, r8, ip
1a005570:	4299      	cmp	r1, r3
1a005572:	d907      	bls.n	1a005584 <__udivmoddi4+0x124>
1a005574:	18eb      	adds	r3, r5, r3
1a005576:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00557a:	d202      	bcs.n	1a005582 <__udivmoddi4+0x122>
1a00557c:	4299      	cmp	r1, r3
1a00557e:	f200 80cd 	bhi.w	1a00571c <__udivmoddi4+0x2bc>
1a005582:	4684      	mov	ip, r0
1a005584:	1a59      	subs	r1, r3, r1
1a005586:	b2a3      	uxth	r3, r4
1a005588:	fbb1 f0fe 	udiv	r0, r1, lr
1a00558c:	fb0e 1410 	mls	r4, lr, r0, r1
1a005590:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a005594:	fb08 f800 	mul.w	r8, r8, r0
1a005598:	45a0      	cmp	r8, r4
1a00559a:	d907      	bls.n	1a0055ac <__udivmoddi4+0x14c>
1a00559c:	192c      	adds	r4, r5, r4
1a00559e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0055a2:	d202      	bcs.n	1a0055aa <__udivmoddi4+0x14a>
1a0055a4:	45a0      	cmp	r8, r4
1a0055a6:	f200 80b6 	bhi.w	1a005716 <__udivmoddi4+0x2b6>
1a0055aa:	4618      	mov	r0, r3
1a0055ac:	eba4 0408 	sub.w	r4, r4, r8
1a0055b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0055b4:	e79f      	b.n	1a0054f6 <__udivmoddi4+0x96>
1a0055b6:	f1c7 0c20 	rsb	ip, r7, #32
1a0055ba:	40bb      	lsls	r3, r7
1a0055bc:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0055c0:	ea4e 0e03 	orr.w	lr, lr, r3
1a0055c4:	fa01 f407 	lsl.w	r4, r1, r7
1a0055c8:	fa20 f50c 	lsr.w	r5, r0, ip
1a0055cc:	fa21 f30c 	lsr.w	r3, r1, ip
1a0055d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0055d4:	4325      	orrs	r5, r4
1a0055d6:	fbb3 f9f8 	udiv	r9, r3, r8
1a0055da:	0c2c      	lsrs	r4, r5, #16
1a0055dc:	fb08 3319 	mls	r3, r8, r9, r3
1a0055e0:	fa1f fa8e 	uxth.w	sl, lr
1a0055e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0055e8:	fb09 f40a 	mul.w	r4, r9, sl
1a0055ec:	429c      	cmp	r4, r3
1a0055ee:	fa02 f207 	lsl.w	r2, r2, r7
1a0055f2:	fa00 f107 	lsl.w	r1, r0, r7
1a0055f6:	d90b      	bls.n	1a005610 <__udivmoddi4+0x1b0>
1a0055f8:	eb1e 0303 	adds.w	r3, lr, r3
1a0055fc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a005600:	f080 8087 	bcs.w	1a005712 <__udivmoddi4+0x2b2>
1a005604:	429c      	cmp	r4, r3
1a005606:	f240 8084 	bls.w	1a005712 <__udivmoddi4+0x2b2>
1a00560a:	f1a9 0902 	sub.w	r9, r9, #2
1a00560e:	4473      	add	r3, lr
1a005610:	1b1b      	subs	r3, r3, r4
1a005612:	b2ad      	uxth	r5, r5
1a005614:	fbb3 f0f8 	udiv	r0, r3, r8
1a005618:	fb08 3310 	mls	r3, r8, r0, r3
1a00561c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a005620:	fb00 fa0a 	mul.w	sl, r0, sl
1a005624:	45a2      	cmp	sl, r4
1a005626:	d908      	bls.n	1a00563a <__udivmoddi4+0x1da>
1a005628:	eb1e 0404 	adds.w	r4, lr, r4
1a00562c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005630:	d26b      	bcs.n	1a00570a <__udivmoddi4+0x2aa>
1a005632:	45a2      	cmp	sl, r4
1a005634:	d969      	bls.n	1a00570a <__udivmoddi4+0x2aa>
1a005636:	3802      	subs	r0, #2
1a005638:	4474      	add	r4, lr
1a00563a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00563e:	fba0 8902 	umull	r8, r9, r0, r2
1a005642:	eba4 040a 	sub.w	r4, r4, sl
1a005646:	454c      	cmp	r4, r9
1a005648:	46c2      	mov	sl, r8
1a00564a:	464b      	mov	r3, r9
1a00564c:	d354      	bcc.n	1a0056f8 <__udivmoddi4+0x298>
1a00564e:	d051      	beq.n	1a0056f4 <__udivmoddi4+0x294>
1a005650:	2e00      	cmp	r6, #0
1a005652:	d069      	beq.n	1a005728 <__udivmoddi4+0x2c8>
1a005654:	ebb1 050a 	subs.w	r5, r1, sl
1a005658:	eb64 0403 	sbc.w	r4, r4, r3
1a00565c:	fa04 fc0c 	lsl.w	ip, r4, ip
1a005660:	40fd      	lsrs	r5, r7
1a005662:	40fc      	lsrs	r4, r7
1a005664:	ea4c 0505 	orr.w	r5, ip, r5
1a005668:	e9c6 5400 	strd	r5, r4, [r6]
1a00566c:	2700      	movs	r7, #0
1a00566e:	e747      	b.n	1a005500 <__udivmoddi4+0xa0>
1a005670:	f1c2 0320 	rsb	r3, r2, #32
1a005674:	fa20 f703 	lsr.w	r7, r0, r3
1a005678:	4095      	lsls	r5, r2
1a00567a:	fa01 f002 	lsl.w	r0, r1, r2
1a00567e:	fa21 f303 	lsr.w	r3, r1, r3
1a005682:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005686:	4338      	orrs	r0, r7
1a005688:	0c01      	lsrs	r1, r0, #16
1a00568a:	fbb3 f7fe 	udiv	r7, r3, lr
1a00568e:	fa1f f885 	uxth.w	r8, r5
1a005692:	fb0e 3317 	mls	r3, lr, r7, r3
1a005696:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00569a:	fb07 f308 	mul.w	r3, r7, r8
1a00569e:	428b      	cmp	r3, r1
1a0056a0:	fa04 f402 	lsl.w	r4, r4, r2
1a0056a4:	d907      	bls.n	1a0056b6 <__udivmoddi4+0x256>
1a0056a6:	1869      	adds	r1, r5, r1
1a0056a8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0056ac:	d22f      	bcs.n	1a00570e <__udivmoddi4+0x2ae>
1a0056ae:	428b      	cmp	r3, r1
1a0056b0:	d92d      	bls.n	1a00570e <__udivmoddi4+0x2ae>
1a0056b2:	3f02      	subs	r7, #2
1a0056b4:	4429      	add	r1, r5
1a0056b6:	1acb      	subs	r3, r1, r3
1a0056b8:	b281      	uxth	r1, r0
1a0056ba:	fbb3 f0fe 	udiv	r0, r3, lr
1a0056be:	fb0e 3310 	mls	r3, lr, r0, r3
1a0056c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0056c6:	fb00 f308 	mul.w	r3, r0, r8
1a0056ca:	428b      	cmp	r3, r1
1a0056cc:	d907      	bls.n	1a0056de <__udivmoddi4+0x27e>
1a0056ce:	1869      	adds	r1, r5, r1
1a0056d0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0056d4:	d217      	bcs.n	1a005706 <__udivmoddi4+0x2a6>
1a0056d6:	428b      	cmp	r3, r1
1a0056d8:	d915      	bls.n	1a005706 <__udivmoddi4+0x2a6>
1a0056da:	3802      	subs	r0, #2
1a0056dc:	4429      	add	r1, r5
1a0056de:	1ac9      	subs	r1, r1, r3
1a0056e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0056e4:	e73b      	b.n	1a00555e <__udivmoddi4+0xfe>
1a0056e6:	4637      	mov	r7, r6
1a0056e8:	4630      	mov	r0, r6
1a0056ea:	e709      	b.n	1a005500 <__udivmoddi4+0xa0>
1a0056ec:	4607      	mov	r7, r0
1a0056ee:	e6e7      	b.n	1a0054c0 <__udivmoddi4+0x60>
1a0056f0:	4618      	mov	r0, r3
1a0056f2:	e6fb      	b.n	1a0054ec <__udivmoddi4+0x8c>
1a0056f4:	4541      	cmp	r1, r8
1a0056f6:	d2ab      	bcs.n	1a005650 <__udivmoddi4+0x1f0>
1a0056f8:	ebb8 0a02 	subs.w	sl, r8, r2
1a0056fc:	eb69 020e 	sbc.w	r2, r9, lr
1a005700:	3801      	subs	r0, #1
1a005702:	4613      	mov	r3, r2
1a005704:	e7a4      	b.n	1a005650 <__udivmoddi4+0x1f0>
1a005706:	4660      	mov	r0, ip
1a005708:	e7e9      	b.n	1a0056de <__udivmoddi4+0x27e>
1a00570a:	4618      	mov	r0, r3
1a00570c:	e795      	b.n	1a00563a <__udivmoddi4+0x1da>
1a00570e:	4667      	mov	r7, ip
1a005710:	e7d1      	b.n	1a0056b6 <__udivmoddi4+0x256>
1a005712:	4681      	mov	r9, r0
1a005714:	e77c      	b.n	1a005610 <__udivmoddi4+0x1b0>
1a005716:	3802      	subs	r0, #2
1a005718:	442c      	add	r4, r5
1a00571a:	e747      	b.n	1a0055ac <__udivmoddi4+0x14c>
1a00571c:	f1ac 0c02 	sub.w	ip, ip, #2
1a005720:	442b      	add	r3, r5
1a005722:	e72f      	b.n	1a005584 <__udivmoddi4+0x124>
1a005724:	4638      	mov	r0, r7
1a005726:	e708      	b.n	1a00553a <__udivmoddi4+0xda>
1a005728:	4637      	mov	r7, r6
1a00572a:	e6e9      	b.n	1a005500 <__udivmoddi4+0xa0>

1a00572c <__aeabi_idiv0>:
1a00572c:	4770      	bx	lr
1a00572e:	bf00      	nop

1a005730 <__libc_init_array>:
1a005730:	b570      	push	{r4, r5, r6, lr}
1a005732:	4e0d      	ldr	r6, [pc, #52]	; (1a005768 <__libc_init_array+0x38>)
1a005734:	4c0d      	ldr	r4, [pc, #52]	; (1a00576c <__libc_init_array+0x3c>)
1a005736:	1ba4      	subs	r4, r4, r6
1a005738:	10a4      	asrs	r4, r4, #2
1a00573a:	2500      	movs	r5, #0
1a00573c:	42a5      	cmp	r5, r4
1a00573e:	d109      	bne.n	1a005754 <__libc_init_array+0x24>
1a005740:	4e0b      	ldr	r6, [pc, #44]	; (1a005770 <__libc_init_array+0x40>)
1a005742:	4c0c      	ldr	r4, [pc, #48]	; (1a005774 <__libc_init_array+0x44>)
1a005744:	f7ff fc66 	bl	1a005014 <_init>
1a005748:	1ba4      	subs	r4, r4, r6
1a00574a:	10a4      	asrs	r4, r4, #2
1a00574c:	2500      	movs	r5, #0
1a00574e:	42a5      	cmp	r5, r4
1a005750:	d105      	bne.n	1a00575e <__libc_init_array+0x2e>
1a005752:	bd70      	pop	{r4, r5, r6, pc}
1a005754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a005758:	4798      	blx	r3
1a00575a:	3501      	adds	r5, #1
1a00575c:	e7ee      	b.n	1a00573c <__libc_init_array+0xc>
1a00575e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a005762:	4798      	blx	r3
1a005764:	3501      	adds	r5, #1
1a005766:	e7f2      	b.n	1a00574e <__libc_init_array+0x1e>
1a005768:	1a005ba0 	.word	0x1a005ba0
1a00576c:	1a005ba0 	.word	0x1a005ba0
1a005770:	1a005ba0 	.word	0x1a005ba0
1a005774:	1a005ba0 	.word	0x1a005ba0

1a005778 <memcpy>:
1a005778:	b510      	push	{r4, lr}
1a00577a:	1e43      	subs	r3, r0, #1
1a00577c:	440a      	add	r2, r1
1a00577e:	4291      	cmp	r1, r2
1a005780:	d100      	bne.n	1a005784 <memcpy+0xc>
1a005782:	bd10      	pop	{r4, pc}
1a005784:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005788:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00578c:	e7f7      	b.n	1a00577e <memcpy+0x6>

1a00578e <memset>:
1a00578e:	4402      	add	r2, r0
1a005790:	4603      	mov	r3, r0
1a005792:	4293      	cmp	r3, r2
1a005794:	d100      	bne.n	1a005798 <memset+0xa>
1a005796:	4770      	bx	lr
1a005798:	f803 1b01 	strb.w	r1, [r3], #1
1a00579c:	e7f9      	b.n	1a005792 <memset+0x4>
1a00579e:	ffff 614c 			; <UNDEFINED> instruction: 0xffff614c
1a0057a2:	7420      	.short	0x7420
1a0057a4:	61657261 	.word	0x61657261
1a0057a8:	00004120 	.word	0x00004120
1a0057ac:	65726154 	.word	0x65726154
1a0057b0:	45422061 	.word	0x45422061
1a0057b4:	00002120 	.word	0x00002120
1a0057b8:	65726154 	.word	0x65726154
1a0057bc:	45432061 	.word	0x45432061
1a0057c0:	00000021 	.word	0x00000021
1a0057c4:	65726154 	.word	0x65726154
1a0057c8:	45442061 	.word	0x45442061
1a0057cc:	00000021 	.word	0x00000021
1a0057d0:	69746e41 	.word	0x69746e41
1a0057d4:	6f626572 	.word	0x6f626572
1a0057d8:	21216574 	.word	0x21216574
1a0057dc:	ffffff00 	.word	0xffffff00
1a0057e0:	2055504d 	.word	0x2055504d
1a0057e4:	656e6f63 	.word	0x656e6f63
1a0057e8:	64617463 	.word	0x64617463
1a0057ec:	0a0d216f 	.word	0x0a0d216f
1a0057f0:	00000000 	.word	0x00000000
1a0057f4:	2075704d 	.word	0x2075704d
1a0057f8:	64206f6e 	.word	0x64206f6e
1a0057fc:	63657465 	.word	0x63657465
1a005800:	6f646174 	.word	0x6f646174
1a005804:	000a0d21 	.word	0x000a0d21
1a005808:	6f726947 	.word	0x6f726947
1a00580c:	706f6373 	.word	0x706f6373
1a005810:	000a0d6f 	.word	0x000a0d6f
1a005814:	312a5475 	.word	0x312a5475
1a005818:	3a582030 	.word	0x3a582030
1a00581c:	00002020 	.word	0x00002020
1a005820:	00000a0d 	.word	0x00000a0d
1a005824:	312a5475 	.word	0x312a5475
1a005828:	3a592030 	.word	0x3a592030
1a00582c:	00002020 	.word	0x00002020
1a005830:	312a5475 	.word	0x312a5475
1a005834:	3a5a2030 	.word	0x3a5a2030
1a005838:	00002020 	.word	0x00002020
1a00583c:	0a0d0a0d 	.word	0x0a0d0a0d
1a005840:	00000000 	.word	0x00000000
1a005844:	74736f4d 	.word	0x74736f4d
1a005848:	646e6172 	.word	0x646e6172
1a00584c:	20203a6f 	.word	0x20203a6f
1a005850:	ffffff00 	.word	0xffffff00
1a005854:	454c4449 	.word	0x454c4449
1a005858:	ffffff00 	.word	0xffffff00
1a00585c:	51726d54 	.word	0x51726d54
1a005860:	ffffff00 	.word	0xffffff00
1a005864:	20726d54 	.word	0x20726d54
1a005868:	00637653 	.word	0x00637653

1a00586c <ultrasonicSensorsIrqMap>:
1a00586c:	ff020100                                ....

1a005870 <gpioPinsInit>:
1a005870:	02000104 00050701 05010d03 04080100     ................
1a005880:	02020002 02000304 00000403 04070002     ................
1a005890:	030c0300 09050402 05040103 04030208     ................
1a0058a0:	04020305 06040504 0802000c 03000b06     ................
1a0058b0:	00090607 07060503 060f0504 03030004     ................
1a0058c0:	02000404 00050404 06040502 04060200     ................
1a0058d0:	0c050408 05040a04 0003010e 14010a00     ................
1a0058e0:	010f0000 0d000012 00001101 0010010c     ................
1a0058f0:	07070300 000f0300 01000001 00000000     ................
1a005900:	000a0600 08060603 06100504 04030005     ................
1a005910:	03000106 04090400 04010d05 010b0000     ................
1a005920:	0200000f 00000001 00010104 02010800     ................
1a005930:	01090000 09010006 05040002 04010200     ................
1a005940:	02020105 02020504 0e00000a 01000b02     ................
1a005950:	000c020b 00040c01 04000200 01020001     ................
1a005960:	02000204 00030402 03070302 070b0300     ................
1a005970:	0c030004 03000507 0006070d 01020e03     ................
1a005980:	04010504 06020006 02000504 00040405     ................
1a005990:	08040402 040c0504 0d050409 05040a04     ................
1a0059a0:	0005010e ffff0801 636b6974 69547265     ........tikcerTi
1a0059b0:	0072656d                                mer.

1a0059b4 <lpcUarts>:
1a0059b4:	40081000 06020406 00180205 40081000     ...@...........@
1a0059c4:	09070509 00180706 40082000 00000000     ......... .@....
1a0059d4:	00190000 400c1000 07060107 001a0602     .......@........
1a0059e4:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0059f4:	02020302 001b0204                       ........

1a0059fc <ExtRateIn>:
1a0059fc:	00000000                                ....

1a005a00 <GpioButtons>:
1a005a00:	08000400 09010900                       ........

1a005a08 <GpioLeds>:
1a005a08:	01050005 0e000205 0c010b01              ............

1a005a14 <GpioPorts>:
1a005a14:	03030003 0f050403 05031005 07030603     ................
1a005a24:	ffff0802                                ....

1a005a28 <OscRateIn>:
1a005a28:	00b71b00                                ....

1a005a2c <InitClkStates>:
1a005a2c:	00010308 00010307 01010f01              ............

1a005a38 <pinmuxing>:
1a005a38:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005a48:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005a58:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005a68:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005a78:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005a88:	00d50301 00d50401 00160107 00560207     ..............V.
1a005a98:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005aa8:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a005ab8:	00b31201 00f01301 00b31401 00b60707     ................
1a005ac8:	00f20000 00b60100                       ........

1a005ad0 <UART_BClock>:
1a005ad0:	01a201c2 01620182                       ......b.

1a005ad8 <UART_PClock>:
1a005ad8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005ae8:	000000ff                                ....

1a005aec <periph_to_base>:
1a005aec:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005afc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005b0c:	000100e0 01000100 01200003 00060120     .......... . ...
1a005b1c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005b2c:	01820013 00120182 01a201a2 01c20011     ................
1a005b3c:	001001c2 01e201e2 0202000f 000e0202     ................
1a005b4c:	02220222 0223000d 001c0223              "."...#.#...

1a005b58 <InitClkStates>:
1a005b58:	00010100 00010909 0001090a 01010701     ................
1a005b68:	00010902 00010906 0101090c 0001090d     ................
1a005b78:	0001090e 0001090f 00010910 00010911     ................
1a005b88:	00010912 00010913 00011114 00011119     ................
1a005b98:	0001111a 0001111b                       ........
